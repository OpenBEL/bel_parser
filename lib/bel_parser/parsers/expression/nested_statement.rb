
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 48, 122, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	32, 9, 122, 9, 122, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 48, 122, 
	9, 122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 10, 10, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	65, 122, 47, 47, 47, 47, 
	9, 32, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	40, 48, 122, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 32, 9, 122, 9, 122, 
	9, 122, 41, 41, 9, 
	122, 9, 40, 48, 122, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	0, 0, 0, 0, 65, 122, 
	10, 10, 9, 32, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 75, 114, 114, 31, 
	59, 59, 36, 36, 114, 24, 114, 114, 
	32, 1, 39, 1, 1, 1, 0, 54, 
	54, 0, 114, 36, 114, 114, 75, 31, 
	59, 59, 0, 54, 54, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 75, 
	114, 32, 75, 114, 114, 31, 59, 59, 
	36, 36, 114, 0, 54, 54, 0, 114, 
	36, 114, 114, 75, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 1, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	58, 1, 1, 24, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 114, 32, 75, 114, 
	114, 31, 59, 59, 36, 36, 114, 39, 
	39, 1, 1, 1, 0, 54, 54, 0, 
	114, 36, 114, 114, 0, 54, 54, 0, 
	114, 36, 114, 114, 75, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	24, 114, 114, 114, 1, 114, 32, 75, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 54, 54, 0, 114, 36, 114, 114, 
	0, 113, 0, 0, 114, 114, 0, 75, 
	0, 0, 58, 1, 24, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 300, 415, 530, 
	562, 622, 682, 719, 756, 871, 896, 1011, 
	1126, 1159, 1161, 1201, 1203, 1205, 1207, 1208, 
	1263, 1318, 1319, 1434, 1471, 1586, 1701, 1777, 
	1809, 1869, 1929, 1930, 1985, 2040, 2041, 2117, 
	2193, 2225, 2285, 2345, 2346, 2401, 2456, 2457, 
	2533, 2648, 2681, 2757, 2872, 2987, 3019, 3079, 
	3139, 3176, 3213, 3328, 3329, 3384, 3439, 3440, 
	3555, 3592, 3707, 3822, 3898, 4013, 4046, 4122, 
	4237, 4352, 4384, 4444, 4504, 4541, 4578, 4693, 
	4695, 4696, 4751, 4806, 4807, 4922, 4959, 5074, 
	5189, 5248, 5250, 5252, 5277, 5353, 5468, 5501, 
	5577, 5692, 5807, 5839, 5899, 5959, 5996, 6033, 
	6148, 6173, 6288, 6403, 6518, 6633, 6666, 6742, 
	6857, 6972, 7004, 7064, 7124, 7161, 7198, 7313, 
	7353, 7393, 7395, 7397, 7399, 7400, 7455, 7510, 
	7511, 7626, 7663, 7778, 7893, 7894, 7949, 8004, 
	8005, 8120, 8157, 8272, 8387, 8463, 8578, 8611, 
	8687, 8802, 8917, 8949, 9009, 9069, 9106, 9143, 
	9258, 9283, 9398, 9513, 9628, 9630, 9745, 9778, 
	9854, 9969, 10084, 10116, 10176, 10236, 10273, 10310, 
	10425, 10426, 10481, 10536, 10537, 10652, 10689, 10804, 
	10919, 10920, 10975, 11030, 11031, 11146, 11183, 11298, 
	11413, 11414, 11528, 11529, 11530, 11645, 11760, 11761, 
	11837, 11838, 11839, 11898, 11900, 11925, 11926, 11927
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 7, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 8, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 1, 10, 1, 1, 
	1, 1, 11, 12, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 1, 1, 1, 
	1, 1, 1, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 1, 
	1, 1, 13, 1, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 1, 14, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 1, 
	16, 1, 1, 1, 1, 17, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 1, 1, 1, 18, 1, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 1, 15, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 16, 1, 1, 1, 1, 
	17, 1, 20, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 21, 19, 23, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	24, 22, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 25, 28, 25, 29, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 30, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 1, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 1, 31, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 31, 25, 
	32, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 32, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 1, 1, 1, 1, 1, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 1, 34, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 34, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 1, 1, 
	1, 1, 1, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 1, 35, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	1, 1, 1, 1, 1, 36, 1, 37, 
	1, 37, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	37, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 39, 
	1, 40, 1, 1, 41, 43, 42, 22, 
	20, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 45, 44, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 47, 46, 46, 48, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 48, 25, 
	25, 25, 25, 25, 25, 25, 25, 49, 
	25, 25, 50, 25, 25, 25, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	25, 25, 25, 25, 25, 25, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 25, 25, 25, 51, 25, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 25, 29, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 29, 25, 25, 25, 25, 25, 25, 
	25, 25, 52, 25, 25, 30, 25, 53, 
	9, 9, 9, 9, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 53, 25, 
	10, 25, 25, 25, 25, 11, 12, 49, 
	25, 25, 50, 25, 25, 25, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	25, 25, 25, 25, 25, 25, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 25, 25, 25, 13, 25, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 25, 54, 15, 15, 15, 15, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 54, 1, 16, 1, 1, 1, 1, 
	17, 1, 1, 1, 1, 30, 1, 1, 
	1, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 1, 1, 1, 1, 1, 
	1, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 1, 1, 1, 
	18, 1, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 1, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 1, 
	1, 1, 1, 1, 1, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 1, 1, 1, 55, 1, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	1, 56, 56, 56, 56, 56, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	56, 1, 57, 1, 1, 1, 1, 58, 
	1, 60, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 61, 59, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 60, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 66, 
	65, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 67, 
	67, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 71, 
	1, 1, 1, 1, 1, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 1, 1, 1, 70, 1, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	1, 72, 72, 72, 72, 72, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	72, 1, 73, 1, 1, 1, 1, 74, 
	1, 76, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 77, 75, 79, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	78, 78, 76, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 82, 
	81, 79, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 84, 83, 
	83, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 1, 1, 1, 1, 1, 
	1, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	85, 1, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 1, 86, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 1, 1, 
	1, 1, 1, 1, 87, 1, 1, 1, 
	1, 1, 1, 1, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 1, 1, 
	1, 1, 1, 1, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	1, 1, 1, 88, 1, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 1, 
	89, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	1, 1, 1, 1, 1, 1, 1, 90, 
	1, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 1, 1, 1, 1, 1, 
	1, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 1, 1, 1, 
	91, 1, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 1, 92, 93, 93, 
	93, 93, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 94, 1, 
	1, 1, 1, 95, 96, 1, 1, 1, 
	1, 1, 1, 1, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 1, 1, 
	1, 1, 1, 1, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	1, 1, 1, 97, 1, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 1, 
	98, 99, 99, 99, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	1, 100, 1, 1, 1, 1, 101, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 1, 1, 1, 102, 1, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 1, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 99, 1, 100, 1, 1, 1, 
	1, 101, 1, 104, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 107, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 108, 106, 109, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 109, 25, 25, 25, 25, 25, 
	25, 25, 25, 110, 25, 25, 111, 25, 
	112, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 112, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 113, 1, 113, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 1, 1, 
	1, 1, 1, 1, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	1, 1, 1, 91, 1, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 1, 
	106, 104, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 115, 114, 
	107, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 117, 116, 116, 
	118, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 118, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	119, 25, 25, 120, 25, 25, 25, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 25, 25, 25, 25, 25, 25, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 25, 25, 25, 121, 25, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 25, 112, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 112, 25, 25, 25, 25, 25, 
	25, 25, 25, 122, 25, 25, 113, 25, 
	123, 93, 93, 93, 93, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 123, 
	25, 94, 25, 25, 25, 25, 95, 96, 
	119, 25, 25, 120, 25, 25, 25, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 25, 25, 25, 97, 25, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 25, 124, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 124, 1, 100, 1, 1, 1, 
	1, 101, 1, 1, 1, 1, 113, 1, 
	1, 1, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 1, 1, 1, 1, 
	1, 1, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 1, 1, 
	1, 102, 1, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 1, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	1, 1, 1, 1, 1, 1, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 1, 1, 1, 125, 1, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 1, 126, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 126, 1, 1, 1, 1, 1, 1, 
	1, 127, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	128, 1, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 129, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 1, 1, 1, 
	1, 1, 1, 1, 130, 1, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	1, 1, 1, 1, 1, 1, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 1, 1, 1, 131, 1, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 1, 132, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 134, 1, 1, 1, 1, 
	135, 136, 1, 1, 1, 1, 1, 1, 
	1, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 1, 1, 1, 1, 1, 
	1, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 1, 1, 1, 
	137, 1, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 1, 138, 139, 139, 
	139, 139, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 138, 1, 140, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 1, 1, 
	1, 1, 1, 1, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	1, 1, 1, 142, 1, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 1, 
	139, 139, 139, 139, 139, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	1, 140, 1, 1, 1, 1, 141, 1, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 143, 147, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 148, 146, 
	149, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 149, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	150, 25, 25, 151, 25, 152, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 152, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	153, 1, 153, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 153, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 1, 1, 1, 1, 1, 
	1, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 1, 1, 1, 
	131, 1, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 1, 154, 25, 146, 
	144, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 156, 155, 147, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 158, 157, 157, 159, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 159, 25, 
	25, 25, 25, 25, 25, 25, 25, 160, 
	25, 25, 161, 25, 25, 25, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	25, 25, 25, 25, 25, 25, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 25, 25, 25, 162, 25, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 162, 162, 162, 162, 162, 162, 162, 
	162, 25, 152, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 152, 25, 25, 25, 25, 25, 25, 
	25, 25, 163, 25, 25, 153, 25, 164, 
	133, 133, 133, 133, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 164, 25, 
	134, 25, 25, 25, 25, 135, 136, 160, 
	25, 25, 161, 25, 25, 25, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	25, 25, 25, 25, 25, 25, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 25, 25, 25, 137, 25, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 25, 165, 139, 139, 139, 139, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 165, 1, 140, 1, 1, 1, 1, 
	141, 1, 1, 1, 1, 153, 1, 1, 
	1, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 1, 1, 1, 1, 1, 
	1, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 1, 1, 1, 
	142, 1, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	1, 1, 1, 1, 1, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 1, 
	167, 1, 168, 1, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 1, 
	1, 1, 1, 1, 1, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 1, 1, 1, 171, 1, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	1, 172, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 1, 1, 1, 1, 1, 1, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 1, 1, 1, 174, 
	1, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 175, 1, 1, 1, 1, 
	1, 1, 1, 176, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 1, 
	1, 1, 1, 1, 1, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 1, 1, 1, 177, 1, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 178, 179, 179, 179, 179, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 180, 1, 1, 1, 1, 181, 
	182, 1, 1, 1, 1, 1, 1, 1, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 1, 1, 1, 183, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 1, 184, 185, 185, 185, 
	185, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 1, 186, 1, 1, 
	1, 1, 187, 1, 1, 1, 1, 1, 
	1, 1, 1, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 1, 1, 1, 
	1, 1, 1, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 1, 
	1, 1, 188, 1, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 1, 185, 
	185, 185, 185, 185, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 1, 
	186, 1, 1, 1, 1, 187, 1, 190, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 191, 189, 193, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 194, 192, 195, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 195, 25, 
	25, 25, 25, 25, 25, 25, 25, 196, 
	25, 25, 197, 25, 198, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 198, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 199, 
	1, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 200, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 200, 25, 201, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	1, 1, 1, 1, 1, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 1, 1, 1, 1, 1, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 1, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 203, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 1, 1, 1, 1, 
	1, 1, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 1, 1, 
	1, 204, 1, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 1, 1, 
	1, 1, 1, 1, 1, 206, 1, 1, 
	1, 1, 1, 1, 1, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 1, 
	1, 1, 1, 1, 1, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 1, 1, 1, 207, 1, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	208, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 1, 1, 1, 1, 
	1, 1, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 1, 1, 
	1, 210, 1, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 1, 211, 212, 
	212, 212, 212, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 211, 1, 213, 
	1, 1, 1, 1, 214, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 217, 218, 218, 218, 218, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 1, 219, 1, 1, 1, 1, 220, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 1, 1, 1, 1, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 221, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 218, 218, 218, 218, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 218, 1, 219, 1, 1, 
	1, 1, 220, 1, 223, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 224, 222, 
	226, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 227, 225, 228, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 228, 25, 25, 25, 25, 
	25, 25, 25, 25, 229, 25, 25, 230, 
	25, 231, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	231, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 1, 232, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 1, 
	1, 1, 1, 1, 1, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 1, 1, 1, 210, 1, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	1, 233, 234, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	233, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 235, 
	25, 236, 237, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	236, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 238, 
	1, 239, 1, 1, 240, 242, 241, 225, 
	223, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 243, 226, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 246, 245, 245, 247, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 247, 25, 
	25, 25, 25, 25, 25, 25, 25, 248, 
	25, 25, 249, 25, 25, 25, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	25, 25, 25, 25, 25, 25, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 25, 25, 25, 250, 25, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 25, 231, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 231, 25, 25, 25, 25, 25, 25, 
	25, 25, 251, 25, 25, 232, 25, 252, 
	212, 212, 212, 212, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 252, 25, 
	213, 25, 25, 25, 25, 214, 215, 248, 
	25, 25, 249, 25, 25, 25, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	25, 25, 25, 25, 25, 25, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 25, 25, 25, 216, 25, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 25, 253, 218, 218, 218, 218, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 219, 1, 1, 1, 1, 
	220, 1, 1, 1, 1, 232, 1, 1, 
	1, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 1, 1, 1, 1, 1, 
	1, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 1, 1, 1, 
	221, 1, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 1, 192, 190, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 255, 254, 193, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 257, 256, 256, 258, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 258, 25, 25, 25, 
	25, 25, 25, 25, 25, 259, 25, 25, 
	260, 25, 25, 25, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 25, 25, 
	25, 25, 25, 25, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	25, 25, 25, 261, 25, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 25, 
	198, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 198, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	262, 25, 25, 199, 25, 263, 179, 179, 
	179, 179, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 263, 25, 180, 25, 
	25, 25, 25, 181, 182, 259, 25, 25, 
	260, 25, 25, 25, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 25, 25, 
	25, 25, 25, 25, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	25, 25, 25, 183, 25, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 25, 
	264, 185, 185, 185, 185, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 264, 
	1, 186, 1, 1, 1, 1, 187, 1, 
	1, 1, 1, 199, 1, 1, 1, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 1, 1, 1, 1, 1, 1, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 1, 1, 1, 188, 1, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 1, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 1, 1, 1, 
	1, 1, 1, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 1, 
	1, 1, 265, 1, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1, 266, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 266, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 1, 1, 1, 268, 1, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 1, 269, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 269, 1, 1, 1, 1, 1, 1, 
	1, 270, 1, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1, 1, 1, 
	1, 1, 1, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 1, 
	1, 1, 271, 1, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 1, 272, 
	273, 273, 273, 273, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 272, 1, 
	274, 1, 1, 1, 1, 275, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 278, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 1, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 279, 279, 279, 
	279, 279, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 279, 1, 280, 1, 
	1, 1, 1, 281, 1, 284, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 287, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 288, 286, 289, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 289, 25, 25, 25, 
	25, 25, 25, 25, 25, 290, 25, 25, 
	291, 25, 292, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 292, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 293, 1, 293, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 293, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 1, 1, 1, 271, 1, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 1, 294, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 294, 25, 295, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 295, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 1, 1, 
	1, 1, 1, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 1, 297, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 297, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 1, 1, 1, 1, 1, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	1, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	299, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 1, 1, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 1, 1, 1, 300, 
	1, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 1, 301, 1, 302, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 302, 1, 1, 
	1, 1, 1, 1, 1, 303, 1, 1, 
	1, 1, 1, 1, 1, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 1, 
	1, 1, 1, 1, 1, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 1, 1, 1, 304, 1, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	1, 305, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	305, 1, 1, 1, 1, 1, 1, 1, 
	306, 1, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 1, 1, 1, 1, 
	1, 1, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 1, 1, 
	1, 307, 1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 1, 308, 309, 
	309, 309, 309, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 308, 1, 310, 
	1, 1, 1, 1, 311, 312, 1, 1, 
	1, 1, 1, 1, 1, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 1, 
	1, 1, 1, 1, 1, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 1, 1, 1, 313, 1, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	1, 314, 315, 315, 315, 315, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	314, 1, 316, 1, 1, 1, 1, 317, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 1, 1, 1, 1, 1, 1, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 1, 1, 1, 318, 
	1, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 1, 315, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 315, 1, 316, 1, 1, 
	1, 1, 317, 1, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 321, 319, 
	323, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 324, 322, 325, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 325, 25, 25, 25, 25, 
	25, 25, 25, 25, 326, 25, 25, 327, 
	25, 328, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 329, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 1, 
	1, 1, 1, 1, 1, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 1, 1, 1, 307, 1, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	1, 322, 320, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 331, 
	330, 323, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 334, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	334, 25, 25, 25, 25, 25, 25, 25, 
	25, 335, 25, 25, 336, 25, 25, 25, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 25, 25, 25, 25, 25, 25, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 25, 25, 25, 337, 
	25, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 25, 328, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 328, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 329, 
	25, 339, 309, 309, 309, 309, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	339, 25, 310, 25, 25, 25, 25, 311, 
	312, 335, 25, 25, 336, 25, 25, 25, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 25, 25, 25, 25, 25, 25, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 25, 25, 25, 313, 
	25, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 25, 340, 315, 315, 315, 
	315, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 340, 1, 316, 1, 1, 
	1, 1, 317, 1, 1, 1, 1, 329, 
	1, 1, 1, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 1, 1, 1, 
	1, 1, 1, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 1, 
	1, 1, 318, 1, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 1, 286, 
	284, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 342, 341, 287, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 344, 343, 343, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 345, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 347, 25, 25, 25, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	25, 25, 25, 25, 25, 25, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 25, 25, 25, 348, 25, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 25, 292, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 292, 25, 25, 25, 25, 25, 25, 
	25, 25, 349, 25, 25, 293, 25, 350, 
	273, 273, 273, 273, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 350, 25, 
	274, 25, 25, 25, 25, 275, 276, 346, 
	25, 25, 347, 25, 25, 25, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	25, 25, 25, 25, 25, 25, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 25, 25, 25, 277, 25, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 25, 351, 279, 279, 279, 279, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 351, 1, 280, 1, 1, 1, 1, 
	281, 1, 1, 1, 1, 293, 1, 1, 
	1, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 1, 1, 1, 1, 1, 
	1, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 1, 1, 
	282, 1, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 1, 1, 352, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 1, 1, 
	1, 1, 1, 1, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 1, 353, 1, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 1, 
	1, 1, 354, 355, 355, 355, 355, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 356, 1, 1, 1, 1, 
	357, 1, 1, 1, 1, 1, 1, 1, 
	1, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 1, 1, 1, 1, 1, 
	1, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 1, 1, 1, 
	358, 1, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 1, 359, 72, 72, 
	72, 72, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 359, 1, 73, 1, 
	1, 1, 1, 74, 1, 1, 1, 1, 
	1, 1, 1, 1, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 1, 1, 
	1, 1, 1, 1, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 1, 1, 360, 1, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 1, 
	1, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 1, 1, 1, 1, 1, 
	1, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 1, 1, 1, 
	361, 1, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 1, 25, 25, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 1, 1, 1, 1, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 1, 1, 363, 170, 1, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 170, 169, 1, 1, 25, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 8, 23, 27, 28, 6, 7, 
	8, 23, 26, 9, 10, 22, 9, 10, 
	22, 0, 11, 13, 12, 11, 12, 14, 
	14, 15, 16, 16, 17, 18, 184, 19, 
	20, 21, 21, 184, 24, 25, 24, 25, 
	11, 13, 12, 26, 13, 29, 29, 185, 
	31, 32, 35, 33, 187, 34, 33, 187, 
	34, 36, 37, 36, 37, 39, 39, 188, 
	40, 41, 44, 42, 190, 43, 42, 190, 
	43, 45, 46, 45, 46, 48, 49, 50, 
	48, 49, 50, 51, 52, 53, 54, 60, 
	64, 65, 52, 53, 54, 60, 63, 55, 
	56, 59, 55, 56, 59, 57, 192, 58, 
	57, 58, 61, 62, 61, 62, 57, 192, 
	58, 63, 192, 66, 66, 68, 69, 70, 
	68, 69, 70, 71, 72, 73, 74, 81, 
	85, 86, 72, 73, 74, 81, 84, 75, 
	76, 80, 75, 76, 80, 77, 79, 78, 
	77, 78, 193, 82, 83, 82, 83, 77, 
	79, 78, 84, 79, 87, 87, 194, 90, 
	91, 195, 196, 93, 94, 95, 93, 94, 
	95, 96, 97, 98, 99, 133, 137, 138, 
	97, 98, 99, 133, 136, 100, 101, 132, 
	100, 101, 132, 102, 104, 103, 102, 103, 
	105, 105, 106, 107, 108, 109, 110, 108, 
	109, 110, 111, 112, 113, 114, 125, 129, 
	130, 112, 113, 114, 125, 128, 115, 116, 
	124, 115, 116, 124, 117, 119, 118, 117, 
	118, 120, 197, 121, 120, 197, 121, 122, 
	123, 123, 197, 126, 127, 126, 127, 117, 
	119, 118, 128, 119, 131, 131, 134, 135, 
	134, 135, 102, 104, 103, 136, 104, 139, 
	139, 141, 142, 143, 141, 142, 143, 144, 
	145, 146, 147, 177, 181, 182, 145, 146, 
	147, 177, 180, 148, 149, 176, 148, 149, 
	176, 150, 152, 151, 150, 151, 153, 153, 
	154, 155, 155, 156, 157, 198, 158, 159, 
	157, 158, 159, 160, 161, 162, 163, 169, 
	173, 174, 161, 162, 163, 169, 172, 164, 
	165, 168, 164, 165, 168, 166, 199, 167, 
	166, 167, 170, 171, 170, 171, 166, 199, 
	167, 172, 199, 175, 175, 178, 179, 178, 
	179, 150, 152, 151, 180, 152, 183, 183, 
	186, 185, 189, 40, 41, 44, 191, 189, 
	191, 191, 194, 195
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 17, 18, 18, 18, 0, 0, 19, 
	0, 0, 20, 0, 21, 0, 22, 0, 
	0, 23, 0, 24, 13, 13, 0, 0, 
	26, 26, 26, 0, 0, 27, 0, 11, 
	0, 0, 0, 13, 30, 13, 0, 31, 
	0, 13, 13, 0, 0, 11, 0, 32, 
	0, 0, 0, 13, 14, 13, 0, 15, 
	0, 13, 13, 0, 0, 33, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 34, 18, 
	0, 0, 13, 13, 0, 0, 26, 35, 
	26, 0, 36, 27, 0, 37, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 18, 18, 
	0, 0, 38, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 39, 0, 
	0, 23, 23, 37, 3, 4, 5, 0, 
	6, 7, 8, 8, 8, 8, 9, 10, 
	0, 0, 0, 0, 11, 13, 14, 13, 
	0, 15, 0, 18, 18, 18, 0, 0, 
	40, 0, 0, 0, 37, 3, 4, 5, 
	0, 6, 7, 8, 8, 8, 8, 9, 
	10, 0, 0, 0, 0, 11, 13, 14, 
	13, 0, 15, 0, 18, 18, 18, 0, 
	0, 41, 42, 41, 0, 43, 0, 0, 
	23, 0, 44, 13, 13, 0, 0, 26, 
	26, 26, 0, 0, 27, 0, 13, 13, 
	0, 0, 26, 26, 26, 0, 0, 27, 
	0, 45, 3, 4, 5, 0, 6, 7, 
	8, 8, 8, 8, 9, 10, 0, 0, 
	0, 0, 11, 13, 14, 13, 0, 15, 
	0, 18, 18, 18, 0, 0, 19, 0, 
	0, 20, 0, 21, 37, 46, 3, 4, 
	5, 0, 6, 7, 8, 8, 8, 8, 
	9, 10, 0, 0, 0, 0, 11, 13, 
	14, 13, 0, 15, 0, 18, 47, 18, 
	0, 0, 13, 13, 0, 0, 26, 48, 
	26, 0, 49, 27, 0, 13, 13, 0, 
	0, 26, 26, 26, 0, 0, 27, 0, 
	32, 0, 53, 53, 53, 53, 54, 0, 
	11, 0, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 1, 1, 1, 0, 
	12, 12, 16, 0, 1, 16, 0, 0, 
	0, 0, 0, 0, 0, 0, 12, 12, 
	12, 12, 25, 16, 25, 1, 0, 28, 
	29, 29, 29, 29, 29, 29, 1, 1, 
	0, 12, 12, 12, 12, 12, 12, 1, 
	1, 0, 1, 1, 1, 0, 12, 12, 
	16, 0, 1, 12, 12, 12, 12, 25, 
	16, 25, 1, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 1, 0, 1, 1, 
	1, 0, 12, 12, 16, 0, 1, 16, 
	0, 0, 0, 0, 12, 12, 12, 12, 
	25, 16, 25, 1, 12, 12, 12, 12, 
	25, 16, 25, 1, 1, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	16, 0, 0, 1, 0, 1, 0, 1, 
	1, 1, 0, 12, 12, 16, 0, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	12, 12, 12, 12, 25, 16, 25, 1, 
	0, 50, 51, 0, 52, 55, 56, 57, 
	58, 58, 59, 60, 60, 0, 0, 58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 184;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 30;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 31;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 47;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 67;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 88;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 89;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 92;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 140;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 11 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 53 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 40 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 20 then
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 21 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 140
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 47
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 54 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 24 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 19 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 27 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 58 then
		begin

  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 29 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 16 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 59 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 60 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 52 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
