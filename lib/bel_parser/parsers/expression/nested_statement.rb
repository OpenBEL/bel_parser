
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 126, 
	9, 122, 9, 44, 9, 
	47, 9, 126, 9, 126, 
	9, 126, 9, 40, 10, 41, 
	9, 47, 10, 47, 10, 
	10, 9, 126, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 44, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 47, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 39, 
	34, 92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 10, 10, 
	9, 122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 
	122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 
	47, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 47, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 126, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 10, 47, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 47, 9, 47, 
	9, 122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 
	126, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 
	47, 9, 47, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 126, 
	9, 126, 9, 122, 41, 41, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 44, 9, 126, 9, 
	122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 126, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 32, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 122, 
	9, 126, 9, 126, 0, 
	0, 10, 122, 0, 0, 
	0, 0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 9, 44, 0, 0, 
	9, 44, 0, 0, 9, 
	32, 9, 44, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 44, 9, 44, 9, 
	44, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 32, 1, 39, 1, 
	1, 1, 118, 114, 36, 39, 118, 118, 
	118, 32, 32, 39, 38, 1, 118, 114, 
	36, 24, 118, 114, 114, 114, 114, 114, 
	118, 36, 118, 118, 118, 118, 39, 118, 
	118, 118, 118, 114, 118, 118, 75, 31, 
	59, 59, 0, 54, 54, 0, 114, 1, 
	114, 113, 113, 113, 113, 114, 75, 114, 
	32, 114, 36, 36, 114, 114, 114, 36, 
	114, 114, 114, 114, 114, 75, 114, 32, 
	114, 36, 36, 114, 114, 36, 1, 114, 
	36, 114, 114, 114, 114, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	36, 36, 114, 114, 36, 118, 118, 114, 
	114, 32, 114, 36, 36, 114, 114, 39, 
	39, 1, 1, 1, 39, 39, 114, 36, 
	114, 114, 114, 114, 114, 118, 114, 114, 
	36, 114, 114, 114, 36, 36, 114, 114, 
	39, 118, 118, 114, 114, 36, 114, 39, 
	118, 118, 114, 114, 36, 114, 114, 118, 
	114, 118, 114, 118, 118, 114, 114, 32, 
	114, 36, 36, 114, 114, 39, 39, 38, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 39, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 114, 36, 114, 39, 39, 
	114, 114, 36, 118, 114, 114, 114, 36, 
	118, 114, 39, 118, 24, 118, 114, 36, 
	114, 114, 114, 114, 114, 39, 39, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 75, 114, 
	32, 114, 36, 36, 114, 114, 36, 118, 
	118, 114, 1, 114, 32, 114, 36, 36, 
	114, 114, 114, 36, 114, 114, 114, 114, 
	114, 118, 114, 36, 118, 114, 36, 114, 
	114, 114, 36, 36, 114, 114, 118, 118, 
	114, 114, 36, 114, 118, 118, 114, 114, 
	36, 114, 114, 118, 114, 118, 118, 118, 
	118, 114, 114, 114, 118, 118, 114, 114, 
	114, 114, 114, 118, 114, 118, 118, 118, 
	114, 114, 118, 118, 118, 118, 118, 114, 
	114, 114, 118, 118, 114, 36, 114, 114, 
	114, 36, 114, 114, 114, 36, 114, 24, 
	114, 36, 114, 114, 114, 114, 114, 114, 
	114, 118, 114, 118, 118, 118, 118, 118, 
	114, 114, 114, 118, 118, 0, 113, 0, 
	0, 0, 1, 36, 0, 0, 0, 0, 
	0, 36, 0, 36, 0, 24, 36, 36, 
	118, 118, 118, 36, 36, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 951, 953, 993, 
	995, 997, 999, 1118, 1233, 1270, 1310, 1429, 
	1548, 1667, 1700, 1733, 1773, 1812, 1814, 1933, 
	2048, 2085, 2110, 2229, 2344, 2459, 2574, 2689, 
	2804, 2923, 2960, 3079, 3198, 3317, 3436, 3476, 
	3595, 3714, 3833, 3952, 4067, 4186, 4305, 4381, 
	4413, 4473, 4533, 4534, 4589, 4644, 4645, 4760, 
	4762, 4877, 4991, 5105, 5219, 5333, 5448, 5524, 
	5639, 5672, 5787, 5824, 5861, 5976, 6091, 6206, 
	6243, 6358, 6473, 6588, 6703, 6818, 6894, 7009, 
	7042, 7157, 7194, 7231, 7346, 7461, 7498, 7500, 
	7615, 7652, 7767, 7882, 7997, 8112, 8227, 8322, 
	8440, 8479, 8481, 8483, 8485, 8561, 8676, 8709, 
	8824, 8861, 8898, 9013, 9128, 9165, 9284, 9403, 
	9518, 9633, 9666, 9781, 9818, 9855, 9970, 10085, 
	10125, 10165, 10167, 10169, 10171, 10211, 10251, 10366, 
	10403, 10518, 10633, 10748, 10863, 10978, 11097, 11212, 
	11327, 11364, 11479, 11594, 11709, 11746, 11783, 11898, 
	12013, 12053, 12172, 12291, 12406, 12521, 12558, 12673, 
	12713, 12832, 12951, 13066, 13181, 13218, 13333, 13448, 
	13567, 13682, 13801, 13916, 14035, 14154, 14269, 14384, 
	14417, 14532, 14569, 14606, 14721, 14836, 14876, 14916, 
	14955, 14957, 14997, 15037, 15152, 15189, 15304, 15419, 
	15534, 15649, 15764, 15883, 16002, 16121, 16240, 16359, 
	16474, 16589, 16704, 16823, 16942, 16982, 17101, 17216, 
	17331, 17446, 17561, 17676, 17795, 17910, 18029, 18148, 
	18267, 18382, 18501, 18620, 18739, 18858, 18977, 19092, 
	19207, 19322, 19441, 19560, 19675, 19712, 19827, 19867, 
	19907, 20022, 20137, 20174, 20293, 20408, 20523, 20638, 
	20675, 20794, 20909, 20949, 21068, 21093, 21212, 21327, 
	21364, 21479, 21594, 21709, 21824, 21939, 21979, 22019, 
	22134, 22249, 22368, 22483, 22602, 22721, 22840, 22959, 
	23078, 23197, 23312, 23427, 23542, 23661, 23780, 23856, 
	23971, 24004, 24119, 24156, 24193, 24308, 24423, 24460, 
	24579, 24698, 24813, 24815, 24930, 24963, 25078, 25115, 
	25152, 25267, 25382, 25497, 25534, 25649, 25764, 25879, 
	25994, 26109, 26228, 26343, 26380, 26499, 26614, 26651, 
	26766, 26881, 26996, 27033, 27070, 27185, 27300, 27419, 
	27538, 27653, 27768, 27805, 27920, 28039, 28158, 28273, 
	28388, 28425, 28540, 28655, 28774, 28889, 29008, 29127, 
	29246, 29365, 29480, 29595, 29710, 29829, 29948, 30063, 
	30178, 30293, 30408, 30523, 30642, 30757, 30876, 30995, 
	31114, 31229, 31344, 31463, 31582, 31701, 31820, 31939, 
	32054, 32169, 32284, 32403, 32522, 32637, 32674, 32789, 
	32904, 33019, 33056, 33171, 33286, 33401, 33438, 33553, 
	33578, 33693, 33730, 33845, 33960, 34075, 34190, 34305, 
	34420, 34535, 34654, 34769, 34888, 35007, 35126, 35245, 
	35364, 35479, 35594, 35709, 35828, 35947, 35948, 36062, 
	36063, 36064, 36065, 36067, 36104, 36105, 36106, 36107, 
	36108, 36109, 36146, 36147, 36184, 36185, 36210, 36247, 
	36284, 36403, 36522, 36641, 36678, 36715
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 26, 1, 27, 
	1, 27, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 29, 
	1, 30, 1, 1, 31, 33, 32, 34, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	35, 35, 35, 35, 35, 35, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 36, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 35, 35, 35, 35, 7, 37, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 37, 7, 7, 
	7, 7, 7, 7, 7, 38, 18, 7, 
	7, 17, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 7, 7, 7, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	7, 11, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	11, 10, 10, 10, 10, 10, 10, 10, 
	10, 39, 10, 10, 13, 10, 40, 28, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 29, 10, 41, 28, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 41, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 42, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 43, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 44, 1, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 44, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 31, 46, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 46, 32, 32, 32, 32, 32, 
	32, 32, 47, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 48, 32, 48, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 48, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 49, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 50, 32, 33, 31, 51, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 51, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 53, 10, 10, 10, 
	10, 10, 10, 10, 54, 55, 10, 10, 
	56, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	14, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 14, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	59, 10, 10, 15, 10, 60, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 60, 10, 61, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 61, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 62, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 62, 10, 10, 10, 
	10, 10, 10, 10, 54, 63, 10, 10, 
	64, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 58, 10, 
	10, 10, 10, 10, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	10, 10, 10, 57, 10, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 10, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 66, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 17, 7, 
	7, 7, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 7, 7, 7, 7, 
	7, 7, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 7, 7, 
	7, 65, 7, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 7, 53, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 56, 10, 10, 10, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 10, 
	10, 10, 10, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 67, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	62, 10, 10, 10, 10, 10, 10, 10, 
	10, 63, 10, 10, 64, 10, 10, 10, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 10, 10, 10, 10, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 67, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 68, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 68, 24, 24, 24, 24, 
	24, 24, 24, 24, 69, 24, 24, 70, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 71, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 71, 1, 1, 1, 1, 1, 
	1, 1, 26, 1, 1, 1, 15, 1, 
	72, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 72, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 10, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 21, 
	21, 21, 21, 21, 21, 21, 74, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 1, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 24, 24, 
	24, 24, 24, 24, 24, 24, 75, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 1, 76, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 77, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 1, 78, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 78, 1, 1, 1, 1, 
	1, 1, 1, 26, 1, 1, 1, 1, 
	1, 1, 29, 1, 79, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 79, 24, 24, 24, 24, 
	24, 24, 24, 80, 81, 24, 24, 82, 
	24, 24, 24, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 84, 24, 24, 
	24, 24, 24, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 83, 24, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 24, 24, 
	24, 24, 10, 85, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 85, 24, 24, 24, 24, 24, 
	24, 24, 24, 86, 24, 24, 87, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 80, 89, 24, 24, 90, 24, 24, 
	24, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 84, 24, 24, 24, 24, 
	24, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	83, 24, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 24, 24, 24, 24, 
	10, 91, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	91, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 35, 35, 35, 35, 35, 35, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 92, 
	35, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 35, 35, 35, 35, 7, 
	93, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 93, 
	7, 7, 7, 7, 7, 7, 7, 38, 
	18, 7, 7, 17, 7, 7, 7, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 7, 7, 7, 7, 7, 7, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 7, 7, 7, 65, 7, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 7, 79, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 79, 24, 24, 24, 24, 24, 
	24, 24, 24, 81, 24, 24, 82, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	24, 24, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 94, 24, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 24, 24, 24, 
	24, 10, 88, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 88, 24, 24, 24, 24, 24, 24, 
	24, 24, 89, 24, 24, 90, 24, 24, 
	24, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 24, 24, 24, 24, 24, 
	24, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	94, 24, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 24, 24, 24, 24, 
	10, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 1, 1, 1, 1, 1, 
	1, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 1, 1, 1, 
	95, 1, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 1, 96, 96, 96, 
	96, 96, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 96, 1, 97, 1, 
	1, 1, 1, 98, 1, 100, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 101, 
	99, 103, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 104, 102, 102, 100, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 106, 105, 103, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 108, 107, 107, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 109, 109, 
	109, 109, 109, 109, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	109, 109, 109, 111, 109, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 109, 
	112, 1, 110, 113, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 110, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 109, 109, 109, 109, 109, 
	109, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 109, 109, 109, 
	114, 109, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 109, 115, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 1, 1, 1, 
	1, 1, 1, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 1, 
	1, 1, 116, 1, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 1, 117, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 1, 
	1, 1, 1, 1, 1, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 1, 1, 1, 116, 1, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	1, 115, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 117, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 119, 1, 1, 1, 1, 
	1, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 1, 1, 1, 
	118, 1, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 1, 110, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 109, 109, 
	109, 109, 109, 109, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	109, 109, 109, 114, 109, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 109, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 1, 1, 1, 1, 1, 1, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 1, 1, 1, 120, 
	1, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 1, 1, 1, 1, 
	1, 1, 1, 122, 1, 1, 1, 1, 
	1, 1, 1, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 1, 1, 1, 
	1, 1, 1, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 1, 
	1, 1, 123, 1, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 1, 124, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 124, 1, 
	1, 1, 1, 1, 1, 1, 125, 1, 
	127, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 127, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	132, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 133, 1, 134, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 134, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 126, 126, 
	126, 126, 126, 126, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	126, 126, 126, 128, 126, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 126, 
	135, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 135, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	136, 126, 126, 135, 126, 126, 126, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 126, 126, 126, 126, 126, 126, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 126, 126, 126, 128, 126, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 126, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 137, 10, 10, 10, 10, 10, 
	10, 10, 138, 139, 10, 10, 140, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 132, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 132, 10, 10, 
	10, 10, 10, 10, 10, 10, 143, 10, 
	10, 133, 10, 144, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 144, 10, 10, 10, 10, 10, 
	10, 10, 138, 145, 10, 10, 146, 10, 
	10, 10, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 142, 10, 10, 10, 
	10, 10, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 10, 10, 
	10, 141, 10, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 10, 127, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 126, 
	126, 126, 126, 126, 126, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 126, 126, 126, 147, 126, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	126, 148, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	148, 126, 126, 126, 126, 126, 126, 126, 
	126, 136, 126, 126, 135, 126, 126, 126, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 126, 126, 126, 126, 126, 126, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 126, 126, 126, 147, 
	126, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 126, 137, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 137, 10, 10, 10, 10, 
	10, 10, 10, 10, 139, 10, 10, 140, 
	10, 10, 10, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 10, 10, 10, 
	10, 10, 10, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 10, 
	10, 10, 149, 10, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 10, 144, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 144, 10, 
	10, 10, 10, 10, 10, 10, 10, 145, 
	10, 10, 146, 10, 10, 10, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	10, 10, 10, 10, 10, 10, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 10, 10, 10, 149, 10, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 10, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 1, 1, 1, 1, 
	1, 1, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 1, 1, 
	1, 150, 1, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 1, 151, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 151, 1, 1, 
	1, 1, 1, 1, 1, 152, 1, 1, 
	1, 1, 1, 1, 1, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 1, 
	1, 1, 1, 1, 1, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 1, 1, 1, 153, 1, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	1, 154, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	154, 1, 1, 1, 1, 1, 1, 1, 
	155, 1, 157, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 162, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 163, 1, 164, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 164, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	156, 156, 156, 156, 156, 156, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 156, 156, 156, 158, 156, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 156, 165, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 165, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	156, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 156, 156, 156, 
	158, 156, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 156, 159, 167, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 159, 10, 10, 10, 
	10, 10, 10, 10, 10, 160, 10, 10, 
	161, 10, 167, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 168, 10, 10, 10, 10, 
	10, 10, 10, 169, 170, 10, 10, 171, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 162, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 162, 10, 
	10, 10, 10, 10, 10, 10, 10, 174, 
	10, 10, 163, 10, 175, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 175, 10, 10, 10, 10, 
	10, 10, 10, 169, 176, 10, 10, 177, 
	10, 10, 10, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 173, 10, 10, 
	10, 10, 10, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 10, 
	10, 10, 172, 10, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 10, 157, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	156, 156, 156, 156, 156, 156, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 156, 156, 156, 178, 156, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 156, 179, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 179, 156, 156, 156, 156, 156, 156, 
	156, 156, 166, 156, 156, 165, 156, 156, 
	156, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 156, 156, 156, 156, 156, 
	156, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 156, 156, 156, 
	178, 156, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 156, 168, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 168, 10, 10, 10, 
	10, 10, 10, 10, 10, 170, 10, 10, 
	171, 10, 10, 10, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 10, 10, 
	10, 10, 10, 10, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	10, 10, 10, 180, 10, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 10, 
	175, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 175, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	176, 10, 10, 177, 10, 10, 10, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 10, 10, 10, 10, 10, 10, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 10, 10, 10, 180, 10, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 10, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 1, 
	184, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 185, 1, 186, 
	1, 1, 187, 189, 188, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 1, 
	1, 1, 1, 1, 1, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 1, 1, 1, 190, 1, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	1, 191, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	191, 1, 1, 1, 1, 1, 1, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 1, 1, 1, 1, 1, 1, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 1, 1, 1, 193, 
	1, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 1, 194, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 194, 1, 1, 1, 1, 
	1, 1, 1, 195, 1, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 197, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 199, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 202, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 202, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	203, 1, 204, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 204, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 205, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 205, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 207, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	200, 10, 10, 201, 10, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 213, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 215, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 215, 1, 1, 
	1, 1, 1, 1, 1, 216, 1, 1, 
	1, 1, 1, 1, 1, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 1, 
	1, 1, 1, 1, 1, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 1, 1, 1, 217, 1, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	1, 218, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	218, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 226, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 226, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 227, 1, 228, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 228, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 220, 220, 220, 222, 220, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 220, 229, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 229, 220, 220, 220, 220, 220, 220, 
	220, 220, 230, 220, 220, 229, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 231, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 231, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 10, 233, 10, 234, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 236, 1, 237, 1, 1, 
	238, 240, 239, 241, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 241, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 233, 10, 242, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 242, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 236, 1, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 243, 10, 10, 10, 10, 10, 
	10, 10, 244, 245, 10, 10, 246, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 226, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 226, 10, 10, 
	10, 10, 10, 10, 10, 10, 249, 10, 
	10, 227, 10, 250, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 250, 10, 10, 10, 10, 10, 
	10, 10, 244, 251, 10, 10, 252, 10, 
	10, 10, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 248, 10, 10, 10, 
	10, 10, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 10, 10, 
	10, 247, 10, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 10, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 220, 
	220, 220, 220, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 253, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 254, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	254, 220, 220, 220, 220, 220, 220, 220, 
	220, 230, 220, 220, 229, 220, 220, 220, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 220, 220, 220, 220, 220, 220, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 220, 220, 220, 253, 
	220, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 220, 243, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 243, 10, 10, 10, 10, 
	10, 10, 10, 10, 245, 10, 10, 246, 
	10, 10, 10, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 10, 10, 10, 
	10, 10, 10, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 10, 
	10, 10, 255, 10, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 10, 250, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 250, 10, 
	10, 10, 10, 10, 10, 10, 10, 251, 
	10, 10, 252, 10, 10, 10, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	10, 10, 10, 10, 10, 10, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 10, 10, 10, 255, 10, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 10, 256, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 256, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 257, 257, 257, 257, 257, 
	257, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	258, 257, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 257, 257, 257, 257, 
	196, 259, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	259, 196, 196, 196, 196, 196, 196, 196, 
	196, 206, 196, 196, 205, 196, 196, 196, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 196, 196, 196, 196, 196, 196, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 196, 196, 196, 260, 
	196, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 196, 261, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 261, 10, 10, 10, 10, 
	10, 10, 10, 262, 263, 10, 10, 264, 
	10, 10, 10, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 10, 10, 
	10, 10, 10, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 10, 
	10, 10, 265, 10, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 10, 267, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	1, 1, 1, 1, 1, 1, 219, 1, 
	1, 1, 203, 1, 268, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 268, 220, 220, 220, 220, 
	220, 220, 220, 220, 269, 220, 220, 270, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 220, 220, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 220, 
	220, 220, 222, 220, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 220, 271, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 271, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 272, 220, 220, 220, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	220, 220, 220, 220, 220, 220, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 220, 220, 220, 253, 220, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 220, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 275, 273, 273, 276, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 278, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 278, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 281, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 281, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 282, 1, 283, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 283, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	273, 273, 273, 273, 273, 273, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 273, 273, 273, 277, 273, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 274, 273, 273, 273, 273, 273, 273, 
	273, 273, 284, 273, 273, 274, 273, 273, 
	273, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 273, 273, 273, 273, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	277, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 285, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 285, 10, 10, 10, 
	10, 10, 10, 10, 10, 279, 10, 10, 
	280, 10, 10, 233, 10, 286, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 286, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	287, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 289, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 289, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 273, 292, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 292, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 273, 273, 273, 273, 
	273, 273, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 273, 273, 
	273, 293, 273, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 273, 294, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 294, 10, 10, 
	10, 10, 10, 10, 10, 295, 296, 10, 
	10, 297, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 299, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 300, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	219, 1, 1, 1, 282, 1, 268, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 268, 220, 220, 
	220, 220, 220, 220, 220, 220, 301, 220, 
	220, 302, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 303, 232, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	303, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 10, 233, 
	10, 304, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	304, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 305, 209, 209, 288, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 1, 
	306, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 306, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 307, 307, 307, 307, 307, 307, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 308, 307, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 307, 307, 307, 307, 220, 309, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 309, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	220, 220, 220, 220, 220, 220, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 220, 220, 220, 310, 220, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 312, 245, 10, 10, 246, 10, 10, 
	10, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 248, 10, 10, 10, 10, 
	10, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 10, 10, 10, 
	313, 10, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 10, 314, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 314, 1, 1, 1, 
	1, 1, 1, 1, 219, 1, 1, 1, 
	227, 1, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 315, 220, 220, 228, 220, 220, 
	220, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 220, 220, 220, 220, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	222, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 312, 251, 10, 10, 
	252, 10, 10, 10, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 248, 10, 
	10, 10, 10, 10, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	10, 10, 10, 313, 10, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 10, 
	317, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 317, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	318, 212, 212, 319, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 320, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 227, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 214, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 321, 232, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 321, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	322, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 323, 235, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	323, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 236, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 1, 1, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 1, 1, 1, 214, 
	1, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 211, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 324, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 1, 325, 1, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 325, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 238, 327, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 327, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 239, 239, 239, 239, 239, 
	239, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 239, 239, 239, 
	328, 239, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 239, 329, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 329, 239, 239, 239, 
	239, 239, 239, 239, 330, 239, 239, 239, 
	239, 239, 239, 239, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 239, 239, 
	239, 239, 239, 239, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	239, 239, 239, 331, 239, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 239, 
	332, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 332, 
	239, 239, 239, 239, 239, 239, 239, 333, 
	239, 335, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 338, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 338, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 341, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	341, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 342, 239, 343, 336, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 343, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 334, 
	334, 334, 334, 334, 334, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 334, 334, 334, 337, 334, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	334, 344, 336, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	344, 334, 334, 334, 334, 334, 334, 334, 
	334, 345, 334, 334, 344, 334, 334, 334, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 334, 334, 334, 334, 334, 334, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 334, 334, 334, 337, 
	334, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 334, 346, 347, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 346, 239, 239, 239, 239, 
	239, 239, 239, 239, 339, 239, 239, 340, 
	239, 239, 348, 239, 349, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 349, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 342, 
	239, 239, 350, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 351, 239, 240, 238, 352, 347, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 352, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 348, 239, 353, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 353, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 350, 239, 354, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 354, 239, 239, 239, 
	239, 239, 239, 239, 355, 356, 239, 239, 
	357, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	341, 240, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 341, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	360, 239, 239, 342, 239, 361, 240, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 361, 239, 239, 239, 
	239, 239, 239, 239, 355, 362, 239, 239, 
	363, 239, 239, 239, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 359, 239, 
	239, 239, 239, 239, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	239, 239, 239, 358, 239, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 239, 
	335, 336, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 335, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 334, 334, 334, 334, 334, 334, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 334, 334, 334, 364, 334, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 334, 365, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 365, 334, 334, 334, 334, 334, 
	334, 334, 334, 345, 334, 334, 344, 334, 
	334, 334, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 334, 334, 334, 334, 
	334, 334, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 334, 334, 
	334, 364, 334, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 334, 354, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 354, 239, 239, 
	239, 239, 239, 239, 239, 239, 356, 239, 
	239, 357, 239, 239, 239, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 239, 
	239, 239, 239, 239, 239, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 239, 239, 239, 366, 239, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	239, 361, 240, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	361, 239, 239, 239, 239, 239, 239, 239, 
	239, 362, 239, 239, 363, 239, 239, 239, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 239, 239, 239, 239, 239, 239, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 239, 239, 239, 366, 
	239, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 239, 367, 240, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 367, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 239, 369, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 369, 212, 212, 212, 212, 212, 
	212, 212, 370, 371, 212, 212, 372, 212, 
	212, 212, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 374, 212, 212, 212, 
	212, 212, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 373, 212, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 212, 212, 212, 
	212, 10, 375, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 375, 212, 212, 212, 212, 212, 212, 
	212, 212, 376, 212, 212, 377, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	10, 378, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	378, 212, 212, 212, 212, 212, 212, 212, 
	370, 379, 212, 212, 380, 212, 212, 212, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 374, 212, 212, 212, 212, 212, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 373, 
	212, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 212, 212, 212, 212, 10, 
	381, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 381, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 307, 307, 307, 307, 307, 307, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 382, 307, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 307, 307, 307, 307, 220, 383, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 383, 220, 
	220, 220, 220, 220, 220, 220, 220, 230, 
	220, 220, 229, 220, 220, 220, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	220, 220, 220, 220, 220, 220, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 220, 220, 220, 384, 220, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	384, 220, 311, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 311, 10, 10, 10, 10, 10, 10, 
	10, 216, 245, 10, 10, 246, 10, 10, 
	10, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 10, 10, 10, 10, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	385, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 316, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 316, 10, 10, 10, 
	10, 10, 10, 10, 216, 251, 10, 10, 
	252, 10, 10, 10, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 10, 10, 
	10, 10, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 385, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	369, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 369, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	371, 212, 212, 372, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 212, 212, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 386, 212, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 212, 212, 212, 212, 10, 378, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 378, 212, 
	212, 212, 212, 212, 212, 212, 212, 379, 
	212, 212, 380, 212, 212, 212, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	212, 212, 212, 212, 212, 212, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 386, 212, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 212, 212, 212, 212, 10, 387, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 387, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 233, 10, 388, 235, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 388, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 288, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 389, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 389, 10, 10, 10, 
	10, 10, 10, 10, 295, 390, 10, 10, 
	391, 10, 10, 10, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 299, 10, 
	10, 10, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 298, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	392, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 392, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 273, 273, 273, 273, 273, 273, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 273, 273, 273, 393, 273, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 273, 394, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 394, 273, 273, 273, 273, 273, 
	273, 273, 273, 284, 273, 273, 274, 273, 
	273, 273, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 273, 273, 273, 273, 
	273, 273, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 273, 273, 
	273, 393, 273, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 273, 395, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 395, 10, 10, 
	10, 10, 10, 10, 10, 10, 296, 10, 
	10, 297, 10, 10, 10, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 10, 
	10, 10, 10, 10, 10, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 10, 10, 10, 396, 10, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	10, 397, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 390, 10, 10, 391, 10, 10, 10, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 10, 10, 10, 10, 10, 10, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 10, 10, 10, 396, 
	10, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 10, 398, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 398, 212, 212, 212, 212, 
	212, 212, 212, 212, 399, 212, 212, 400, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 401, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 401, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 402, 232, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 402, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 322, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 10, 403, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 403, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 288, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 209, 209, 
	209, 209, 209, 209, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 404, 209, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 209, 
	209, 209, 209, 1, 405, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 405, 212, 212, 212, 212, 
	212, 212, 212, 406, 212, 212, 212, 212, 
	212, 212, 212, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 212, 212, 212, 
	212, 212, 212, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 407, 212, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 212, 212, 
	212, 212, 1, 408, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 408, 1, 1, 1, 1, 1, 
	1, 1, 219, 1, 1, 1, 1, 1, 
	1, 1, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 1, 1, 1, 1, 
	1, 1, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 1, 1, 
	1, 214, 1, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 1, 381, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 381, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 307, 
	307, 307, 307, 307, 307, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 308, 307, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	307, 307, 307, 307, 220, 409, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 409, 212, 212, 212, 
	212, 212, 212, 212, 410, 411, 212, 212, 
	412, 212, 212, 212, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 414, 212, 
	212, 212, 212, 212, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 413, 212, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 212, 
	212, 212, 212, 10, 415, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 415, 212, 212, 212, 212, 
	212, 212, 212, 212, 416, 212, 212, 417, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 10, 418, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 418, 212, 212, 212, 212, 212, 
	212, 212, 410, 419, 212, 212, 420, 212, 
	212, 212, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 414, 212, 212, 212, 
	212, 212, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 413, 212, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 212, 212, 212, 
	212, 10, 421, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 421, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 290, 290, 290, 290, 290, 
	290, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	422, 290, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 290, 290, 290, 290, 
	273, 423, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	423, 273, 273, 273, 273, 273, 273, 273, 
	273, 284, 273, 273, 274, 273, 273, 273, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 273, 273, 273, 273, 273, 273, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 273, 273, 273, 424, 
	273, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 273, 294, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 294, 10, 10, 10, 10, 
	10, 10, 10, 216, 296, 10, 10, 297, 
	10, 10, 10, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 10, 10, 10, 
	10, 10, 10, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 10, 
	10, 10, 425, 10, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 10, 389, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 389, 10, 
	10, 10, 10, 10, 10, 10, 216, 390, 
	10, 10, 391, 10, 10, 10, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	10, 10, 10, 10, 10, 10, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 10, 10, 10, 425, 10, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 10, 409, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 409, 212, 212, 212, 212, 212, 212, 
	212, 212, 411, 212, 212, 412, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 212, 
	212, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	426, 212, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 212, 212, 212, 212, 
	10, 418, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	418, 212, 212, 212, 212, 212, 212, 212, 
	212, 419, 212, 212, 420, 212, 212, 212, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 212, 212, 212, 212, 212, 212, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 426, 
	212, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 212, 212, 212, 212, 10, 
	395, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 395, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	296, 10, 10, 297, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 281, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 281, 10, 10, 10, 10, 10, 
	10, 10, 10, 429, 10, 10, 282, 10, 
	397, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 397, 
	10, 10, 10, 10, 10, 10, 10, 427, 
	390, 10, 10, 391, 10, 10, 10, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 299, 10, 10, 10, 10, 10, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 10, 10, 10, 428, 10, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 10, 430, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 430, 10, 10, 10, 10, 10, 
	10, 10, 10, 279, 10, 10, 280, 10, 
	10, 233, 10, 431, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 431, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 433, 220, 220, 272, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 432, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 432, 220, 220, 
	220, 220, 220, 220, 220, 220, 230, 220, 
	220, 272, 220, 220, 220, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 220, 
	220, 220, 220, 220, 220, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 220, 220, 220, 222, 220, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	220, 434, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	434, 10, 10, 10, 10, 10, 10, 10, 
	10, 224, 10, 10, 225, 10, 435, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 435, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 305, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 436, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 436, 196, 196, 196, 
	196, 196, 196, 196, 196, 437, 196, 196, 
	438, 196, 196, 196, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 196, 196, 
	196, 196, 196, 196, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	196, 196, 196, 198, 196, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 196, 
	436, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 436, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	206, 196, 196, 439, 196, 196, 196, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 196, 196, 196, 196, 196, 196, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 196, 196, 196, 198, 196, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 196, 274, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 274, 273, 273, 273, 273, 273, 
	273, 273, 273, 440, 273, 273, 441, 273, 
	273, 273, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 273, 273, 273, 273, 
	273, 273, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 273, 273, 
	273, 277, 273, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 273, 442, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 442, 10, 10, 
	10, 10, 10, 10, 10, 10, 279, 10, 
	10, 280, 10, 443, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 443, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 287, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 1, 436, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 436, 196, 196, 196, 196, 196, 196, 
	196, 196, 444, 196, 196, 439, 196, 196, 
	196, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 196, 196, 196, 196, 196, 
	196, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 196, 196, 196, 
	198, 196, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 196, 445, 232, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 445, 10, 10, 10, 
	10, 10, 10, 10, 10, 200, 10, 10, 
	201, 10, 10, 233, 10, 446, 235, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 446, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	210, 209, 209, 288, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 447, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 447, 10, 448, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 448, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 449, 10, 10, 10, 10, 
	10, 10, 10, 450, 263, 10, 10, 264, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 202, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 202, 10, 
	10, 10, 10, 10, 10, 10, 10, 452, 
	10, 10, 203, 10, 453, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 453, 10, 10, 10, 10, 
	10, 10, 10, 450, 454, 10, 10, 455, 
	10, 10, 10, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 266, 10, 10, 
	10, 10, 10, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 10, 
	10, 10, 451, 10, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 10, 197, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 197, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	196, 196, 196, 196, 196, 196, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 196, 196, 196, 456, 196, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 196, 457, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 457, 196, 196, 196, 196, 196, 196, 
	196, 196, 206, 196, 196, 205, 196, 196, 
	196, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 196, 196, 196, 196, 196, 
	196, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 196, 196, 196, 
	456, 196, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 196, 449, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 449, 10, 10, 10, 
	10, 10, 10, 10, 10, 263, 10, 10, 
	264, 10, 10, 10, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 10, 10, 
	10, 10, 10, 10, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	10, 10, 10, 458, 10, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 10, 
	453, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 453, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	454, 10, 10, 455, 10, 10, 10, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 10, 10, 10, 10, 10, 10, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 10, 10, 10, 458, 10, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 10, 459, 232, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 459, 10, 10, 10, 10, 10, 
	10, 10, 10, 200, 10, 10, 201, 10, 
	10, 233, 10, 460, 235, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 460, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 203, 1, 
	1, 236, 1, 432, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 432, 220, 220, 220, 220, 220, 
	220, 220, 220, 461, 220, 220, 462, 220, 
	220, 220, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 220, 220, 220, 220, 
	220, 220, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 220, 220, 
	220, 222, 220, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 220, 463, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 463, 10, 10, 
	10, 10, 10, 10, 10, 262, 454, 10, 
	10, 455, 10, 10, 10, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	10, 10, 10, 10, 10, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 10, 10, 10, 265, 10, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	10, 464, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	464, 212, 212, 212, 212, 212, 212, 212, 
	212, 465, 212, 212, 466, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 10, 
	467, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 467, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 203, 1, 1, 1, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 1, 1, 1, 1, 1, 1, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 1, 1, 1, 214, 1, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 1, 468, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 468, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 10, 469, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 469, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 209, 209, 209, 209, 209, 
	209, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	404, 209, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 209, 209, 209, 209, 
	1, 470, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	470, 212, 212, 212, 212, 212, 212, 212, 
	471, 472, 212, 212, 473, 212, 212, 212, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 475, 212, 212, 212, 212, 212, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 474, 
	212, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 212, 212, 212, 212, 10, 
	476, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 476, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	477, 212, 212, 478, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 10, 479, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 479, 212, 
	212, 212, 212, 212, 212, 212, 471, 480, 
	212, 212, 481, 212, 212, 212, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	475, 212, 212, 212, 212, 212, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 474, 212, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 212, 212, 212, 212, 10, 482, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 482, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 257, 
	257, 257, 257, 257, 257, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 483, 257, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 483, 483, 
	257, 257, 257, 257, 196, 484, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 484, 196, 196, 196, 
	196, 196, 196, 196, 196, 206, 196, 196, 
	205, 196, 196, 196, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 196, 196, 
	196, 196, 196, 196, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	196, 196, 196, 485, 196, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 196, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 216, 
	263, 10, 10, 264, 10, 10, 10, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 10, 10, 10, 10, 10, 10, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 10, 10, 10, 486, 10, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 10, 463, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 463, 10, 10, 10, 10, 10, 
	10, 10, 216, 454, 10, 10, 455, 10, 
	10, 10, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 10, 10, 10, 10, 
	10, 10, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 10, 10, 
	10, 486, 10, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 10, 470, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 470, 212, 212, 
	212, 212, 212, 212, 212, 212, 472, 212, 
	212, 473, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 212, 212, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 487, 212, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	212, 212, 212, 212, 10, 479, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 479, 212, 212, 212, 
	212, 212, 212, 212, 212, 480, 212, 212, 
	481, 212, 212, 212, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 212, 212, 
	212, 212, 212, 212, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 487, 212, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 212, 
	212, 212, 212, 10, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 1, 1, 
	1, 1, 1, 1, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	1, 1, 1, 488, 1, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 1, 
	489, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 489, 
	1, 1, 1, 1, 1, 1, 1, 490, 
	1, 1, 1, 1, 1, 1, 1, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 1, 1, 1, 1, 1, 1, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 1, 1, 1, 491, 1, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 1, 492, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 492, 1, 1, 1, 1, 1, 
	1, 1, 493, 1, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 495, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 500, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 500, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 501, 
	1, 502, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	502, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 494, 494, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 494, 494, 494, 496, 
	494, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 494, 503, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 503, 494, 494, 494, 494, 
	494, 494, 494, 494, 504, 494, 494, 503, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 494, 494, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 494, 
	494, 494, 496, 494, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 494, 505, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 498, 
	10, 10, 499, 10, 506, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 506, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 508, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 509, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 509, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 1, 511, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 511, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 514, 1, 515, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 515, 1, 
	1, 1, 1, 1, 1, 1, 516, 1, 
	1, 1, 1, 1, 1, 1, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	1, 1, 1, 1, 1, 1, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 1, 1, 1, 517, 1, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 1, 518, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 518, 1, 1, 1, 1, 1, 1, 
	1, 519, 1, 521, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 521, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 523, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 523, 10, 10, 
	10, 10, 10, 10, 10, 10, 524, 10, 
	10, 525, 10, 526, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 526, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 527, 1, 
	528, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 528, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 529, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 529, 520, 520, 520, 520, 520, 
	520, 520, 520, 530, 520, 520, 529, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 531, 10, 10, 
	10, 10, 10, 10, 10, 532, 533, 10, 
	10, 534, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 526, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	526, 10, 10, 10, 10, 10, 10, 10, 
	10, 537, 10, 10, 527, 10, 538, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 538, 10, 10, 
	10, 10, 10, 10, 10, 532, 539, 10, 
	10, 540, 10, 10, 10, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 536, 
	10, 10, 10, 10, 10, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 10, 10, 10, 535, 10, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	10, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 520, 520, 520, 520, 520, 520, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 520, 520, 520, 541, 
	520, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 520, 542, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 542, 520, 520, 520, 520, 
	520, 520, 520, 520, 530, 520, 520, 529, 
	520, 520, 520, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 520, 520, 520, 
	520, 520, 520, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 520, 
	520, 520, 541, 520, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 520, 531, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 531, 10, 
	10, 10, 10, 10, 10, 10, 10, 533, 
	10, 10, 534, 10, 10, 10, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	10, 10, 10, 10, 10, 10, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 10, 10, 10, 543, 10, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 10, 538, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 538, 10, 10, 10, 10, 10, 10, 
	10, 10, 539, 10, 10, 540, 10, 10, 
	10, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 10, 10, 10, 10, 10, 
	10, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 10, 10, 10, 
	543, 10, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 10, 544, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 544, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 545, 545, 
	545, 545, 545, 545, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 546, 545, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 545, 
	545, 545, 545, 494, 547, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 547, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 494, 494, 494, 
	494, 494, 494, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 494, 
	494, 494, 549, 494, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 494, 497, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 497, 10, 
	10, 10, 10, 10, 10, 10, 10, 550, 
	10, 10, 499, 10, 551, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 551, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 552, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 552, 10, 10, 10, 10, 10, 
	10, 10, 553, 554, 10, 10, 555, 10, 
	10, 10, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 557, 10, 10, 10, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 10, 10, 
	10, 556, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 10, 558, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 558, 1, 1, 
	1, 1, 1, 1, 1, 519, 1, 1, 
	1, 501, 1, 559, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 559, 520, 520, 520, 520, 520, 
	520, 520, 520, 560, 520, 520, 561, 520, 
	520, 520, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 520, 520, 520, 520, 
	520, 520, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 520, 520, 
	520, 522, 520, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 520, 562, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 562, 520, 520, 
	520, 520, 520, 520, 520, 520, 530, 520, 
	520, 563, 520, 520, 520, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 520, 
	520, 520, 520, 520, 520, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 520, 520, 520, 541, 520, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	541, 541, 541, 541, 541, 541, 541, 541, 
	520, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 566, 564, 564, 567, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 569, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 569, 10, 10, 10, 10, 
	10, 10, 10, 10, 570, 10, 10, 571, 
	10, 572, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	572, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 573, 1, 574, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 574, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 565, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	565, 564, 564, 564, 564, 564, 564, 564, 
	564, 575, 564, 564, 565, 564, 564, 564, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 564, 564, 564, 564, 564, 564, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 564, 564, 564, 568, 
	564, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 564, 576, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 577, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 1, 578, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 578, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 579, 579, 579, 579, 
	579, 579, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 580, 579, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 579, 579, 579, 
	579, 564, 581, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 581, 564, 564, 564, 564, 564, 564, 
	564, 582, 575, 564, 564, 565, 564, 564, 
	564, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 564, 564, 564, 564, 564, 
	564, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 564, 564, 564, 
	583, 564, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 564, 584, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 584, 10, 10, 10, 
	10, 10, 10, 10, 585, 586, 10, 10, 
	587, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 10, 
	10, 10, 10, 10, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	10, 10, 10, 588, 10, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 10, 
	590, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 590, 
	1, 1, 1, 1, 1, 1, 1, 519, 
	1, 1, 1, 573, 1, 559, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 559, 520, 520, 520, 
	520, 520, 520, 520, 520, 591, 520, 520, 
	592, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	593, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 593, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 594, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 1, 595, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 595, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 597, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 520, 598, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 598, 520, 520, 
	520, 520, 520, 520, 520, 599, 530, 520, 
	520, 529, 520, 520, 520, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 520, 
	520, 520, 520, 520, 520, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 520, 520, 520, 600, 520, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	520, 601, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	602, 533, 10, 10, 534, 10, 10, 10, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 536, 10, 10, 10, 10, 10, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 10, 10, 10, 603, 
	10, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 10, 604, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 604, 1, 1, 1, 1, 
	1, 1, 1, 519, 1, 1, 1, 527, 
	1, 521, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	521, 520, 520, 520, 520, 520, 520, 520, 
	520, 605, 520, 520, 528, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 606, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 602, 539, 10, 10, 540, 
	10, 10, 10, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 536, 10, 10, 
	10, 10, 10, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 10, 
	10, 10, 603, 10, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 10, 607, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 607, 510, 
	510, 510, 510, 510, 510, 510, 510, 608, 
	510, 510, 609, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 610, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 610, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 527, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 611, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	611, 510, 510, 510, 510, 510, 510, 510, 
	612, 613, 510, 510, 614, 510, 510, 510, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 616, 510, 510, 510, 510, 510, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 615, 
	510, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 510, 510, 510, 510, 10, 
	617, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 617, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	618, 510, 510, 619, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 10, 620, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 620, 510, 
	510, 510, 510, 510, 510, 510, 612, 621, 
	510, 510, 622, 510, 510, 510, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	616, 510, 510, 510, 510, 510, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 615, 510, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 510, 510, 510, 510, 10, 623, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 623, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 596, 
	596, 596, 596, 596, 596, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 624, 596, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	596, 596, 596, 596, 520, 625, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 625, 520, 520, 520, 
	520, 520, 520, 520, 599, 530, 520, 520, 
	529, 520, 520, 520, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 520, 520, 
	520, 520, 520, 520, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	520, 520, 520, 626, 520, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 626, 
	626, 626, 626, 626, 626, 626, 626, 520, 
	601, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 601, 
	10, 10, 10, 10, 10, 10, 10, 516, 
	533, 10, 10, 534, 10, 10, 10, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 10, 10, 10, 10, 10, 10, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 10, 10, 10, 627, 10, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 10, 606, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 606, 10, 10, 10, 10, 10, 
	10, 10, 516, 539, 10, 10, 540, 10, 
	10, 10, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 10, 10, 10, 10, 
	10, 10, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 10, 10, 
	10, 627, 10, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 10, 611, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 611, 510, 510, 
	510, 510, 510, 510, 510, 510, 613, 510, 
	510, 614, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 510, 510, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 628, 510, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	510, 510, 510, 510, 10, 620, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 620, 510, 510, 510, 
	510, 510, 510, 510, 510, 621, 510, 510, 
	622, 510, 510, 510, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 510, 510, 
	510, 510, 510, 510, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 628, 510, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 510, 
	510, 510, 510, 10, 629, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 629, 10, 10, 10, 10, 
	10, 10, 10, 585, 630, 10, 10, 631, 
	10, 10, 10, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 10, 10, 
	10, 10, 10, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 10, 
	10, 10, 588, 10, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 10, 632, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 632, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	564, 564, 564, 564, 564, 564, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 564, 564, 564, 633, 564, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 564, 634, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 634, 564, 564, 564, 564, 564, 564, 
	564, 564, 575, 564, 564, 565, 564, 564, 
	564, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 564, 564, 564, 564, 564, 
	564, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 564, 564, 564, 
	633, 564, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 564, 635, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 635, 10, 10, 10, 
	10, 10, 10, 10, 10, 586, 10, 10, 
	587, 10, 10, 10, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 10, 10, 
	10, 10, 10, 10, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	10, 10, 10, 636, 10, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 10, 
	637, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 637, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	630, 10, 10, 631, 10, 10, 10, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 10, 10, 10, 10, 10, 10, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 10, 10, 10, 636, 10, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 10, 638, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 638, 510, 510, 510, 510, 510, 
	510, 510, 510, 639, 510, 510, 640, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 641, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 641, 1, 1, 1, 1, 1, 1, 
	1, 512, 1, 1, 1, 573, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 642, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 642, 507, 507, 507, 
	507, 507, 507, 507, 643, 507, 507, 507, 
	507, 507, 507, 507, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 507, 507, 
	507, 507, 507, 507, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 644, 507, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 507, 
	507, 507, 507, 1, 509, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 645, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 1, 646, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 646, 510, 510, 510, 510, 510, 
	510, 510, 647, 510, 510, 510, 510, 510, 
	510, 510, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 510, 510, 510, 510, 
	510, 510, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 648, 510, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 648, 648, 648, 
	648, 648, 648, 648, 648, 510, 510, 510, 
	510, 1, 649, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 649, 1, 1, 1, 1, 1, 1, 
	1, 650, 1, 1, 1, 1, 1, 1, 
	1, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 1, 1, 1, 1, 1, 
	1, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 1, 1, 1, 
	513, 1, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 1, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 521, 520, 520, 520, 
	520, 520, 520, 520, 520, 651, 520, 520, 
	520, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	623, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 623, 
	596, 596, 596, 596, 596, 596, 596, 596, 
	596, 596, 596, 596, 596, 596, 596, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 596, 596, 596, 596, 596, 596, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 597, 596, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 596, 596, 596, 596, 520, 652, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 652, 510, 
	510, 510, 510, 510, 510, 510, 653, 654, 
	510, 510, 655, 510, 510, 510, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	657, 510, 510, 510, 510, 510, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 656, 510, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 510, 510, 510, 510, 10, 658, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 658, 510, 510, 
	510, 510, 510, 510, 510, 510, 659, 510, 
	510, 660, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 10, 661, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 661, 510, 510, 510, 
	510, 510, 510, 510, 653, 662, 510, 510, 
	663, 510, 510, 510, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 657, 510, 
	510, 510, 510, 510, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 656, 510, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 510, 
	510, 510, 510, 10, 664, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 664, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 579, 579, 579, 
	579, 579, 579, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 665, 579, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 579, 579, 
	579, 579, 564, 666, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 666, 564, 564, 564, 564, 564, 
	564, 564, 582, 575, 564, 564, 565, 564, 
	564, 564, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 564, 564, 564, 564, 
	564, 564, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 564, 564, 
	564, 667, 564, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 564, 584, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 584, 10, 10, 
	10, 10, 10, 10, 10, 516, 586, 10, 
	10, 587, 10, 10, 10, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 10, 
	10, 10, 10, 10, 10, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 10, 10, 10, 668, 10, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	10, 629, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	629, 10, 10, 10, 10, 10, 10, 10, 
	516, 630, 10, 10, 631, 10, 10, 10, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 10, 10, 10, 10, 10, 10, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 10, 10, 10, 668, 
	10, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 10, 652, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 652, 510, 510, 510, 510, 
	510, 510, 510, 510, 654, 510, 510, 655, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 510, 510, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 669, 510, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 510, 510, 
	510, 510, 10, 661, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 661, 510, 510, 510, 510, 510, 
	510, 510, 510, 662, 510, 510, 663, 510, 
	510, 510, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 510, 510, 510, 510, 
	510, 510, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 669, 510, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 669, 669, 669, 
	669, 669, 669, 669, 669, 510, 510, 510, 
	510, 10, 635, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 635, 10, 10, 10, 10, 10, 10, 
	10, 670, 586, 10, 10, 587, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 572, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 572, 10, 10, 10, 
	10, 10, 10, 10, 10, 672, 10, 10, 
	573, 10, 637, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 637, 10, 10, 10, 10, 10, 10, 
	10, 670, 630, 10, 10, 631, 10, 10, 
	10, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 589, 10, 10, 10, 10, 
	10, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 10, 10, 10, 
	671, 10, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 10, 673, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 673, 520, 520, 520, 
	520, 520, 520, 520, 520, 674, 520, 520, 
	563, 520, 520, 520, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 520, 520, 
	520, 520, 520, 520, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	520, 520, 520, 522, 520, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 673, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	530, 520, 520, 563, 520, 520, 520, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 520, 520, 520, 520, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 522, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 675, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 675, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	676, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 676, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	677, 494, 494, 678, 494, 494, 494, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 494, 494, 494, 494, 494, 494, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 494, 494, 494, 496, 494, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 494, 676, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 676, 494, 494, 494, 494, 494, 
	494, 494, 494, 504, 494, 494, 679, 494, 
	494, 494, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 494, 494, 494, 494, 
	494, 494, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 494, 494, 
	494, 496, 494, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 494, 565, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 564, 564, 
	564, 564, 564, 564, 564, 564, 680, 564, 
	564, 681, 564, 564, 564, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 564, 
	564, 564, 564, 564, 564, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 564, 564, 564, 568, 564, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	564, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	682, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 676, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 676, 494, 494, 
	494, 494, 494, 494, 494, 494, 683, 494, 
	494, 679, 494, 494, 494, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 494, 
	494, 494, 494, 494, 494, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 494, 494, 494, 496, 494, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	494, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 685, 10, 10, 10, 10, 10, 10, 
	10, 686, 554, 10, 10, 555, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 500, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 500, 10, 10, 10, 
	10, 10, 10, 10, 10, 688, 10, 10, 
	501, 10, 689, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 689, 10, 10, 10, 10, 10, 10, 
	10, 686, 690, 10, 10, 691, 10, 10, 
	10, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 557, 10, 10, 10, 10, 
	10, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 10, 10, 10, 
	687, 10, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 10, 495, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 495, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 494, 494, 
	494, 494, 494, 494, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	494, 494, 494, 692, 494, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 494, 
	693, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 693, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	504, 494, 494, 503, 494, 494, 494, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 494, 494, 494, 494, 494, 494, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 494, 494, 494, 692, 494, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 494, 685, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 685, 10, 10, 10, 10, 10, 
	10, 10, 10, 554, 10, 10, 555, 10, 
	10, 10, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 10, 10, 10, 10, 
	10, 10, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 10, 10, 
	10, 694, 10, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 10, 689, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 689, 10, 10, 
	10, 10, 10, 10, 10, 10, 690, 10, 
	10, 691, 10, 10, 10, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 10, 
	10, 10, 10, 10, 10, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 10, 10, 10, 694, 10, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	10, 673, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	673, 520, 520, 520, 520, 520, 520, 520, 
	520, 695, 520, 520, 696, 520, 520, 520, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 520, 520, 520, 520, 520, 520, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 520, 520, 520, 522, 
	520, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 520, 697, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 697, 10, 10, 10, 10, 
	10, 10, 10, 553, 690, 10, 10, 691, 
	10, 10, 10, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 557, 10, 10, 
	10, 10, 10, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 10, 
	10, 10, 556, 10, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 10, 698, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 698, 510, 
	510, 510, 510, 510, 510, 510, 510, 699, 
	510, 510, 700, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 701, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 701, 1, 1, 
	1, 1, 1, 1, 1, 512, 1, 1, 
	1, 501, 1, 1, 1, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 1, 
	1, 1, 1, 1, 1, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 1, 1, 1, 513, 1, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	1, 702, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	702, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 10, 
	703, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 703, 
	510, 510, 510, 510, 510, 510, 510, 704, 
	705, 510, 510, 706, 510, 510, 510, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 708, 510, 510, 510, 510, 510, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 707, 510, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 510, 510, 510, 510, 10, 709, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 709, 510, 
	510, 510, 510, 510, 510, 510, 510, 710, 
	510, 510, 711, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 10, 712, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 712, 510, 510, 
	510, 510, 510, 510, 510, 704, 713, 510, 
	510, 714, 510, 510, 510, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 708, 
	510, 510, 510, 510, 510, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 707, 510, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	510, 510, 510, 510, 10, 715, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 715, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 545, 545, 
	545, 545, 545, 545, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 716, 545, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 716, 
	716, 716, 716, 716, 716, 716, 716, 545, 
	545, 545, 545, 494, 717, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 717, 494, 494, 494, 494, 
	494, 494, 494, 548, 504, 494, 494, 503, 
	494, 494, 494, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 494, 494, 494, 
	494, 494, 494, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 494, 
	494, 494, 718, 494, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 494, 552, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 552, 10, 
	10, 10, 10, 10, 10, 10, 516, 554, 
	10, 10, 555, 10, 10, 10, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	10, 10, 10, 10, 10, 10, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 10, 10, 10, 719, 10, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 10, 697, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 697, 10, 10, 10, 10, 10, 10, 
	10, 516, 690, 10, 10, 691, 10, 10, 
	10, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 10, 10, 10, 10, 10, 
	10, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 10, 10, 10, 
	719, 10, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 10, 703, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 703, 510, 510, 510, 
	510, 510, 510, 510, 510, 705, 510, 510, 
	706, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 510, 510, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 720, 510, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 510, 
	510, 510, 510, 10, 712, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 712, 510, 510, 510, 510, 
	510, 510, 510, 510, 713, 510, 510, 714, 
	510, 510, 510, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 510, 510, 510, 
	510, 510, 510, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 720, 510, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 510, 510, 
	510, 510, 10, 1, 721, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 1, 1, 1, 1, 
	1, 1, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 722, 1, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 722, 722, 722, 
	722, 722, 722, 722, 722, 1, 1, 1, 
	1, 112, 1, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 10, 10, 10, 10, 10, 
	10, 10, 10, 130, 10, 10, 131, 10, 
	10, 10, 1, 1, 1, 223, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 223, 10, 10, 10, 
	10, 10, 10, 10, 10, 224, 10, 10, 
	225, 10, 1, 523, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 523, 10, 10, 10, 10, 10, 
	10, 10, 10, 524, 10, 10, 525, 10, 
	10, 684, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	684, 10, 682, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 682, 10, 10, 10, 10, 10, 10, 
	10, 10, 570, 10, 10, 571, 10, 675, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 675, 10, 
	10, 10, 10, 10, 10, 10, 10, 524, 
	10, 10, 525, 10, 509, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 509, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 10, 702, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 702, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 10, 509, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 509, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	1, 569, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	569, 10, 10, 10, 10, 10, 10, 10, 
	10, 570, 10, 10, 571, 10, 505, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 505, 10, 10, 
	10, 10, 10, 10, 10, 10, 498, 10, 
	10, 499, 10, 497, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 497, 10, 10, 10, 10, 10, 
	10, 10, 10, 498, 10, 10, 499, 10, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	37, 31, 0, 6, 33, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 18, 12, 
	11, 12, 13, 14, 389, 15, 16, 17, 
	17, 389, 19, 40, 47, 19, 20, 21, 
	22, 22, 23, 24, 25, 30, 25, 26, 
	27, 28, 29, 25, 30, 6, 32, 33, 
	7, 35, 36, 33, 34, 34, 6, 33, 
	7, 38, 37, 39, 41, 42, 18, 41, 
	43, 43, 44, 45, 46, 23, 46, 41, 
	48, 42, 18, 49, 50, 41, 42, 18, 
	41, 42, 18, 51, 52, 51, 53, 390, 
	55, 56, 59, 57, 392, 58, 57, 392, 
	58, 60, 61, 60, 61, 63, 64, 67, 
	393, 394, 65, 393, 66, 393, 68, 69, 
	71, 72, 73, 71, 72, 73, 74, 82, 
	78, 75, 396, 76, 75, 76, 77, 77, 
	395, 75, 79, 396, 76, 80, 81, 396, 
	75, 396, 76, 83, 82, 84, 86, 87, 
	88, 86, 87, 88, 89, 99, 95, 90, 
	94, 91, 90, 91, 92, 92, 93, 397, 
	90, 96, 94, 91, 97, 98, 94, 90, 
	94, 91, 100, 99, 101, 103, 398, 103, 
	399, 105, 106, 107, 107, 399, 109, 110, 
	111, 109, 110, 111, 112, 250, 246, 113, 
	244, 114, 113, 114, 115, 115, 116, 117, 
	117, 118, 141, 119, 118, 119, 120, 121, 
	122, 120, 121, 122, 123, 138, 134, 124, 
	132, 125, 124, 125, 126, 126, 127, 128, 
	400, 129, 128, 400, 129, 130, 131, 131, 
	400, 133, 133, 124, 135, 132, 125, 136, 
	137, 132, 124, 132, 125, 139, 138, 140, 
	142, 257, 261, 142, 143, 144, 145, 244, 
	114, 256, 249, 144, 146, 234, 236, 146, 
	147, 148, 151, 230, 232, 227, 149, 204, 
	150, 149, 150, 151, 152, 153, 153, 154, 
	171, 155, 211, 218, 155, 156, 157, 158, 
	204, 150, 206, 207, 157, 159, 147, 160, 
	160, 161, 162, 167, 195, 162, 163, 164, 
	165, 166, 164, 127, 164, 168, 169, 161, 
	168, 170, 171, 170, 172, 173, 194, 173, 
	174, 175, 176, 174, 175, 176, 177, 191, 
	401, 187, 178, 185, 179, 178, 179, 180, 
	180, 181, 182, 400, 183, 182, 183, 184, 
	186, 186, 178, 188, 185, 179, 189, 190, 
	185, 178, 185, 179, 192, 191, 193, 173, 
	194, 168, 196, 169, 161, 197, 198, 168, 
	169, 161, 168, 169, 161, 199, 202, 199, 
	200, 201, 203, 205, 205, 157, 204, 150, 
	208, 209, 208, 149, 210, 149, 212, 213, 
	154, 212, 214, 214, 215, 216, 217, 215, 
	216, 212, 219, 213, 154, 220, 221, 212, 
	213, 154, 212, 213, 154, 222, 225, 222, 
	223, 224, 226, 228, 229, 204, 231, 231, 
	233, 159, 235, 235, 237, 253, 255, 238, 
	239, 241, 240, 240, 242, 243, 243, 245, 
	245, 113, 247, 248, 244, 113, 244, 114, 
	251, 250, 252, 254, 254, 234, 236, 144, 
	258, 259, 141, 258, 260, 260, 258, 262, 
	259, 141, 263, 264, 258, 259, 141, 258, 
	259, 141, 265, 268, 265, 266, 267, 269, 
	271, 272, 273, 271, 272, 273, 274, 372, 
	368, 275, 367, 276, 275, 276, 277, 277, 
	278, 279, 279, 280, 297, 281, 280, 281, 
	282, 283, 402, 284, 285, 283, 284, 285, 
	286, 294, 290, 287, 404, 288, 287, 288, 
	289, 289, 403, 287, 291, 404, 288, 292, 
	293, 404, 287, 404, 288, 295, 294, 296, 
	298, 377, 380, 298, 299, 301, 405, 300, 
	302, 303, 367, 276, 376, 371, 302, 304, 
	361, 362, 304, 305, 306, 309, 411, 359, 
	356, 307, 405, 308, 307, 308, 309, 406, 
	310, 311, 312, 339, 347, 312, 306, 313, 
	314, 315, 405, 308, 334, 335, 314, 407, 
	305, 316, 317, 318, 323, 325, 318, 286, 
	319, 320, 321, 322, 320, 403, 320, 324, 
	408, 317, 324, 324, 326, 408, 317, 327, 
	328, 324, 408, 317, 324, 408, 317, 329, 
	332, 329, 330, 331, 333, 314, 405, 308, 
	336, 337, 336, 307, 338, 307, 340, 409, 
	311, 340, 341, 342, 343, 410, 344, 346, 
	343, 344, 345, 403, 340, 348, 409, 311, 
	349, 350, 340, 409, 311, 340, 409, 311, 
	351, 354, 351, 352, 353, 355, 357, 358, 
	405, 360, 407, 316, 363, 413, 375, 364, 
	365, 366, 310, 412, 300, 275, 369, 370, 
	367, 275, 367, 276, 373, 372, 374, 361, 
	362, 302, 378, 379, 297, 378, 341, 378, 
	381, 379, 297, 382, 383, 378, 379, 297, 
	378, 379, 297, 384, 387, 384, 385, 386, 
	388, 391, 390
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 14, 0, 15, 0, 0, 16, 
	17, 18, 12, 13, 19, 9, 14, 9, 
	20, 0, 11, 13, 21, 22, 17, 23, 
	17, 17, 17, 24, 25, 26, 27, 26, 
	26, 4, 28, 0, 20, 0, 29, 29, 
	29, 30, 9, 31, 32, 33, 33, 0, 
	34, 0, 35, 13, 12, 13, 0, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 44, 30, 
	0, 0, 0, 45, 46, 45, 0, 47, 
	0, 45, 45, 0, 0, 0, 0, 30, 
	48, 48, 30, 49, 31, 50, 31, 28, 
	51, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 52, 9, 0, 0, 0, 9, 
	52, 26, 27, 53, 26, 4, 28, 54, 
	29, 55, 29, 30, 9, 31, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 57, 
	26, 27, 26, 26, 4, 28, 0, 29, 
	29, 29, 30, 9, 31, 11, 58, 13, 
	59, 0, 0, 16, 17, 60, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 61, 
	0, 11, 11, 62, 13, 0, 56, 2, 
	3, 4, 0, 5, 0, 0, 6, 9, 
	9, 9, 0, 0, 0, 9, 9, 63, 
	64, 65, 0, 66, 0, 0, 16, 17, 
	67, 65, 0, 26, 27, 26, 26, 4, 
	28, 0, 29, 29, 29, 30, 9, 31, 
	62, 13, 19, 9, 68, 69, 70, 26, 
	26, 4, 28, 0, 0, 0, 0, 9, 
	9, 0, 9, 9, 9, 6, 9, 9, 
	9, 0, 0, 0, 9, 71, 0, 11, 
	11, 62, 13, 19, 9, 68, 69, 70, 
	26, 26, 4, 28, 0, 0, 0, 72, 
	0, 11, 62, 13, 73, 9, 56, 74, 
	75, 4, 0, 0, 76, 77, 78, 78, 
	0, 79, 80, 0, 13, 81, 22, 17, 
	82, 83, 84, 85, 17, 86, 17, 17, 
	67, 87, 88, 88, 88, 17, 17, 17, 
	88, 88, 89, 90, 91, 17, 17, 17, 
	91, 17, 92, 93, 92, 92, 85, 94, 
	17, 95, 95, 95, 96, 88, 97, 98, 
	25, 99, 100, 101, 101, 102, 103, 62, 
	13, 13, 104, 105, 105, 62, 106, 9, 
	56, 4, 107, 108, 0, 109, 29, 29, 
	0, 30, 9, 26, 31, 29, 110, 33, 
	33, 0, 111, 0, 112, 113, 114, 102, 
	0, 115, 37, 38, 38, 39, 40, 62, 
	13, 13, 116, 42, 42, 62, 43, 9, 
	117, 4, 44, 27, 4, 0, 63, 0, 
	9, 9, 118, 0, 9, 9, 9, 9, 
	9, 9, 61, 0, 9, 71, 0, 119, 
	0, 26, 27, 4, 0, 29, 29, 29, 
	30, 9, 31, 63, 0, 9, 9, 109, 
	110, 33, 33, 0, 120, 0, 115, 37, 
	38, 38, 39, 40, 62, 13, 13, 116, 
	42, 42, 62, 43, 9, 117, 4, 44, 
	121, 2, 3, 4, 0, 5, 0, 0, 
	6, 9, 9, 9, 0, 0, 0, 9, 
	9, 10, 0, 11, 11, 12, 13, 0, 
	14, 56, 122, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 123, 9, 0, 0, 
	0, 9, 123, 26, 27, 124, 26, 4, 
	28, 125, 29, 126, 29, 30, 9, 31, 
	12, 13, 19, 9, 14, 68, 127, 0, 
	69, 70, 26, 26, 4, 28, 0, 0, 
	0, 0, 9, 9, 0, 9, 123, 9, 
	6, 9, 123, 9, 0, 0, 0, 123, 
	0, 11, 12, 13, 19, 9, 14, 68, 
	69, 70, 124, 26, 4, 28, 0, 125, 
	0, 0, 11, 12, 13, 73, 9, 14, 
	56, 74, 75, 4, 0, 125, 76, 128, 
	129, 78, 0, 130, 100, 131, 101, 102, 
	103, 12, 132, 13, 133, 134, 105, 12, 
	106, 9, 56, 4, 107, 109, 126, 29, 
	0, 30, 9, 26, 31, 29, 32, 135, 
	33, 0, 0, 35, 112, 136, 137, 114, 
	102, 0, 138, 122, 36, 37, 139, 38, 
	39, 40, 12, 132, 13, 41, 140, 42, 
	12, 43, 9, 117, 4, 44, 27, 4, 
	125, 9, 123, 141, 9, 123, 9, 9, 
	9, 9, 10, 123, 20, 26, 27, 4, 
	0, 29, 29, 29, 30, 9, 31, 9, 
	9, 109, 32, 33, 33, 0, 34, 36, 
	37, 38, 38, 39, 40, 12, 13, 13, 
	41, 42, 42, 12, 43, 9, 117, 4, 
	44, 143, 31
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 7, 
	7, 0, 7, 7, 7, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 7, 
	0, 0, 0, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	7, 0, 0, 7, 7, 0, 7, 7, 
	0, 0, 7, 7, 0, 7, 7, 7, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 7, 7, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 0, 7, 0, 
	7, 7, 7, 7, 0, 7, 0, 0, 
	0, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	0, 7, 7, 0, 7, 0, 7, 7, 
	7, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 0, 0, 
	0, 0, 7, 0, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	7, 0, 7, 7, 0, 7, 0, 7, 
	7, 7, 7, 0, 0, 7, 0, 0, 
	7, 7, 0, 7, 0, 0, 7, 7, 
	0, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 7, 7, 7, 0, 
	7, 7, 7, 7, 7, 0, 142, 144, 
	0, 0, 0, 145, 145, 145, 0, 0, 
	0, 145, 0, 145, 145, 145, 145, 145, 
	145, 145, 0, 145, 145, 145
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 389;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 54;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 55;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 62;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 70;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 85;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 102;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 104;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 108;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 270;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 143 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 45 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 54 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 62 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 17 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 59 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 119 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 65 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 66 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 14 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 122 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 15 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 30 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 97 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 28 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 48 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 86 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 138 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 107 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 80 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 136 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 98 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 16 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 18 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 120 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 108 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 20 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 91 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 23 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 96 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 85 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 94 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 93 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 47 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 110 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 88 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 61 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 63 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 127 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 270
		_goto_level = _again
		next
	end

  		end
	when 106 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 102 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 103 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 100 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 22 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 113 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 81 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 118 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 111 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 125 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 109 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 116 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 95 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 75 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 70 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 70
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 46 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 26 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 71 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 89 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 114 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 132 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 104 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 137 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 128 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 21 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 141 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 34 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 68 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 19 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 117 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 74 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 69 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 115 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 92 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 123 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 73 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 101 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 99 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 133 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 126 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 135 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 129 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 130 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 121 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 140 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 124 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 112 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 134 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 139 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 131 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 144 then
		begin

    yield @buffers[:ident]
  		end
	when 145 then
		begin

  		end
	when 142 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
