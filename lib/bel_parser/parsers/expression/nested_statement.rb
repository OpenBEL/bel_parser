
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 37, 6, 6, 
	6, 6, 6, 6, 6, 38, 6, 39, 
	6, 39, 40, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	39, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 41, 
	6, 42, 6, 6, 43, 45, 44, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 23, 23, 23, 23, 23, 23, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 23, 23, 23, 46, 
	23, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 23, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	47, 47, 47, 48, 47, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 47, 
	49, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	47, 47, 47, 47, 47, 47, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 47, 47, 47, 50, 47, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 47, 52, 51, 54, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 55, 53, 
	56, 51, 55, 53, 57, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 8, 58, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 8, 8, 8, 
	8, 8, 8, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 8, 
	8, 8, 59, 8, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 8, 57, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 57, 12, 
	58, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	12, 12, 12, 12, 12, 12, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 12, 12, 12, 60, 12, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 12, 62, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 63, 61, 65, 64, 
	63, 61, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 0, 0, 0, 67, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 0, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 69, 0, 0, 0, 
	0, 0, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 0, 0, 
	0, 68, 0, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 0, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	0, 0, 0, 0, 0, 0, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 0, 0, 0, 70, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 0, 
	0, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 0, 0, 0, 0, 0, 
	0, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 0, 0, 0, 
	73, 0, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 0, 74, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 74, 6, 6, 6, 
	6, 6, 6, 6, 75, 6, 76, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 76, 8, 77, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 8, 
	8, 8, 8, 8, 8, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 8, 8, 8, 78, 8, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	8, 76, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 12, 77, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 12, 12, 12, 12, 12, 12, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 12, 12, 12, 79, 
	12, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 12, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	83, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	84, 17, 17, 85, 17, 86, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 86, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	87, 6, 87, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 87, 8, 77, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 8, 8, 8, 8, 8, 
	8, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 8, 8, 8, 
	78, 8, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 8, 88, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 88, 23, 23, 23, 
	23, 23, 23, 23, 89, 90, 23, 23, 
	91, 23, 23, 23, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 93, 23, 
	23, 23, 23, 23, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	23, 23, 23, 92, 23, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 23, 
	86, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 86, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	94, 30, 30, 87, 30, 82, 80, 88, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 88, 23, 
	23, 23, 23, 23, 23, 23, 23, 90, 
	23, 23, 91, 23, 23, 23, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	23, 23, 23, 23, 23, 23, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 23, 23, 23, 95, 23, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 23, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 0, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 0, 0, 0, 99, 0, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	0, 100, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	100, 6, 6, 6, 6, 6, 6, 6, 
	101, 6, 102, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 102, 8, 103, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 8, 8, 8, 8, 8, 
	8, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 8, 8, 8, 
	104, 8, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 8, 102, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 12, 103, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 12, 12, 
	12, 12, 12, 12, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	12, 12, 12, 105, 12, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 12, 
	107, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 108, 106, 109, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 109, 17, 17, 17, 17, 
	17, 17, 17, 17, 110, 17, 17, 111, 
	17, 112, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	112, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 113, 6, 113, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 113, 8, 103, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 8, 
	8, 8, 8, 8, 8, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 8, 8, 8, 104, 8, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	8, 114, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	114, 23, 23, 23, 23, 23, 23, 23, 
	115, 116, 23, 23, 117, 23, 23, 23, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 119, 23, 23, 23, 23, 23, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 23, 23, 23, 118, 
	23, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 23, 112, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 112, 30, 30, 30, 30, 
	30, 30, 30, 30, 120, 30, 30, 113, 
	30, 121, 30, 108, 106, 114, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 114, 23, 23, 23, 
	23, 23, 23, 23, 23, 116, 23, 23, 
	117, 23, 23, 23, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 23, 23, 
	23, 23, 23, 23, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	23, 23, 23, 122, 23, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 23, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 6, 124, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 6, 126, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 127, 6, 128, 6, 6, 129, 
	131, 130, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 0, 0, 0, 0, 
	0, 0, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 0, 0, 
	0, 132, 0, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 0, 133, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 133, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 0, 
	0, 0, 0, 0, 0, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 0, 0, 0, 135, 0, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	0, 136, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	136, 6, 6, 6, 6, 6, 6, 6, 
	137, 6, 138, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 138, 8, 139, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 8, 8, 8, 8, 8, 
	8, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 8, 8, 8, 
	140, 8, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 8, 138, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 12, 139, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 12, 12, 
	12, 12, 12, 12, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	12, 12, 12, 141, 12, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 12, 
	143, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 144, 142, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 145, 17, 17, 17, 17, 
	17, 17, 17, 17, 146, 17, 17, 147, 
	17, 148, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	148, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 149, 6, 149, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 149, 8, 139, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 8, 
	8, 8, 8, 8, 8, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 8, 8, 8, 140, 8, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	8, 150, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	150, 23, 23, 23, 23, 23, 23, 23, 
	151, 152, 23, 23, 153, 23, 23, 23, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 155, 23, 23, 23, 23, 23, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 23, 23, 23, 154, 
	23, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 23, 148, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 148, 30, 30, 30, 30, 
	30, 30, 30, 30, 156, 30, 30, 149, 
	30, 157, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	157, 30, 158, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	6, 160, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	160, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 6, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 162, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 0, 0, 0, 163, 0, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 0, 164, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 164, 0, 0, 0, 0, 0, 
	0, 0, 165, 0, 0, 0, 0, 0, 
	0, 0, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 0, 0, 0, 0, 
	0, 0, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 0, 0, 
	0, 166, 0, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 0, 167, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 167, 6, 6, 
	6, 6, 6, 6, 6, 168, 6, 169, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 169, 8, 
	170, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	8, 8, 8, 8, 8, 8, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 8, 8, 8, 171, 8, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 8, 169, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 12, 170, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 12, 12, 12, 12, 12, 
	12, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 12, 12, 12, 
	172, 12, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 12, 174, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 175, 
	173, 176, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	176, 17, 17, 17, 17, 17, 17, 17, 
	17, 177, 17, 17, 178, 17, 179, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 179, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 180, 6, 180, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 180, 8, 170, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 8, 8, 8, 8, 
	8, 8, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 8, 8, 
	8, 171, 8, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 8, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 182, 183, 23, 
	23, 184, 23, 23, 23, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	23, 23, 23, 23, 23, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 23, 23, 23, 185, 23, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	23, 179, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	179, 30, 30, 30, 30, 30, 30, 30, 
	30, 187, 30, 30, 180, 30, 188, 189, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 188, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 190, 30, 191, 192, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 191, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 193, 6, 194, 6, 
	6, 195, 197, 196, 175, 173, 181, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 181, 23, 23, 
	23, 23, 23, 23, 23, 23, 183, 23, 
	23, 184, 23, 23, 23, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 23, 
	23, 23, 23, 23, 23, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 23, 23, 23, 198, 23, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	23, 144, 142, 150, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 150, 23, 23, 23, 23, 23, 
	23, 23, 23, 152, 23, 23, 153, 23, 
	23, 23, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 23, 23, 23, 23, 
	23, 23, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 23, 23, 
	23, 199, 23, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 23, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 0, 0, 0, 200, 0, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 0, 201, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 201, 0, 0, 0, 0, 0, 0, 
	0, 202, 0, 0, 0, 0, 0, 0, 
	0, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 0, 0, 0, 0, 0, 
	0, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 0, 0, 0, 
	203, 0, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 0, 204, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 204, 6, 6, 6, 
	6, 6, 6, 6, 205, 6, 206, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 206, 8, 207, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 8, 
	8, 8, 8, 8, 8, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 8, 8, 8, 208, 8, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	8, 206, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 12, 207, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 12, 12, 12, 12, 12, 12, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 12, 12, 12, 209, 
	12, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 12, 211, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	213, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 213, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	214, 17, 17, 215, 17, 216, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 216, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	217, 6, 217, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 217, 8, 207, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 8, 8, 8, 8, 8, 
	8, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 8, 8, 8, 
	208, 8, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 8, 218, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 218, 23, 23, 23, 
	23, 23, 23, 23, 219, 220, 23, 23, 
	221, 23, 23, 23, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 223, 23, 
	23, 23, 23, 23, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	23, 23, 23, 222, 23, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 23, 
	216, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 216, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	224, 30, 30, 217, 30, 225, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 225, 30, 226, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 226, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 6, 228, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 228, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 6, 230, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 230, 0, 0, 0, 0, 
	0, 0, 0, 231, 0, 0, 0, 0, 
	0, 0, 0, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 232, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 233, 
	6, 234, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 0, 0, 0, 0, 0, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 0, 0, 0, 236, 
	0, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 0, 237, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 237, 6, 6, 6, 6, 
	6, 6, 6, 238, 6, 239, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 239, 8, 240, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 8, 8, 
	8, 8, 8, 8, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	8, 8, 8, 241, 8, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 8, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	12, 240, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 12, 12, 12, 12, 12, 12, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 12, 12, 12, 242, 12, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 12, 244, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 245, 243, 246, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 246, 17, 
	17, 17, 17, 17, 17, 17, 17, 247, 
	17, 17, 248, 17, 249, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 249, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 250, 
	6, 250, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	250, 8, 240, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 8, 8, 8, 8, 8, 8, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 8, 8, 8, 241, 
	8, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 8, 251, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 251, 23, 23, 23, 23, 
	23, 23, 23, 252, 253, 23, 23, 254, 
	23, 23, 23, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 256, 23, 23, 
	23, 23, 23, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 23, 
	23, 23, 255, 23, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 23, 249, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 249, 30, 
	30, 30, 30, 30, 30, 30, 30, 257, 
	30, 30, 250, 30, 245, 243, 251, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 251, 23, 23, 
	23, 23, 23, 23, 23, 23, 253, 23, 
	23, 254, 23, 23, 23, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 23, 
	23, 23, 23, 23, 23, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 23, 23, 23, 258, 23, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	23, 212, 210, 218, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 218, 23, 23, 23, 23, 23, 
	23, 23, 23, 220, 23, 23, 221, 23, 
	23, 23, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 23, 23, 23, 23, 
	23, 23, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 23, 23, 
	23, 259, 23, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 23, 6, 6, 
	6, 6, 30, 30, 6, 6, 6, 6, 
	30, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	133, 18, 19, 20, 20, 133, 22, 0, 
	24, 134, 24, 0, 26, 26, 27, 28, 
	135, 30, 31, 35, 34, 31, 32, 33, 
	0, 136, 136, 34, 35, 30, 37, 38, 
	39, 37, 38, 39, 40, 41, 45, 48, 
	41, 42, 47, 43, 137, 44, 43, 44, 
	43, 46, 137, 44, 45, 40, 137, 48, 
	50, 51, 52, 50, 51, 52, 53, 54, 
	58, 62, 54, 55, 61, 56, 60, 57, 
	56, 57, 56, 59, 60, 57, 58, 53, 
	60, 138, 62, 64, 139, 64, 140, 66, 
	67, 68, 68, 140, 70, 71, 72, 70, 
	71, 72, 73, 74, 78, 102, 74, 75, 
	101, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 73, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 92, 100, 88, 89, 99, 
	90, 94, 91, 90, 91, 90, 93, 94, 
	91, 92, 87, 94, 95, 141, 96, 95, 
	141, 96, 97, 98, 98, 141, 100, 102, 
	104, 105, 106, 104, 105, 106, 107, 108, 
	112, 132, 108, 109, 131, 110, 114, 111, 
	110, 111, 110, 113, 114, 111, 112, 107, 
	114, 115, 115, 116, 117, 116, 117, 118, 
	119, 142, 120, 121, 119, 120, 121, 122, 
	123, 127, 130, 123, 124, 129, 125, 143, 
	126, 125, 126, 125, 128, 143, 126, 127, 
	122, 143, 130, 132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 25, 0, 
	26, 0, 0, 27, 28, 29, 30, 31, 
	11, 32, 30, 33, 8, 13, 13, 13, 
	34, 0, 8, 11, 11, 13, 13, 13, 
	12, 35, 36, 30, 30, 19, 37, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 38, 15, 0, 0, 
	17, 18, 39, 17, 5, 19, 40, 30, 
	41, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 42, 30, 22, 43, 24, 44, 0, 
	0, 27, 28, 45, 41, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 46, 0, 22, 
	47, 24, 0, 41, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	15, 15, 15, 0, 0, 17, 18, 17, 
	17, 5, 19, 0, 48, 49, 48, 0, 
	50, 0, 0, 27, 28, 51, 30, 30, 
	52, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 15, 15, 15, 
	0, 0, 17, 18, 17, 17, 5, 19, 
	0, 21, 0, 22, 23, 24, 0, 25, 
	41, 53, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 54, 
	15, 0, 0, 17, 18, 55, 17, 5, 
	19, 56, 30, 30
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 16, 31, 
	31, 33, 33, 33, 33, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 14, 0, 7, 16, 20, 12, 
	16, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 12, 16, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 0, 0, 1, 1, 0, 7, 10, 
	12, 14, 0, 7, 16, 20, 20, 0, 
	0, 0, 0, 12, 16, 12, 16, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 14, 0, 7, 16, 
	20, 12, 16, 12, 16, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel        
          end

          def each
            @buffers = {}
            eof      = :ignored
            stack    = []
            data     = @content.unpack('C*')
            p        = 0
            pe       = data.length
            eof      = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 30 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 40 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 47 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 28 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 46 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 48 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 53 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 27 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 51 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 36 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 56 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 41 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 37 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 55 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 33 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
