
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 
	41, 9, 47, 47, 47, 
	10, 10, 10, 10, 0, 0, 
	9, 122, 48, 122, 9, 
	39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 10, 10, 0, 0, 
	39, 92, 39, 92, 0, 
	0, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	0, 0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 44, 10, 10, 
	0, 0, 9, 122, 33, 
	126, 10, 126, 10, 47, 
	47, 47, 10, 10, 10, 10, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 39, 92, 39, 92, 
	0, 0, 9, 122, 9, 44, 
	0, 0, 9, 122, 0, 
	0, 9, 122, 0, 0, 
	10, 122, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 32, 1, 39, 1, 
	1, 1, 0, 114, 75, 31, 59, 59, 
	0, 54, 54, 0, 114, 114, 31, 59, 
	59, 1, 0, 54, 54, 0, 113, 113, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	0, 114, 75, 114, 32, 114, 114, 31, 
	59, 59, 36, 36, 114, 54, 54, 0, 
	114, 36, 1, 0, 114, 94, 117, 38, 
	1, 1, 1, 75, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 24, 118, 118, 114, 114, 
	32, 114, 114, 31, 59, 59, 36, 36, 
	114, 54, 54, 0, 114, 36, 39, 39, 
	1, 1, 1, 0, 114, 0, 114, 75, 
	114, 32, 114, 114, 31, 59, 59, 36, 
	36, 114, 54, 54, 0, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	31, 59, 59, 36, 36, 114, 54, 54, 
	0, 114, 36, 0, 114, 0, 114, 0, 
	113, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1354, 1356, 1396, 
	1398, 1400, 1402, 1403, 1518, 1594, 1626, 1686, 
	1746, 1747, 1802, 1857, 1858, 1973, 2088, 2120, 
	2180, 2240, 2242, 2243, 2298, 2353, 2354, 2468, 
	2582, 2658, 2773, 2806, 2921, 3036, 3068, 3128, 
	3188, 3225, 3262, 3377, 3432, 3487, 3488, 3603, 
	3640, 3641, 3756, 3832, 3947, 3980, 4095, 4210, 
	4242, 4302, 4362, 4399, 4436, 4551, 4606, 4661, 
	4662, 4777, 4814, 4816, 4817, 4932, 5027, 5145, 
	5184, 5186, 5188, 5190, 5266, 5381, 5414, 5529, 
	5644, 5676, 5736, 5796, 5833, 5870, 5985, 6040, 
	6095, 6096, 6211, 6248, 6273, 6392, 6511, 6626, 
	6741, 6774, 6889, 7004, 7036, 7096, 7156, 7193, 
	7230, 7345, 7400, 7455, 7456, 7571, 7608, 7648, 
	7688, 7690, 7692, 7694, 7695, 7810, 7811, 7926, 
	8002, 8117, 8150, 8265, 8380, 8412, 8472, 8532, 
	8569, 8606, 8721, 8776, 8831, 8832, 8947, 8984, 
	9009, 9128, 9247, 9362, 9364, 9479, 9512, 9627, 
	9742, 9774, 9834, 9894, 9931, 9968, 10083, 10138, 
	10193, 10194, 10309, 10346, 10347, 10462, 10463, 10578, 
	10579, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 
	10700, 10701, 10702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 20, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 21, 19, 
	19, 22, 19, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 24, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 29, 19, 19, 19, 19, 19, 19, 
	19, 30, 31, 19, 19, 32, 19, 19, 
	19, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 19, 19, 19, 19, 
	19, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 19, 19, 19, 
	33, 19, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 19, 23, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 23, 19, 19, 19, 
	19, 19, 19, 19, 19, 35, 19, 19, 
	24, 19, 36, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 36, 19, 37, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 1, 39, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	42, 1, 43, 1, 43, 44, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 46, 1, 1, 47, 
	49, 48, 16, 29, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 29, 19, 19, 19, 19, 19, 
	19, 19, 19, 31, 19, 19, 32, 19, 
	19, 19, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 19, 19, 19, 19, 
	19, 19, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 19, 19, 
	19, 50, 19, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 19, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	1, 1, 1, 1, 1, 1, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 1, 1, 1, 51, 1, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 1, 52, 52, 52, 52, 52, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 52, 1, 53, 1, 1, 1, 1, 
	54, 1, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 57, 55, 59, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	60, 58, 58, 56, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	62, 61, 59, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 64, 
	63, 63, 65, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 65, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 1, 1, 1, 1, 1, 
	1, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 1, 1, 1, 1, 1, 
	1, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 1, 1, 1, 
	69, 1, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 1, 65, 66, 66, 
	66, 66, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 65, 1, 67, 1, 
	1, 1, 1, 68, 1, 1, 1, 1, 
	1, 1, 1, 1, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 1, 1, 
	1, 1, 1, 1, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	1, 1, 1, 70, 1, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 1, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 66, 
	1, 67, 1, 1, 1, 1, 68, 1, 
	72, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 73, 71, 75, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 76, 74, 
	77, 1, 74, 72, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	79, 78, 75, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 81, 
	80, 80, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 1, 1, 1, 1, 1, 1, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 1, 1, 1, 83, 
	1, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 1, 82, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 85, 1, 1, 1, 
	1, 1, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 1, 1, 
	1, 84, 1, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 1, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 1, 1, 1, 86, 1, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 1, 87, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 87, 1, 1, 1, 1, 1, 1, 
	1, 88, 1, 1, 1, 1, 1, 1, 
	1, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 1, 1, 1, 1, 1, 
	1, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 1, 1, 1, 
	89, 1, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 1, 90, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 90, 1, 1, 1, 
	1, 1, 1, 1, 91, 1, 92, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 92, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 92, 93, 93, 93, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	92, 1, 94, 1, 1, 1, 1, 95, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 1, 1, 1, 1, 1, 1, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 1, 1, 1, 97, 
	1, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 1, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 93, 1, 94, 1, 1, 
	1, 1, 95, 1, 99, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 100, 98, 
	102, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 103, 101, 104, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 104, 19, 19, 19, 19, 
	19, 19, 19, 19, 105, 19, 19, 106, 
	19, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	107, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 108, 1, 108, 93, 
	93, 93, 93, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 108, 1, 94, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 99, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 110, 109, 
	102, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 112, 111, 111, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 113, 
	19, 19, 19, 19, 19, 19, 19, 114, 
	115, 19, 19, 116, 19, 19, 19, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 118, 19, 19, 19, 19, 19, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 19, 19, 19, 117, 19, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 19, 107, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 107, 19, 19, 19, 19, 19, 
	19, 19, 19, 119, 19, 19, 108, 19, 
	101, 113, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	113, 19, 19, 19, 19, 19, 19, 19, 
	19, 115, 19, 19, 116, 19, 19, 19, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 19, 19, 19, 19, 19, 19, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 19, 19, 19, 120, 
	19, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 19, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 1, 1, 
	1, 1, 1, 1, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	1, 1, 1, 121, 1, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 1, 
	122, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 122, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 1, 1, 1, 1, 1, 1, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 1, 1, 1, 124, 1, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 1, 125, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 125, 1, 1, 1, 1, 1, 
	1, 1, 126, 1, 127, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 127, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 127, 
	128, 128, 128, 128, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 127, 1, 
	129, 1, 1, 1, 1, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	1, 1, 1, 1, 1, 1, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 1, 1, 1, 132, 1, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 1, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 129, 1, 1, 1, 1, 
	130, 1, 134, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 135, 133, 137, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	138, 136, 139, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 139, 19, 19, 19, 19, 19, 19, 
	19, 19, 140, 19, 19, 141, 19, 142, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 142, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 143, 1, 143, 128, 128, 128, 
	128, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 143, 1, 129, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 1, 1, 1, 
	1, 1, 1, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 1, 
	1, 1, 131, 1, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 1, 134, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 145, 144, 137, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 148, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 148, 19, 19, 
	19, 19, 19, 19, 19, 149, 150, 19, 
	19, 151, 19, 19, 19, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 153, 
	19, 19, 19, 19, 19, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 19, 19, 19, 152, 19, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	19, 142, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	142, 19, 19, 19, 19, 19, 19, 19, 
	19, 154, 19, 19, 143, 19, 155, 19, 
	136, 148, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	148, 19, 19, 19, 19, 19, 19, 19, 
	19, 150, 19, 19, 151, 19, 19, 19, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 19, 19, 19, 19, 19, 19, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 19, 19, 19, 156, 
	19, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 19, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 1, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	1, 160, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 161, 1, 
	162, 1, 1, 163, 165, 164, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	1, 1, 1, 1, 1, 1, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 1, 1, 1, 166, 1, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 1, 167, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 167, 1, 1, 1, 1, 1, 1, 
	1, 168, 1, 1, 1, 1, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 171, 1, 172, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 172, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 172, 173, 173, 173, 173, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	172, 1, 174, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 173, 1, 174, 1, 1, 
	1, 1, 175, 1, 179, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 180, 178, 
	182, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 184, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 184, 19, 19, 19, 19, 
	19, 19, 19, 19, 185, 19, 19, 186, 
	19, 187, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	187, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 188, 1, 188, 173, 
	173, 173, 173, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 188, 1, 174, 
	1, 1, 1, 1, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 1, 
	1, 1, 1, 1, 1, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 1, 1, 1, 176, 1, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	1, 179, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 190, 189, 
	182, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 192, 191, 191, 
	193, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 193, 
	19, 19, 19, 19, 19, 19, 19, 194, 
	195, 19, 19, 196, 19, 19, 19, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 198, 19, 19, 19, 19, 19, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 19, 19, 19, 197, 19, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 19, 187, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 187, 19, 19, 19, 19, 19, 
	19, 19, 19, 199, 19, 19, 188, 19, 
	200, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 200, 
	19, 201, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	201, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 1, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 203, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 1, 205, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	1, 1, 1, 1, 1, 1, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 1, 1, 1, 206, 1, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 1, 207, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 1, 1, 1, 1, 
	1, 208, 1, 1, 1, 1, 1, 1, 
	1, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 1, 1, 1, 
	209, 1, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 210, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 212, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 212, 213, 213, 213, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	212, 1, 214, 1, 1, 1, 1, 215, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 1, 1, 1, 1, 1, 1, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 1, 1, 1, 217, 
	1, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 1, 213, 213, 213, 213, 
	213, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 213, 1, 214, 1, 1, 
	1, 1, 215, 1, 219, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	222, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 223, 221, 224, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 224, 19, 19, 19, 19, 
	19, 19, 19, 19, 225, 19, 19, 226, 
	19, 227, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	227, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 228, 1, 228, 213, 
	213, 213, 213, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 214, 
	1, 1, 1, 1, 215, 1, 1, 1, 
	1, 1, 1, 1, 1, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 1, 
	1, 1, 1, 1, 1, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 1, 1, 1, 216, 1, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	1, 219, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	222, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 232, 231, 231, 
	233, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 233, 
	19, 19, 19, 19, 19, 19, 19, 234, 
	235, 19, 19, 236, 19, 19, 19, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 238, 19, 19, 19, 19, 19, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 19, 19, 19, 237, 19, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 19, 227, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 227, 19, 19, 19, 19, 19, 
	19, 19, 19, 239, 19, 19, 228, 19, 
	240, 241, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 240, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 242, 19, 
	243, 244, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 243, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 247, 249, 248, 221, 233, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 233, 19, 
	19, 19, 19, 19, 19, 19, 19, 235, 
	19, 19, 236, 19, 19, 19, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	19, 19, 19, 19, 19, 19, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 19, 19, 19, 250, 19, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 19, 181, 193, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 193, 19, 19, 19, 19, 19, 
	19, 19, 19, 195, 19, 19, 196, 19, 
	19, 19, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 19, 19, 19, 19, 
	19, 19, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 19, 19, 
	19, 251, 19, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 19, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	1, 1, 1, 1, 1, 1, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 1, 1, 1, 252, 1, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1, 253, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 253, 1, 1, 1, 1, 1, 1, 
	1, 254, 1, 1, 1, 1, 1, 1, 
	1, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1, 1, 1, 1, 1, 
	1, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 1, 1, 1, 
	255, 1, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1, 256, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 256, 1, 1, 1, 
	1, 1, 1, 1, 257, 1, 258, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 258, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 258, 259, 259, 259, 259, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	258, 1, 260, 1, 1, 1, 1, 261, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 1, 1, 1, 1, 1, 1, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 1, 1, 1, 263, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 1, 259, 259, 259, 259, 
	259, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 260, 1, 1, 
	1, 1, 261, 1, 265, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 266, 264, 
	268, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 269, 267, 270, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 270, 19, 19, 19, 19, 
	19, 19, 19, 19, 271, 19, 19, 272, 
	19, 273, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	273, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 274, 1, 274, 259, 
	259, 259, 259, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 274, 1, 260, 
	1, 1, 1, 1, 261, 1, 1, 1, 
	1, 1, 1, 1, 1, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 1, 
	1, 1, 1, 1, 1, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 1, 1, 1, 262, 1, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	1, 265, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 276, 275, 
	268, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 278, 277, 277, 
	279, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 279, 
	19, 19, 19, 19, 19, 19, 19, 280, 
	281, 19, 19, 282, 19, 19, 19, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 284, 19, 19, 19, 19, 19, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 19, 19, 19, 283, 19, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 19, 273, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 273, 19, 19, 19, 19, 19, 
	19, 19, 19, 285, 19, 19, 274, 19, 
	286, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 286, 
	19, 287, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	287, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 1, 
	289, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 1, 291, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 291, 1, 
	1, 1, 1, 1, 1, 1, 292, 1, 
	1, 1, 1, 1, 1, 1, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	1, 1, 1, 1, 1, 1, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 1, 1, 1, 293, 1, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 1, 294, 1, 295, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 295, 1, 1, 1, 1, 
	1, 1, 1, 296, 1, 1, 1, 1, 
	1, 1, 1, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 1, 1, 1, 
	1, 1, 1, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 1, 
	1, 1, 297, 1, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 1, 298, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 298, 1, 
	1, 1, 1, 1, 1, 1, 299, 1, 
	300, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 300, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 300, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 300, 1, 302, 1, 1, 1, 
	1, 303, 1, 1, 1, 1, 1, 1, 
	1, 1, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 1, 1, 1, 1, 
	1, 1, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 1, 1, 
	1, 305, 1, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 1, 301, 301, 
	301, 301, 301, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 301, 1, 302, 
	1, 1, 1, 1, 303, 1, 307, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	308, 306, 310, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 311, 309, 312, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 312, 19, 19, 
	19, 19, 19, 19, 19, 19, 313, 19, 
	19, 314, 19, 315, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 315, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 316, 1, 
	316, 301, 301, 301, 301, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 316, 
	1, 302, 1, 1, 1, 1, 303, 1, 
	1, 1, 1, 1, 1, 1, 1, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1, 1, 1, 1, 1, 1, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 1, 1, 1, 304, 1, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1, 307, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	318, 317, 310, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 320, 
	319, 319, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 321, 19, 19, 19, 19, 19, 19, 
	19, 322, 323, 19, 19, 324, 19, 19, 
	19, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 19, 19, 19, 19, 
	19, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 19, 19, 19, 
	325, 19, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 19, 315, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 315, 19, 19, 19, 
	19, 19, 19, 19, 19, 327, 19, 19, 
	316, 19, 309, 321, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 321, 19, 19, 19, 19, 19, 
	19, 19, 19, 323, 19, 19, 324, 19, 
	19, 19, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 19, 19, 19, 19, 
	19, 19, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 19, 19, 
	19, 328, 19, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 19, 267, 279, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 279, 19, 
	19, 19, 19, 19, 19, 19, 19, 281, 
	19, 19, 282, 19, 19, 19, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	19, 19, 19, 19, 19, 19, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 19, 19, 19, 329, 19, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 19, 1, 330, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 1, 1, 1, 1, 1, 
	1, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	331, 1, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 1, 1, 1, 1, 
	19, 19, 1, 1, 1, 1, 19, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 27, 8, 9, 26, 
	8, 9, 26, 0, 10, 17, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 17, 
	11, 15, 5, 17, 18, 18, 19, 20, 
	19, 20, 21, 22, 175, 23, 24, 25, 
	25, 175, 27, 176, 29, 30, 33, 31, 
	178, 32, 31, 178, 32, 34, 35, 34, 
	35, 37, 38, 39, 43, 47, 46, 40, 
	41, 42, 40, 41, 42, 179, 44, 45, 
	44, 45, 179, 46, 47, 37, 49, 50, 
	51, 49, 50, 51, 52, 53, 54, 59, 
	62, 65, 55, 56, 64, 55, 56, 64, 
	57, 180, 58, 57, 58, 60, 61, 60, 
	61, 57, 63, 180, 58, 62, 52, 180, 
	65, 67, 68, 69, 67, 68, 69, 70, 
	71, 72, 77, 80, 84, 73, 74, 83, 
	73, 74, 83, 75, 82, 76, 75, 76, 
	78, 79, 78, 79, 75, 81, 82, 76, 
	80, 70, 82, 181, 84, 86, 182, 86, 
	183, 88, 89, 90, 90, 183, 92, 93, 
	94, 92, 93, 94, 95, 96, 97, 102, 
	105, 134, 98, 99, 133, 98, 99, 133, 
	100, 107, 101, 100, 101, 103, 104, 103, 
	104, 100, 106, 107, 101, 105, 95, 107, 
	108, 108, 109, 110, 109, 110, 111, 112, 
	113, 111, 112, 113, 114, 115, 116, 121, 
	124, 132, 117, 118, 131, 117, 118, 131, 
	119, 126, 120, 119, 120, 122, 123, 122, 
	123, 119, 125, 126, 120, 124, 114, 126, 
	127, 184, 128, 127, 184, 128, 129, 130, 
	130, 184, 132, 134, 136, 137, 138, 136, 
	137, 138, 139, 140, 141, 146, 149, 174, 
	142, 143, 173, 142, 143, 173, 144, 151, 
	145, 144, 145, 147, 148, 147, 148, 144, 
	150, 151, 145, 149, 139, 151, 152, 152, 
	153, 154, 153, 154, 155, 156, 185, 157, 
	158, 156, 157, 158, 159, 160, 161, 166, 
	169, 172, 162, 163, 171, 162, 163, 171, 
	164, 186, 165, 164, 165, 167, 168, 167, 
	168, 164, 170, 186, 165, 169, 159, 186, 
	172, 174, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 13, 14, 14, 14, 0, 
	0, 9, 9, 0, 0, 15, 16, 15, 
	15, 4, 17, 0, 18, 0, 19, 20, 
	21, 0, 22, 0, 23, 0, 0, 24, 
	25, 26, 0, 7, 0, 0, 0, 9, 
	29, 9, 0, 30, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 7, 7, 9, 
	10, 9, 0, 11, 0, 31, 9, 9, 
	0, 0, 32, 0, 0, 17, 33, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 34, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 35, 15, 4, 17, 36, 
	0, 37, 2, 3, 4, 0, 5, 0, 
	0, 0, 0, 6, 7, 9, 10, 9, 
	0, 11, 0, 14, 14, 14, 0, 0, 
	9, 9, 0, 0, 15, 16, 15, 15, 
	4, 17, 0, 38, 0, 19, 39, 21, 
	40, 0, 0, 24, 25, 41, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	42, 0, 19, 43, 21, 0, 37, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 14, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 15, 15, 4, 17, 0, 
	44, 45, 44, 0, 46, 0, 0, 24, 
	25, 47, 0, 0, 48, 2, 3, 4, 
	0, 5, 0, 0, 0, 0, 6, 7, 
	9, 10, 9, 0, 11, 0, 14, 14, 
	14, 0, 0, 9, 9, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 37, 49, 2, 
	3, 4, 0, 5, 0, 0, 0, 0, 
	6, 7, 9, 10, 9, 0, 11, 0, 
	14, 50, 14, 0, 0, 9, 9, 0, 
	0, 15, 16, 51, 15, 4, 17, 52, 
	0, 0, 54, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 8, 
	8, 12, 0, 0, 8, 8, 8, 12, 
	12, 12, 0, 0, 0, 0, 0, 0, 
	0, 0, 8, 12, 0, 27, 28, 28, 
	28, 28, 28, 28, 0, 0, 0, 8, 
	8, 0, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 8, 8, 
	12, 0, 0, 8, 8, 8, 12, 12, 
	8, 12, 0, 0, 0, 0, 0, 0, 
	8, 8, 12, 0, 0, 8, 8, 8, 
	12, 12, 12, 8, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 12, 0, 0, 0, 0, 
	0, 0, 0, 0, 8, 8, 12, 0, 
	0, 8, 8, 8, 12, 12, 12, 0, 
	0, 0, 0, 8, 12, 8, 12, 0, 
	0, 0, 0, 0, 0, 8, 8, 12, 
	0, 0, 8, 8, 8, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 8, 12, 0, 0, 8, 8, 
	8, 12, 12, 8, 12, 8, 12, 0, 
	53, 55, 0, 0, 56, 56, 0, 0, 
	0, 0, 56
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 175;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 28;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 29;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 36;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 66;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 85;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 87;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 91;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 135;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 9 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 4 then
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 42 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 44 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 46 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 135
		_goto_level = _again
		next
	end

  		end
	when 49 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 47 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 45 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 10 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 30 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 34 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 37 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    p_start = p;
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 55 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 8 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 56 then
		begin

  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
