
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 83, 115, 69, 101, 
	84, 116, 9, 32, 9, 
	100, 79, 111, 67, 99, 
	85, 117, 77, 109, 69, 101, 
	78, 110, 84, 116, 9, 
	32, 9, 122, 9, 122, 
	9, 61, 9, 32, 9, 123, 
	10, 10, 9, 123, 10, 
	122, 10, 122, 9, 125, 
	9, 125, 125, 125, 10, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	123, 123, 9, 122, 9, 
	122, 9, 122, 9, 61, 
	9, 125, 125, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 32, 9, 122, 
	9, 122, 0, 0, 10, 
	10, 125, 125, 9, 44, 
	10, 122, 0, 0, 0, 0, 
	9, 125, 9, 125, 125, 
	125, 10, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 44, 
	9, 123, 10, 10, 0, 0, 
	9, 123, 9, 122, 9, 
	123, 9, 123, 10, 122, 
	9, 32, 9, 123, 9, 123, 
	9, 125, 10, 125, 125, 
	125, 9, 125, 9, 44, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 33, 33, 33, 24, 92, 33, 33, 
	33, 33, 33, 33, 33, 24, 114, 114, 
	53, 24, 115, 1, 115, 113, 113, 117, 
	117, 1, 116, 117, 117, 117, 117, 117, 
	117, 117, 117, 75, 31, 59, 59, 0, 
	54, 54, 0, 1, 114, 114, 114, 53, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 24, 114, 114, 0, 1, 1, 36, 
	113, 0, 0, 117, 117, 1, 116, 117, 
	117, 117, 117, 117, 117, 117, 117, 36, 
	115, 1, 0, 115, 114, 115, 115, 113, 
	24, 115, 115, 117, 116, 1, 117, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 34, 68, 102, 127, 220, 254, 
	288, 322, 356, 390, 424, 458, 483, 598, 
	713, 767, 792, 908, 910, 1026, 1140, 1254, 
	1372, 1490, 1492, 1609, 1727, 1845, 1963, 2081, 
	2199, 2317, 2435, 2553, 2629, 2661, 2721, 2781, 
	2782, 2837, 2892, 2893, 2895, 3010, 3125, 3240, 
	3294, 3412, 3414, 3532, 3650, 3768, 3886, 4004, 
	4122, 4240, 4265, 4380, 4495, 4496, 4498, 4500, 
	4537, 4651, 4652, 4653, 4771, 4889, 4891, 5008, 
	5126, 5244, 5362, 5480, 5598, 5716, 5834, 5952, 
	5989, 6105, 6107, 6108, 6224, 6339, 6455, 6571, 
	6685, 6710, 6826, 6942, 7060, 7177, 7179, 7297
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 1, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	9, 1, 10, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 1, 11, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 1, 12, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 1, 14, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 1, 1, 
	1, 15, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 1, 
	1, 1, 1, 1, 1, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 1, 1, 1, 17, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 20, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	22, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 22, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 21, 21, 21, 21, 21, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 21, 21, 21, 21, 23, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 24, 21, 25, 1, 22, 26, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 22, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 21, 
	21, 21, 21, 21, 21, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	21, 21, 21, 21, 23, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 21, 27, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 1, 1, 1, 1, 1, 1, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 1, 1, 1, 28, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 29, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 1, 1, 1, 1, 
	1, 1, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 1, 1, 
	1, 28, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 31, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 30, 
	30, 30, 30, 30, 30, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 30, 30, 33, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 34, 30, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	38, 35, 39, 35, 40, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 41, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	41, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 42, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 39, 35, 44, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 45, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 46, 43, 47, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 47, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 49, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 49, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 50, 35, 
	35, 35, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 35, 35, 35, 35, 
	35, 35, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 35, 
	35, 51, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 52, 
	35, 53, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	53, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 54, 35, 35, 35, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 35, 35, 35, 35, 35, 35, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 35, 35, 51, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 55, 35, 36, 
	40, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 37, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 38, 35, 56, 57, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 56, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 36, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 37, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 1, 1, 1, 1, 
	1, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	58, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 59, 59, 59, 
	59, 59, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 59, 1, 60, 1, 
	1, 1, 1, 61, 1, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 66, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 65, 63, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 69, 68, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 71, 70, 70, 72, 1, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	1, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 75, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 75, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 1, 1, 1, 
	76, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 77, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 77, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 1, 1, 
	1, 78, 1, 1, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	1, 1, 1, 76, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	79, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 79, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 78, 1, 81, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 83, 80, 84, 80, 85, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 85, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 86, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 84, 80, 88, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 88, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	90, 87, 91, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 91, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 91, 87, 87, 
	87, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 87, 87, 87, 87, 87, 
	87, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 87, 87, 
	89, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 92, 87, 
	93, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 93, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 94, 80, 80, 80, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 80, 80, 80, 80, 80, 80, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 80, 80, 95, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 96, 80, 97, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 97, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 98, 80, 80, 80, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 80, 
	80, 80, 80, 80, 80, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 80, 80, 95, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 99, 80, 100, 101, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 100, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 91, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	92, 87, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 84, 80, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	1, 103, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	103, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 1, 1, 1, 1, 1, 1, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 1, 1, 1, 104, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 1, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	25, 1, 39, 35, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 1, 1, 1, 1, 1, 1, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 1, 108, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 110, 111, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 109, 109, 
	109, 109, 109, 109, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 109, 109, 112, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 113, 109, 115, 116, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 118, 
	114, 119, 114, 120, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	121, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 121, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 122, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 119, 114, 124, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 124, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 123, 
	123, 123, 123, 123, 123, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 123, 123, 125, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 126, 123, 127, 128, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 127, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 130, 131, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 130, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 132, 114, 114, 
	114, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 114, 114, 114, 114, 114, 
	114, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 114, 114, 
	133, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 134, 114, 
	135, 136, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 135, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 137, 114, 114, 114, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 114, 114, 114, 114, 114, 114, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 114, 114, 133, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 138, 114, 115, 139, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 115, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 118, 114, 140, 141, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 140, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 115, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	115, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 115, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 114, 143, 144, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 143, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 146, 142, 142, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 142, 
	142, 142, 142, 145, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	142, 148, 1, 1, 143, 149, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 143, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 142, 142, 142, 
	146, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 142, 145, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 142, 
	103, 150, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 103, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 1, 1, 1, 1, 1, 1, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 1, 1, 1, 151, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 152, 144, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 152, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 146, 
	142, 142, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 142, 142, 142, 
	142, 153, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 147, 142, 152, 
	149, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 152, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 146, 142, 142, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 142, 142, 142, 142, 153, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 147, 142, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 1, 1, 1, 1, 1, 
	1, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 1, 1, 1, 
	154, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 102, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 102, 1, 155, 144, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 155, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 142, 153, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	147, 142, 155, 149, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 155, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 142, 
	153, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 147, 142, 157, 158, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 157, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 156, 
	156, 156, 156, 156, 156, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 156, 156, 159, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 160, 156, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 84, 
	80, 84, 80, 81, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 83, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 82, 80, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 5, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 15, 16, 17, 18, 19, 20, 21, 
	23, 60, 61, 60, 22, 60, 24, 33, 
	63, 30, 32, 25, 27, 28, 26, 26, 
	62, 27, 28, 24, 29, 30, 32, 29, 
	32, 27, 28, 31, 26, 27, 28, 26, 
	33, 34, 64, 36, 37, 40, 38, 66, 
	39, 38, 66, 39, 41, 42, 41, 42, 
	67, 45, 59, 46, 58, 80, 57, 85, 
	49, 50, 51, 92, 92, 50, 51, 48, 
	52, 53, 94, 52, 94, 50, 51, 54, 
	92, 50, 51, 92, 55, 56, 89, 47, 
	58, 45, 59, 65, 64, 68, 77, 79, 
	74, 76, 69, 71, 69, 72, 70, 70, 
	69, 71, 72, 68, 73, 74, 76, 73, 
	68, 76, 71, 69, 72, 75, 70, 71, 
	69, 72, 70, 69, 77, 78, 81, 83, 
	81, 84, 88, 91, 82, 81, 82, 84, 
	86, 87, 87, 90, 48, 55, 95, 53, 
	94, 93
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 4, 0, 0, 0, 0, 0, 2, 
	0, 5, 5, 6, 4, 7, 8, 8, 
	9, 10, 8, 0, 11, 11, 11, 0, 
	12, 0, 0, 0, 0, 2, 0, 11, 
	11, 13, 13, 4, 13, 14, 14, 14, 
	11, 0, 2, 0, 0, 0, 15, 16, 
	15, 0, 17, 0, 15, 15, 0, 0, 
	0, 0, 19, 0, 2, 0, 0, 0, 
	21, 22, 22, 22, 21, 21, 21, 21, 
	21, 23, 21, 22, 22, 24, 24, 25, 
	24, 26, 26, 26, 22, 21, 0, 27, 
	4, 28, 29, 31, 4, 8, 8, 8, 
	10, 8, 0, 11, 11, 11, 11, 0, 
	37, 0, 0, 0, 0, 2, 0, 11, 
	11, 11, 13, 13, 13, 4, 13, 14, 
	14, 14, 14, 41, 11, 11, 43, 43, 
	44, 45, 43, 43, 47, 49, 51, 25, 
	43, 52, 25, 43, 53, 53, 54, 55, 
	53, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 18, 0, 0, 0, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 0, 0, 18, 0, 0, 0, 0, 
	30, 32, 0, 33, 34, 35, 36, 35, 
	35, 34, 38, 39, 40, 34, 35, 35, 
	42, 46, 48, 46, 50, 42, 46, 50, 
	46, 42, 46, 46, 56, 42, 56, 42
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 60;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 35;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 36;
class << self
	attr_accessor :bel_en_list_node
end
self.bel_en_list_node = 43;
class << self
	attr_accessor :bel_en_set_ast
end
self.bel_en_set_ast = 44;
class << self
	attr_accessor :bel_en_set_document
end
self.bel_en_set_document = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 31 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 15 then
		begin

    @opened = true
    p_start = p
  		end
	when 8 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
	when 11 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
	when 37 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 29 then
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 21 then
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 28 then
		begin

    #$stderr.puts 'end_set_keyword'
    # have we accumulated part of the set keyword?
    unless @accum_set
      	begin
		p += 1
		_goto_level = _out
		next
	end

    end
    buf = @incomplete.delete(:set_keyword)
    keyword = ord_to_str(buf)
    if keyword == 'SET'
      @have_set = true
    end
  		end
	when 1 then
		begin

    @buffers[:set] = set()
  		end
	when 2 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 14 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    #$stderr.puts "set_name_end"
    name = @buffers.delete(:ident)
    unless ident.nil?
      @have_name = true
      @buffers[:set_name] = name
    end
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << name(@buffers[:ident])
  		end
	when 53 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 41 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 22 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 19 then
		begin

    #$stderr.puts 'start_set_keyword'
    @incomplete[:set_keyword] = []
  		end
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 43 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 5 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 23 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 26 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 17 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 13 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 44 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 9 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 45 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 16 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 55 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 54 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 24 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 12 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:list])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 52 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 49 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 6 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 57 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 32 then
		begin

    yield @buffers[:ident]
  		end
	when 20 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
	when 18 then
		begin

    #$stderr.puts 'eof_set_keyword'
  		end
	when 48 then
		begin

    #$stderr.puts 'eof_set'
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 35 then
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 42 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 33 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 34 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 36 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 46 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 40 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 38 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 56 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 83, 115, 69, 101, 
	84, 116, 9, 32, 9, 
	100, 79, 111, 67, 99, 
	85, 117, 77, 109, 69, 101, 
	78, 110, 84, 116, 9, 
	32, 9, 122, 9, 122, 
	9, 61, 9, 32, 9, 123, 
	10, 10, 9, 123, 10, 
	122, 10, 122, 9, 125, 
	9, 125, 125, 125, 10, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	123, 123, 9, 122, 9, 
	122, 9, 122, 9, 61, 
	9, 125, 125, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 32, 9, 122, 
	9, 122, 0, 0, 10, 
	10, 125, 125, 9, 44, 
	10, 122, 0, 0, 0, 0, 
	9, 125, 9, 125, 125, 
	125, 10, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 44, 
	9, 123, 10, 10, 0, 0, 
	9, 123, 9, 122, 9, 
	123, 9, 123, 10, 122, 
	9, 32, 9, 123, 9, 123, 
	9, 125, 10, 125, 125, 
	125, 9, 125, 9, 44, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 33, 33, 33, 24, 92, 33, 33, 
	33, 33, 33, 33, 33, 24, 114, 114, 
	53, 24, 115, 1, 115, 113, 113, 117, 
	117, 1, 116, 117, 117, 117, 117, 117, 
	117, 117, 117, 75, 31, 59, 59, 0, 
	54, 54, 0, 1, 114, 114, 114, 53, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 24, 114, 114, 0, 1, 1, 36, 
	113, 0, 0, 117, 117, 1, 116, 117, 
	117, 117, 117, 117, 117, 117, 117, 36, 
	115, 1, 0, 115, 114, 115, 115, 113, 
	24, 115, 115, 117, 116, 1, 117, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 34, 68, 102, 127, 220, 254, 
	288, 322, 356, 390, 424, 458, 483, 598, 
	713, 767, 792, 908, 910, 1026, 1140, 1254, 
	1372, 1490, 1492, 1609, 1727, 1845, 1963, 2081, 
	2199, 2317, 2435, 2553, 2629, 2661, 2721, 2781, 
	2782, 2837, 2892, 2893, 2895, 3010, 3125, 3240, 
	3294, 3412, 3414, 3532, 3650, 3768, 3886, 4004, 
	4122, 4240, 4265, 4380, 4495, 4496, 4498, 4500, 
	4537, 4651, 4652, 4653, 4771, 4889, 4891, 5008, 
	5126, 5244, 5362, 5480, 5598, 5716, 5834, 5952, 
	5989, 6105, 6107, 6108, 6224, 6339, 6455, 6571, 
	6685, 6710, 6826, 6942, 7060, 7177, 7179, 7297
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 1, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	9, 1, 10, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 1, 11, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 1, 12, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 1, 14, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 1, 1, 
	1, 15, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 1, 
	1, 1, 1, 1, 1, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 1, 1, 1, 17, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 20, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	22, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 22, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 21, 21, 21, 21, 21, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 21, 21, 21, 21, 23, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 24, 21, 25, 1, 22, 26, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 22, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 21, 
	21, 21, 21, 21, 21, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	21, 21, 21, 21, 23, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 21, 27, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 1, 1, 1, 1, 1, 1, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 1, 1, 1, 28, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 29, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 1, 1, 1, 1, 
	1, 1, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 1, 1, 
	1, 28, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 31, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 30, 
	30, 30, 30, 30, 30, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 30, 30, 33, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 34, 30, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	38, 35, 39, 35, 40, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 41, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	41, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 42, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 39, 35, 44, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 45, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 46, 43, 47, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 47, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 49, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 49, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 50, 35, 
	35, 35, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 35, 35, 35, 35, 
	35, 35, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 35, 
	35, 51, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 52, 
	35, 53, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	53, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 54, 35, 35, 35, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 35, 35, 35, 35, 35, 35, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 35, 35, 51, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 55, 35, 36, 
	40, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 37, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 38, 35, 56, 57, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 56, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 36, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 37, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 1, 1, 1, 1, 
	1, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	58, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 59, 59, 59, 
	59, 59, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 59, 1, 60, 1, 
	1, 1, 1, 61, 1, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 66, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 65, 63, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 69, 68, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 71, 70, 70, 72, 1, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	1, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 75, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 75, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 1, 1, 1, 
	76, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 77, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 77, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 1, 1, 
	1, 78, 1, 1, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	1, 1, 1, 76, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	79, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 79, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 78, 1, 81, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 83, 80, 84, 80, 85, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 85, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 86, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 84, 80, 88, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 88, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	90, 87, 91, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 91, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 91, 87, 87, 
	87, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 87, 87, 87, 87, 87, 
	87, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 87, 87, 
	89, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 92, 87, 
	93, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 93, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 94, 80, 80, 80, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 80, 80, 80, 80, 80, 80, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 80, 80, 95, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 96, 80, 97, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 97, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 98, 80, 80, 80, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 80, 
	80, 80, 80, 80, 80, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 80, 80, 95, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 99, 80, 100, 101, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 100, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 91, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	92, 87, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 84, 80, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	1, 103, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	103, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 1, 1, 1, 1, 1, 1, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 1, 1, 1, 104, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 1, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	25, 1, 39, 35, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 1, 1, 1, 1, 1, 1, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 1, 108, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 110, 111, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 109, 109, 
	109, 109, 109, 109, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 109, 109, 112, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 113, 109, 115, 116, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 118, 
	114, 119, 114, 120, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	121, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 121, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 122, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 119, 114, 124, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 124, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 123, 
	123, 123, 123, 123, 123, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 123, 123, 125, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 126, 123, 127, 128, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 127, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 130, 131, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 130, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 132, 114, 114, 
	114, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 114, 114, 114, 114, 114, 
	114, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 114, 114, 
	133, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 134, 114, 
	135, 136, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 135, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 137, 114, 114, 114, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 114, 114, 114, 114, 114, 114, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 114, 114, 133, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 138, 114, 115, 139, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 115, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 118, 114, 140, 141, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 140, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 115, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	115, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 115, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 114, 143, 144, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 143, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 146, 142, 142, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 142, 
	142, 142, 142, 145, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	142, 148, 1, 1, 143, 149, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 143, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 142, 142, 142, 
	146, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 142, 145, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 142, 
	103, 150, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 103, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 1, 1, 1, 1, 1, 1, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 1, 1, 1, 151, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 152, 144, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 152, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 146, 
	142, 142, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 142, 142, 142, 
	142, 153, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 147, 142, 152, 
	149, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 152, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 146, 142, 142, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 142, 142, 142, 142, 153, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 147, 142, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 1, 1, 1, 1, 1, 
	1, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 1, 1, 1, 
	154, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 102, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 102, 1, 155, 144, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 155, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 142, 153, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	147, 142, 155, 149, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 155, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 142, 
	153, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 147, 142, 157, 158, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 157, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 156, 
	156, 156, 156, 156, 156, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 156, 156, 159, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 160, 156, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 84, 
	80, 84, 80, 81, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 83, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 82, 80, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 5, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 15, 16, 17, 18, 19, 20, 21, 
	23, 60, 61, 60, 22, 60, 24, 33, 
	63, 30, 32, 25, 27, 28, 26, 26, 
	62, 27, 28, 24, 29, 30, 32, 29, 
	32, 27, 28, 31, 26, 27, 28, 26, 
	33, 34, 64, 36, 37, 40, 38, 66, 
	39, 38, 66, 39, 41, 42, 41, 42, 
	67, 45, 59, 46, 58, 80, 57, 85, 
	49, 50, 51, 92, 92, 50, 51, 48, 
	52, 53, 94, 52, 94, 50, 51, 54, 
	92, 50, 51, 92, 55, 56, 89, 47, 
	58, 45, 59, 65, 64, 68, 77, 79, 
	74, 76, 69, 71, 69, 72, 70, 70, 
	69, 71, 72, 68, 73, 74, 76, 73, 
	68, 76, 71, 69, 72, 75, 70, 71, 
	69, 72, 70, 69, 77, 78, 81, 83, 
	81, 84, 88, 91, 82, 81, 82, 84, 
	86, 87, 87, 90, 48, 55, 95, 53, 
	94, 93
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 4, 0, 0, 0, 0, 0, 2, 
	0, 5, 5, 6, 4, 7, 8, 8, 
	9, 10, 8, 0, 11, 11, 11, 0, 
	12, 0, 0, 0, 0, 2, 0, 11, 
	11, 13, 13, 4, 13, 14, 14, 14, 
	11, 0, 2, 0, 0, 0, 15, 16, 
	15, 0, 17, 0, 15, 15, 0, 0, 
	0, 0, 19, 0, 2, 0, 0, 0, 
	21, 22, 22, 22, 21, 21, 21, 21, 
	21, 23, 21, 22, 22, 24, 24, 25, 
	24, 26, 26, 26, 22, 21, 0, 27, 
	4, 28, 29, 31, 4, 8, 8, 8, 
	10, 8, 0, 11, 11, 11, 11, 0, 
	37, 0, 0, 0, 0, 2, 0, 11, 
	11, 11, 13, 13, 13, 4, 13, 14, 
	14, 14, 14, 41, 11, 11, 43, 43, 
	44, 45, 43, 43, 47, 49, 51, 25, 
	43, 52, 25, 43, 53, 53, 54, 55, 
	53, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 18, 0, 0, 0, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 0, 0, 18, 0, 0, 0, 0, 
	30, 32, 0, 33, 34, 35, 36, 35, 
	35, 34, 38, 39, 40, 34, 35, 35, 
	42, 46, 48, 46, 50, 42, 46, 50, 
	46, 42, 46, 46, 56, 42, 56, 42
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 60;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 35;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 36;
class << self
	attr_accessor :bel_en_list_node
end
self.bel_en_list_node = 43;
class << self
	attr_accessor :bel_en_set_ast
end
self.bel_en_set_ast = 44;
class << self
	attr_accessor :bel_en_set_document
end
self.bel_en_set_document = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 31 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 15 then
		begin

    @opened = true
    p_start = p
  		end
	when 8 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
	when 11 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
	when 37 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 29 then
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 21 then
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 28 then
		begin

    #$stderr.puts 'end_set_keyword'
    # have we accumulated part of the set keyword?
    unless @accum_set
      	begin
		p += 1
		_goto_level = _out
		next
	end

    end
    buf = @incomplete.delete(:set_keyword)
    keyword = ord_to_str(buf)
    if keyword == 'SET'
      @have_set = true
    end
  		end
	when 1 then
		begin

    @buffers[:set] = set()
  		end
	when 2 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 14 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    #$stderr.puts "set_name_end"
    name = @buffers.delete(:ident)
    unless ident.nil?
      @have_name = true
      @buffers[:set_name] = name
    end
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << name(@buffers[:ident])
  		end
	when 53 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 41 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 22 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 19 then
		begin

    #$stderr.puts 'start_set_keyword'
    @incomplete[:set_keyword] = []
  		end
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 43 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 5 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 23 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 26 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 17 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 13 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 44 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 9 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 45 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 16 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 55 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 54 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 24 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 12 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:list])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 52 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 49 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 6 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 57 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 32 then
		begin

    yield @buffers[:ident]
  		end
	when 20 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
	when 18 then
		begin

    #$stderr.puts 'eof_set_keyword'
  		end
	when 48 then
		begin

    #$stderr.puts 'eof_set'
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 35 then
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 42 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 33 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 34 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 36 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 46 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 40 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 38 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 56 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 83, 115, 69, 101, 
	84, 116, 9, 32, 9, 
	100, 79, 111, 67, 99, 
	85, 117, 77, 109, 69, 101, 
	78, 110, 84, 116, 9, 
	32, 9, 122, 9, 122, 
	9, 61, 9, 32, 9, 123, 
	10, 10, 9, 123, 10, 
	122, 10, 122, 9, 125, 
	9, 125, 125, 125, 10, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	123, 123, 9, 122, 9, 
	122, 9, 122, 9, 61, 
	9, 125, 125, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 32, 9, 122, 
	9, 122, 0, 0, 10, 
	10, 125, 125, 9, 44, 
	10, 122, 0, 0, 0, 0, 
	9, 125, 9, 125, 125, 
	125, 10, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 44, 
	9, 123, 10, 10, 0, 0, 
	9, 123, 9, 122, 9, 
	123, 9, 123, 10, 122, 
	9, 32, 9, 123, 9, 123, 
	9, 125, 10, 125, 125, 
	125, 9, 125, 9, 44, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 33, 33, 33, 24, 92, 33, 33, 
	33, 33, 33, 33, 33, 24, 114, 114, 
	53, 24, 115, 1, 115, 113, 113, 117, 
	117, 1, 116, 117, 117, 117, 117, 117, 
	117, 117, 117, 75, 31, 59, 59, 0, 
	54, 54, 0, 1, 114, 114, 114, 53, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 24, 114, 114, 0, 1, 1, 36, 
	113, 0, 0, 117, 117, 1, 116, 117, 
	117, 117, 117, 117, 117, 117, 117, 36, 
	115, 1, 0, 115, 114, 115, 115, 113, 
	24, 115, 115, 117, 116, 1, 117, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 34, 68, 102, 127, 220, 254, 
	288, 322, 356, 390, 424, 458, 483, 598, 
	713, 767, 792, 908, 910, 1026, 1140, 1254, 
	1372, 1490, 1492, 1609, 1727, 1845, 1963, 2081, 
	2199, 2317, 2435, 2553, 2629, 2661, 2721, 2781, 
	2782, 2837, 2892, 2893, 2895, 3010, 3125, 3240, 
	3294, 3412, 3414, 3532, 3650, 3768, 3886, 4004, 
	4122, 4240, 4265, 4380, 4495, 4496, 4498, 4500, 
	4537, 4651, 4652, 4653, 4771, 4889, 4891, 5008, 
	5126, 5244, 5362, 5480, 5598, 5716, 5834, 5952, 
	5989, 6105, 6107, 6108, 6224, 6339, 6455, 6571, 
	6685, 6710, 6826, 6942, 7060, 7177, 7179, 7297
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 1, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	9, 1, 10, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 1, 11, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 1, 12, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 1, 14, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 1, 1, 
	1, 15, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 1, 
	1, 1, 1, 1, 1, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 1, 1, 1, 17, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 20, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	22, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 22, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 21, 21, 21, 21, 21, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 21, 21, 21, 21, 23, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 24, 21, 25, 1, 22, 26, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 22, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 21, 
	21, 21, 21, 21, 21, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	21, 21, 21, 21, 23, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 21, 27, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 1, 1, 1, 1, 1, 1, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 1, 1, 1, 28, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 29, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 1, 1, 1, 1, 
	1, 1, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 1, 1, 
	1, 28, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 31, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 30, 
	30, 30, 30, 30, 30, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 30, 30, 33, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 34, 30, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	38, 35, 39, 35, 40, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 41, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	41, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 42, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 39, 35, 44, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 45, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 46, 43, 47, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 47, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 49, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 49, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 50, 35, 
	35, 35, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 35, 35, 35, 35, 
	35, 35, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 35, 
	35, 51, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 52, 
	35, 53, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	53, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 54, 35, 35, 35, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 35, 35, 35, 35, 35, 35, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 35, 35, 51, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 55, 35, 36, 
	40, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 37, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 38, 35, 56, 57, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 56, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 36, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 37, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 1, 1, 1, 1, 
	1, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	58, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 59, 59, 59, 
	59, 59, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 59, 1, 60, 1, 
	1, 1, 1, 61, 1, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 66, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 65, 63, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 69, 68, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 71, 70, 70, 72, 1, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	1, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 75, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 75, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 1, 1, 1, 
	76, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 77, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 77, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 1, 1, 
	1, 78, 1, 1, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	1, 1, 1, 76, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	79, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 79, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 78, 1, 81, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 83, 80, 84, 80, 85, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 85, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 86, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 84, 80, 88, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 88, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	90, 87, 91, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 91, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 91, 87, 87, 
	87, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 87, 87, 87, 87, 87, 
	87, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 87, 87, 
	89, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 92, 87, 
	93, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 93, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 94, 80, 80, 80, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 80, 80, 80, 80, 80, 80, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 80, 80, 95, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 96, 80, 97, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 97, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 98, 80, 80, 80, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 80, 
	80, 80, 80, 80, 80, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 80, 80, 95, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 99, 80, 100, 101, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 100, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 91, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	92, 87, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 84, 80, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	1, 103, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	103, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 1, 1, 1, 1, 1, 1, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 1, 1, 1, 104, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 1, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	25, 1, 39, 35, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 1, 1, 1, 1, 1, 1, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 1, 108, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 110, 111, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 109, 109, 
	109, 109, 109, 109, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 109, 109, 112, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 113, 109, 115, 116, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 118, 
	114, 119, 114, 120, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	121, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 121, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 122, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 119, 114, 124, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 124, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 123, 
	123, 123, 123, 123, 123, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 123, 123, 125, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 126, 123, 127, 128, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 127, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 130, 131, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 130, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 132, 114, 114, 
	114, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 114, 114, 114, 114, 114, 
	114, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 114, 114, 
	133, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 134, 114, 
	135, 136, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 135, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 137, 114, 114, 114, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 114, 114, 114, 114, 114, 114, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 114, 114, 133, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 138, 114, 115, 139, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 115, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 118, 114, 140, 141, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 140, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 115, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	115, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 115, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 114, 143, 144, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 143, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 146, 142, 142, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 142, 
	142, 142, 142, 145, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	142, 148, 1, 1, 143, 149, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 143, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 142, 142, 142, 
	146, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 142, 145, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 142, 
	103, 150, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 103, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 1, 1, 1, 1, 1, 1, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 1, 1, 1, 151, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 152, 144, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 152, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 146, 
	142, 142, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 142, 142, 142, 
	142, 153, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 147, 142, 152, 
	149, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 152, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 146, 142, 142, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 142, 142, 142, 142, 153, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 147, 142, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 1, 1, 1, 1, 1, 
	1, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 1, 1, 1, 
	154, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 102, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 102, 1, 155, 144, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 155, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 142, 153, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	147, 142, 155, 149, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 155, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 142, 
	153, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 147, 142, 157, 158, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 157, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 156, 
	156, 156, 156, 156, 156, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 156, 156, 159, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 160, 156, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 84, 
	80, 84, 80, 81, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 83, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 82, 80, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 5, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 15, 16, 17, 18, 19, 20, 21, 
	23, 60, 61, 60, 22, 60, 24, 33, 
	63, 30, 32, 25, 27, 28, 26, 26, 
	62, 27, 28, 24, 29, 30, 32, 29, 
	32, 27, 28, 31, 26, 27, 28, 26, 
	33, 34, 64, 36, 37, 40, 38, 66, 
	39, 38, 66, 39, 41, 42, 41, 42, 
	67, 45, 59, 46, 58, 80, 57, 85, 
	49, 50, 51, 92, 92, 50, 51, 48, 
	52, 53, 94, 52, 94, 50, 51, 54, 
	92, 50, 51, 92, 55, 56, 89, 47, 
	58, 45, 59, 65, 64, 68, 77, 79, 
	74, 76, 69, 71, 69, 72, 70, 70, 
	69, 71, 72, 68, 73, 74, 76, 73, 
	68, 76, 71, 69, 72, 75, 70, 71, 
	69, 72, 70, 69, 77, 78, 81, 83, 
	81, 84, 88, 91, 82, 81, 82, 84, 
	86, 87, 87, 90, 48, 55, 95, 53, 
	94, 93
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 4, 0, 0, 0, 0, 0, 2, 
	0, 5, 5, 6, 4, 7, 8, 8, 
	9, 10, 8, 0, 11, 11, 11, 0, 
	12, 0, 0, 0, 0, 2, 0, 11, 
	11, 13, 13, 4, 13, 14, 14, 14, 
	11, 0, 2, 0, 0, 0, 15, 16, 
	15, 0, 17, 0, 15, 15, 0, 0, 
	0, 0, 19, 0, 2, 0, 0, 0, 
	21, 22, 22, 22, 21, 21, 21, 21, 
	21, 23, 21, 22, 22, 24, 24, 25, 
	24, 26, 26, 26, 22, 21, 0, 27, 
	4, 28, 29, 31, 4, 8, 8, 8, 
	10, 8, 0, 11, 11, 11, 11, 0, 
	37, 0, 0, 0, 0, 2, 0, 11, 
	11, 11, 13, 13, 13, 4, 13, 14, 
	14, 14, 14, 41, 11, 11, 43, 43, 
	44, 45, 43, 43, 47, 49, 51, 25, 
	43, 52, 25, 43, 53, 53, 54, 55, 
	53, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 18, 0, 0, 0, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 0, 0, 18, 0, 0, 0, 0, 
	30, 32, 0, 33, 34, 35, 36, 35, 
	35, 34, 38, 39, 40, 34, 35, 35, 
	42, 46, 48, 46, 50, 42, 46, 50, 
	46, 42, 46, 46, 56, 42, 56, 42
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 60;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 35;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 36;
class << self
	attr_accessor :bel_en_list_node
end
self.bel_en_list_node = 43;
class << self
	attr_accessor :bel_en_set_ast
end
self.bel_en_set_ast = 44;
class << self
	attr_accessor :bel_en_set_document
end
self.bel_en_set_document = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 31 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 15 then
		begin

    @opened = true
    p_start = p
  		end
	when 8 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
	when 11 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
	when 37 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 29 then
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 21 then
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 28 then
		begin

    #$stderr.puts 'end_set_keyword'
    # have we accumulated part of the set keyword?
    unless @accum_set
      	begin
		p += 1
		_goto_level = _out
		next
	end

    end
    buf = @incomplete.delete(:set_keyword)
    keyword = ord_to_str(buf)
    if keyword == 'SET'
      @have_set = true
    end
  		end
	when 1 then
		begin

    @buffers[:set] = set()
  		end
	when 2 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 14 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    #$stderr.puts "set_name_end"
    name = @buffers.delete(:ident)
    unless ident.nil?
      @have_name = true
      @buffers[:set_name] = name
    end
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << name(@buffers[:ident])
  		end
	when 53 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 41 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 22 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 19 then
		begin

    #$stderr.puts 'start_set_keyword'
    @incomplete[:set_keyword] = []
  		end
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 43 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 5 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 23 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 26 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 17 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 13 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 44 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 9 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 45 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 16 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 55 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 54 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 24 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 12 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:list])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 52 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 49 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 6 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 57 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 32 then
		begin

    yield @buffers[:ident]
  		end
	when 20 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
	when 18 then
		begin

    #$stderr.puts 'eof_set_keyword'
  		end
	when 48 then
		begin

    #$stderr.puts 'eof_set'
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 35 then
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 42 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 33 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 34 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 36 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 46 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 40 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 38 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 56 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 83, 115, 69, 101, 
	84, 116, 9, 32, 9, 
	100, 79, 111, 67, 99, 
	85, 117, 77, 109, 69, 101, 
	78, 110, 84, 116, 9, 
	32, 9, 122, 9, 122, 
	9, 61, 9, 32, 9, 123, 
	10, 10, 9, 123, 10, 
	122, 10, 122, 9, 125, 
	9, 125, 125, 125, 10, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	123, 123, 9, 122, 9, 
	122, 9, 122, 9, 61, 
	9, 125, 125, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 32, 9, 122, 
	9, 122, 0, 0, 10, 
	10, 125, 125, 9, 44, 
	10, 122, 0, 0, 0, 0, 
	9, 125, 9, 125, 125, 
	125, 10, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 44, 
	9, 123, 10, 10, 0, 0, 
	9, 123, 9, 122, 9, 
	123, 9, 123, 10, 122, 
	9, 32, 9, 123, 9, 123, 
	9, 125, 10, 125, 125, 
	125, 9, 125, 9, 44, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 33, 33, 33, 24, 92, 33, 33, 
	33, 33, 33, 33, 33, 24, 114, 114, 
	53, 24, 115, 1, 115, 113, 113, 117, 
	117, 1, 116, 117, 117, 117, 117, 117, 
	117, 117, 117, 75, 31, 59, 59, 0, 
	54, 54, 0, 1, 114, 114, 114, 53, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 24, 114, 114, 0, 1, 1, 36, 
	113, 0, 0, 117, 117, 1, 116, 117, 
	117, 117, 117, 117, 117, 117, 117, 36, 
	115, 1, 0, 115, 114, 115, 115, 113, 
	24, 115, 115, 117, 116, 1, 117, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 34, 68, 102, 127, 220, 254, 
	288, 322, 356, 390, 424, 458, 483, 598, 
	713, 767, 792, 908, 910, 1026, 1140, 1254, 
	1372, 1490, 1492, 1609, 1727, 1845, 1963, 2081, 
	2199, 2317, 2435, 2553, 2629, 2661, 2721, 2781, 
	2782, 2837, 2892, 2893, 2895, 3010, 3125, 3240, 
	3294, 3412, 3414, 3532, 3650, 3768, 3886, 4004, 
	4122, 4240, 4265, 4380, 4495, 4496, 4498, 4500, 
	4537, 4651, 4652, 4653, 4771, 4889, 4891, 5008, 
	5126, 5244, 5362, 5480, 5598, 5716, 5834, 5952, 
	5989, 6105, 6107, 6108, 6224, 6339, 6455, 6571, 
	6685, 6710, 6826, 6942, 7060, 7177, 7179, 7297
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 1, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	9, 1, 10, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 1, 11, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 1, 12, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 1, 14, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 1, 1, 
	1, 15, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 1, 
	1, 1, 1, 1, 1, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 1, 1, 1, 17, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 20, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	22, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 22, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 21, 21, 21, 21, 21, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 21, 21, 21, 21, 23, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 24, 21, 25, 1, 22, 26, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 22, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 21, 
	21, 21, 21, 21, 21, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	21, 21, 21, 21, 23, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 21, 27, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 1, 1, 1, 1, 1, 1, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 1, 1, 1, 28, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 29, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 1, 1, 1, 1, 
	1, 1, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 1, 1, 
	1, 28, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 31, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 30, 
	30, 30, 30, 30, 30, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 30, 30, 33, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 34, 30, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	38, 35, 39, 35, 40, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 41, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	41, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 42, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 39, 35, 44, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 45, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 46, 43, 47, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 47, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 49, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 49, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 50, 35, 
	35, 35, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 35, 35, 35, 35, 
	35, 35, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 35, 
	35, 51, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 52, 
	35, 53, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	53, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 54, 35, 35, 35, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 35, 35, 35, 35, 35, 35, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 35, 35, 51, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 55, 35, 36, 
	40, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 37, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 38, 35, 56, 57, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 56, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 36, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 37, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 1, 1, 1, 1, 
	1, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	58, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 59, 59, 59, 
	59, 59, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 59, 1, 60, 1, 
	1, 1, 1, 61, 1, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 66, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 65, 63, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 69, 68, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 71, 70, 70, 72, 1, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	1, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 75, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 75, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 1, 1, 1, 
	76, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 77, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 77, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 1, 1, 
	1, 78, 1, 1, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	1, 1, 1, 76, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	79, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 79, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 78, 1, 81, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 83, 80, 84, 80, 85, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 85, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 86, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 84, 80, 88, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 88, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	90, 87, 91, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 91, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 91, 87, 87, 
	87, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 87, 87, 87, 87, 87, 
	87, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 87, 87, 
	89, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 92, 87, 
	93, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 93, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 94, 80, 80, 80, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 80, 80, 80, 80, 80, 80, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 80, 80, 95, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 96, 80, 97, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 97, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 98, 80, 80, 80, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 80, 
	80, 80, 80, 80, 80, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 80, 80, 95, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 99, 80, 100, 101, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 100, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 91, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	92, 87, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 84, 80, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	1, 103, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	103, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 1, 1, 1, 1, 1, 1, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 1, 1, 1, 104, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 1, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	25, 1, 39, 35, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 1, 1, 1, 1, 1, 1, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 1, 108, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 110, 111, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 109, 109, 
	109, 109, 109, 109, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 109, 109, 112, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 113, 109, 115, 116, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 118, 
	114, 119, 114, 120, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	121, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 121, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 122, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 119, 114, 124, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 124, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 123, 
	123, 123, 123, 123, 123, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 123, 123, 125, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 126, 123, 127, 128, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 127, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 130, 131, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 130, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 132, 114, 114, 
	114, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 114, 114, 114, 114, 114, 
	114, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 114, 114, 
	133, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 134, 114, 
	135, 136, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 135, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 137, 114, 114, 114, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 114, 114, 114, 114, 114, 114, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 114, 114, 133, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 138, 114, 115, 139, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 115, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 118, 114, 140, 141, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 140, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 115, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	115, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 115, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 114, 143, 144, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 143, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 146, 142, 142, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 142, 
	142, 142, 142, 145, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	142, 148, 1, 1, 143, 149, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 143, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 142, 142, 142, 
	146, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 142, 145, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 142, 
	103, 150, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 103, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 1, 1, 1, 1, 1, 1, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 1, 1, 1, 151, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 152, 144, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 152, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 146, 
	142, 142, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 142, 142, 142, 
	142, 153, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 147, 142, 152, 
	149, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 152, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 146, 142, 142, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 142, 142, 142, 142, 153, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 147, 142, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 1, 1, 1, 1, 1, 
	1, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 1, 1, 1, 
	154, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 102, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 102, 1, 155, 144, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 155, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 142, 153, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	147, 142, 155, 149, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 155, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 142, 
	153, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 147, 142, 157, 158, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 157, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 156, 
	156, 156, 156, 156, 156, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 156, 156, 159, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 160, 156, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 84, 
	80, 84, 80, 81, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 83, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 82, 80, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 5, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 15, 16, 17, 18, 19, 20, 21, 
	23, 60, 61, 60, 22, 60, 24, 33, 
	63, 30, 32, 25, 27, 28, 26, 26, 
	62, 27, 28, 24, 29, 30, 32, 29, 
	32, 27, 28, 31, 26, 27, 28, 26, 
	33, 34, 64, 36, 37, 40, 38, 66, 
	39, 38, 66, 39, 41, 42, 41, 42, 
	67, 45, 59, 46, 58, 80, 57, 85, 
	49, 50, 51, 92, 92, 50, 51, 48, 
	52, 53, 94, 52, 94, 50, 51, 54, 
	92, 50, 51, 92, 55, 56, 89, 47, 
	58, 45, 59, 65, 64, 68, 77, 79, 
	74, 76, 69, 71, 69, 72, 70, 70, 
	69, 71, 72, 68, 73, 74, 76, 73, 
	68, 76, 71, 69, 72, 75, 70, 71, 
	69, 72, 70, 69, 77, 78, 81, 83, 
	81, 84, 88, 91, 82, 81, 82, 84, 
	86, 87, 87, 90, 48, 55, 95, 53, 
	94, 93
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 4, 0, 0, 0, 0, 0, 2, 
	0, 5, 5, 6, 4, 7, 8, 8, 
	9, 10, 8, 0, 11, 11, 11, 0, 
	12, 0, 0, 0, 0, 2, 0, 11, 
	11, 13, 13, 4, 13, 14, 14, 14, 
	11, 0, 2, 0, 0, 0, 15, 16, 
	15, 0, 17, 0, 15, 15, 0, 0, 
	0, 0, 19, 0, 2, 0, 0, 0, 
	21, 22, 22, 22, 21, 21, 21, 21, 
	21, 23, 21, 22, 22, 24, 24, 25, 
	24, 26, 26, 26, 22, 21, 0, 27, 
	4, 28, 29, 31, 4, 8, 8, 8, 
	10, 8, 0, 11, 11, 11, 11, 0, 
	37, 0, 0, 0, 0, 2, 0, 11, 
	11, 11, 13, 13, 13, 4, 13, 14, 
	14, 14, 14, 41, 11, 11, 43, 43, 
	44, 45, 43, 43, 47, 49, 51, 25, 
	43, 52, 25, 43, 53, 53, 54, 55, 
	53, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 18, 0, 0, 0, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 0, 0, 18, 0, 0, 0, 0, 
	30, 32, 0, 33, 34, 35, 36, 35, 
	35, 34, 38, 39, 40, 34, 35, 35, 
	42, 46, 48, 46, 50, 42, 46, 50, 
	46, 42, 46, 46, 56, 42, 56, 42
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 60;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 35;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 36;
class << self
	attr_accessor :bel_en_list_node
end
self.bel_en_list_node = 43;
class << self
	attr_accessor :bel_en_set_ast
end
self.bel_en_set_ast = 44;
class << self
	attr_accessor :bel_en_set_document
end
self.bel_en_set_document = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 31 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 15 then
		begin

    @opened = true
    p_start = p
  		end
	when 8 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
	when 11 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
	when 37 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 29 then
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 21 then
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 28 then
		begin

    #$stderr.puts 'end_set_keyword'
    # have we accumulated part of the set keyword?
    unless @accum_set
      	begin
		p += 1
		_goto_level = _out
		next
	end

    end
    buf = @incomplete.delete(:set_keyword)
    keyword = ord_to_str(buf)
    if keyword == 'SET'
      @have_set = true
    end
  		end
	when 1 then
		begin

    @buffers[:set] = set()
  		end
	when 2 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 14 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    #$stderr.puts "set_name_end"
    name = @buffers.delete(:ident)
    unless ident.nil?
      @have_name = true
      @buffers[:set_name] = name
    end
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << name(@buffers[:ident])
  		end
	when 53 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 41 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 22 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 19 then
		begin

    #$stderr.puts 'start_set_keyword'
    @incomplete[:set_keyword] = []
  		end
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 43 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 5 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 23 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 26 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 17 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 13 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 44 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 9 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 45 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 16 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 55 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 54 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 24 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 12 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:list])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 52 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 49 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 6 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 57 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 32 then
		begin

    yield @buffers[:ident]
  		end
	when 20 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
	when 18 then
		begin

    #$stderr.puts 'eof_set_keyword'
  		end
	when 48 then
		begin

    #$stderr.puts 'eof_set'
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 35 then
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 42 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 33 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 34 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 36 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 46 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 40 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 38 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 56 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module BELScript
      module SetDocument

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 83, 115, 69, 101, 
	84, 116, 9, 32, 9, 
	100, 79, 111, 67, 99, 
	85, 117, 77, 109, 69, 101, 
	78, 110, 84, 116, 9, 
	32, 9, 122, 9, 122, 
	9, 61, 9, 32, 9, 123, 
	10, 10, 9, 123, 10, 
	122, 10, 122, 9, 125, 
	9, 125, 125, 125, 10, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	123, 123, 9, 122, 9, 
	122, 9, 122, 9, 61, 
	9, 125, 125, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 125, 
	9, 125, 9, 32, 9, 122, 
	9, 122, 0, 0, 10, 
	10, 125, 125, 9, 44, 
	10, 122, 0, 0, 0, 0, 
	9, 125, 9, 125, 125, 
	125, 10, 125, 9, 125, 
	9, 125, 9, 125, 9, 125, 
	9, 125, 9, 125, 9, 
	125, 9, 125, 9, 44, 
	9, 123, 10, 10, 0, 0, 
	9, 123, 9, 122, 9, 
	123, 9, 123, 10, 122, 
	9, 32, 9, 123, 9, 123, 
	9, 125, 10, 125, 125, 
	125, 9, 125, 9, 44, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 33, 33, 33, 24, 92, 33, 33, 
	33, 33, 33, 33, 33, 24, 114, 114, 
	53, 24, 115, 1, 115, 113, 113, 117, 
	117, 1, 116, 117, 117, 117, 117, 117, 
	117, 117, 117, 75, 31, 59, 59, 0, 
	54, 54, 0, 1, 114, 114, 114, 53, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 24, 114, 114, 0, 1, 1, 36, 
	113, 0, 0, 117, 117, 1, 116, 117, 
	117, 117, 117, 117, 117, 117, 117, 36, 
	115, 1, 0, 115, 114, 115, 115, 113, 
	24, 115, 115, 117, 116, 1, 117, 36
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 34, 68, 102, 127, 220, 254, 
	288, 322, 356, 390, 424, 458, 483, 598, 
	713, 767, 792, 908, 910, 1026, 1140, 1254, 
	1372, 1490, 1492, 1609, 1727, 1845, 1963, 2081, 
	2199, 2317, 2435, 2553, 2629, 2661, 2721, 2781, 
	2782, 2837, 2892, 2893, 2895, 3010, 3125, 3240, 
	3294, 3412, 3414, 3532, 3650, 3768, 3886, 4004, 
	4122, 4240, 4265, 4380, 4495, 4496, 4498, 4500, 
	4537, 4651, 4652, 4653, 4771, 4889, 4891, 5008, 
	5126, 5244, 5362, 5480, 5598, 5716, 5834, 5952, 
	5989, 6105, 6107, 6108, 6224, 6339, 6455, 6571, 
	6685, 6710, 6826, 6942, 7060, 7177, 7179, 7297
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 1, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	9, 1, 10, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 1, 11, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 1, 12, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 1, 14, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 1, 1, 1, 1, 
	1, 1, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 1, 1, 
	1, 15, 1, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 1, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 1, 
	1, 1, 1, 1, 1, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 1, 1, 1, 17, 1, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	1, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 20, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	22, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 22, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 21, 21, 21, 21, 21, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 21, 21, 21, 21, 23, 21, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 24, 21, 25, 1, 22, 26, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 22, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 21, 
	21, 21, 21, 21, 21, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	21, 21, 21, 21, 23, 21, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 21, 27, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 1, 1, 1, 1, 1, 1, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 1, 1, 1, 28, 
	1, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 1, 29, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 1, 1, 1, 1, 
	1, 1, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 1, 1, 
	1, 28, 1, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 1, 31, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 30, 
	30, 30, 30, 30, 30, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 30, 30, 33, 30, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	30, 30, 34, 30, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	38, 35, 39, 35, 40, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 41, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	41, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 42, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 39, 35, 44, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 45, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 46, 43, 47, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 47, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 49, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 49, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 50, 35, 
	35, 35, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 35, 35, 35, 35, 
	35, 35, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 35, 
	35, 51, 35, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 35, 35, 52, 
	35, 53, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	53, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 54, 35, 35, 35, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 35, 35, 35, 35, 35, 35, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 35, 35, 51, 
	35, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 35, 35, 55, 35, 36, 
	40, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 36, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 37, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 38, 35, 56, 57, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 56, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	47, 43, 43, 43, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 43, 43, 
	43, 43, 43, 43, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 43, 43, 45, 43, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 43, 
	43, 48, 43, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 36, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 37, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	35, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 1, 1, 1, 1, 
	1, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 1, 1, 1, 
	58, 1, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 1, 59, 59, 59, 
	59, 59, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 59, 1, 60, 1, 
	1, 1, 1, 61, 1, 63, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 66, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 65, 65, 63, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 69, 68, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 71, 70, 70, 72, 1, 73, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 73, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	1, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 1, 1, 1, 1, 1, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 1, 75, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 75, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 1, 1, 1, 
	76, 1, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 1, 77, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 77, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 1, 1, 
	1, 78, 1, 1, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	1, 1, 1, 76, 1, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 1, 
	79, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 79, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 78, 1, 81, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 83, 80, 84, 80, 85, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 85, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 86, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 84, 80, 88, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 88, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	90, 87, 91, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 91, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 91, 87, 87, 
	87, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 87, 87, 87, 87, 87, 
	87, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 87, 87, 
	89, 87, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 87, 87, 92, 87, 
	93, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 93, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 94, 80, 80, 80, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 80, 80, 80, 80, 80, 80, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 80, 80, 95, 80, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 80, 80, 96, 80, 97, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 97, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 98, 80, 80, 80, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 80, 
	80, 80, 80, 80, 80, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 80, 80, 95, 80, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	80, 80, 99, 80, 100, 101, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 100, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 91, 
	87, 87, 87, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 87, 87, 87, 
	87, 87, 87, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	87, 87, 89, 87, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 87, 87, 
	92, 87, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 84, 80, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	1, 103, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	103, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 1, 1, 1, 1, 1, 1, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 1, 1, 1, 104, 
	1, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 1, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 1, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	1, 1, 1, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 1, 1, 
	25, 1, 39, 35, 36, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 37, 
	35, 107, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 1, 1, 1, 1, 1, 1, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 1, 108, 1, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 1, 1, 1, 110, 111, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 110, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 109, 109, 
	109, 109, 109, 109, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 109, 109, 112, 109, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 109, 
	109, 113, 109, 115, 116, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 117, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 118, 
	114, 119, 114, 120, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	121, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 121, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 122, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 119, 114, 124, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 124, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 123, 
	123, 123, 123, 123, 123, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 123, 123, 125, 123, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	123, 123, 126, 123, 127, 128, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 127, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 130, 131, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 130, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 132, 114, 114, 
	114, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 114, 114, 114, 114, 114, 
	114, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 114, 114, 
	133, 114, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 114, 114, 134, 114, 
	135, 136, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 135, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 137, 114, 114, 114, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 114, 114, 114, 114, 114, 114, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 114, 114, 133, 114, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 114, 114, 138, 114, 115, 139, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 115, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 117, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 118, 114, 140, 141, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 140, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 127, 
	123, 123, 123, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 123, 123, 123, 
	123, 123, 123, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	123, 123, 125, 123, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 123, 123, 
	129, 123, 115, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 115, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 117, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 119, 114, 
	115, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 115, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 117, 114, 143, 144, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 143, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 146, 142, 142, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 142, 
	142, 142, 142, 145, 142, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	142, 148, 1, 1, 143, 149, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 143, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 142, 142, 142, 
	146, 142, 142, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 142, 142, 
	142, 142, 145, 142, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 147, 142, 
	103, 150, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 103, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 1, 1, 1, 1, 1, 1, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 1, 1, 1, 151, 1, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 1, 152, 144, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 152, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 146, 
	142, 142, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 142, 142, 142, 
	142, 153, 142, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 147, 142, 152, 
	149, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 152, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 146, 142, 142, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 142, 142, 142, 142, 153, 142, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 147, 142, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 1, 1, 1, 1, 1, 
	1, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 1, 1, 1, 
	154, 1, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 1, 102, 148, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 102, 1, 155, 144, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 155, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 142, 
	142, 142, 142, 142, 142, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	142, 142, 142, 142, 153, 142, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	147, 142, 155, 149, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 155, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 142, 142, 142, 142, 142, 
	142, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 142, 142, 142, 142, 
	153, 142, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 147, 142, 157, 158, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 157, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 156, 
	156, 156, 156, 156, 156, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 156, 156, 159, 156, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	156, 156, 160, 156, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 84, 
	80, 84, 80, 81, 161, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 82, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 83, 
	80, 81, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	81, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 82, 80, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 5, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 15, 16, 17, 18, 19, 20, 21, 
	23, 60, 61, 60, 22, 60, 24, 33, 
	63, 30, 32, 25, 27, 28, 26, 26, 
	62, 27, 28, 24, 29, 30, 32, 29, 
	32, 27, 28, 31, 26, 27, 28, 26, 
	33, 34, 64, 36, 37, 40, 38, 66, 
	39, 38, 66, 39, 41, 42, 41, 42, 
	67, 45, 59, 46, 58, 80, 57, 85, 
	49, 50, 51, 92, 92, 50, 51, 48, 
	52, 53, 94, 52, 94, 50, 51, 54, 
	92, 50, 51, 92, 55, 56, 89, 47, 
	58, 45, 59, 65, 64, 68, 77, 79, 
	74, 76, 69, 71, 69, 72, 70, 70, 
	69, 71, 72, 68, 73, 74, 76, 73, 
	68, 76, 71, 69, 72, 75, 70, 71, 
	69, 72, 70, 69, 77, 78, 81, 83, 
	81, 84, 88, 91, 82, 81, 82, 84, 
	86, 87, 87, 90, 48, 55, 95, 53, 
	94, 93
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 4, 0, 0, 0, 0, 0, 2, 
	0, 5, 5, 6, 4, 7, 8, 8, 
	9, 10, 8, 0, 11, 11, 11, 0, 
	12, 0, 0, 0, 0, 2, 0, 11, 
	11, 13, 13, 4, 13, 14, 14, 14, 
	11, 0, 2, 0, 0, 0, 15, 16, 
	15, 0, 17, 0, 15, 15, 0, 0, 
	0, 0, 19, 0, 2, 0, 0, 0, 
	21, 22, 22, 22, 21, 21, 21, 21, 
	21, 23, 21, 22, 22, 24, 24, 25, 
	24, 26, 26, 26, 22, 21, 0, 27, 
	4, 28, 29, 31, 4, 8, 8, 8, 
	10, 8, 0, 11, 11, 11, 11, 0, 
	37, 0, 0, 0, 0, 2, 0, 11, 
	11, 11, 13, 13, 13, 4, 13, 14, 
	14, 14, 14, 41, 11, 11, 43, 43, 
	44, 45, 43, 43, 47, 49, 51, 25, 
	43, 52, 25, 43, 53, 53, 54, 55, 
	53, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 18, 0, 0, 0, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 0, 0, 18, 0, 0, 0, 0, 
	30, 32, 0, 33, 34, 35, 36, 35, 
	35, 34, 38, 39, 40, 34, 35, 35, 
	42, 46, 48, 46, 50, 42, 46, 50, 
	46, 42, 46, 46, 56, 42, 56, 42
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 60;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 35;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 36;
class << self
	attr_accessor :bel_en_list_node
end
self.bel_en_list_node = 43;
class << self
	attr_accessor :bel_en_set_ast
end
self.bel_en_set_ast = 44;
class << self
	attr_accessor :bel_en_set_document
end
self.bel_en_set_document = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 31 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 15 then
		begin

    @opened = true
    p_start = p
  		end
	when 8 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
	when 11 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
	when 37 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 29 then
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 21 then
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 28 then
		begin

    #$stderr.puts 'end_set_keyword'
    # have we accumulated part of the set keyword?
    unless @accum_set
      	begin
		p += 1
		_goto_level = _out
		next
	end

    end
    buf = @incomplete.delete(:set_keyword)
    keyword = ord_to_str(buf)
    if keyword == 'SET'
      @have_set = true
    end
  		end
	when 1 then
		begin

    @buffers[:set] = set()
  		end
	when 2 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 25 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 14 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 27 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    #$stderr.puts "set_name_end"
    name = @buffers.delete(:ident)
    unless ident.nil?
      @have_name = true
      @buffers[:set_name] = name
    end
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << name(@buffers[:ident])
  		end
	when 53 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 41 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
	when 22 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 19 then
		begin

    #$stderr.puts 'start_set_keyword'
    @incomplete[:set_keyword] = []
  		end
		begin

    #$stderr.puts 'accum_set_keyword "' + fc.chr + '"'
    @incomplete[:set_keyword] << data[p].ord
    @accum_set = true
  		end
	when 43 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 47 then
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 5 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 23 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 26 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 17 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 13 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
	when 44 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 9 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 45 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 16 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 55 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 54 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 24 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 12 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:list])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 52 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
	when 49 then
		begin

    @incomplete[:set_value] = []
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	when 6 then
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:set] = @buffers[:set] << value(@buffers[:ident])
  		end
		begin

    yield(
      document_property(
        *@buffers[:set].children))
  		end
	when 57 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    @incomplete[:set_value] << data[p].ord
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts "set_end"
    children = []
    if @have_name
      children << @buffers.delete(:set_name)
    end
    if @have_value
      children << @buffers.delete(:set_value)
    end
    completed = @have_set && @have_name && @have_value
    ast_node = set(*children, complete: completed)
    @buffers[:set] = ast_node
    yield @buffers[:set]
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 32 then
		begin

    yield @buffers[:ident]
  		end
	when 20 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
	when 18 then
		begin

    #$stderr.puts 'eof_set_keyword'
  		end
	when 48 then
		begin

    #$stderr.puts 'eof_set'
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 35 then
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 42 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 33 then
		begin

    $stderr.puts 'list_start'
    @opened = true
    @buffers[:list] = list()
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 34 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 36 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 46 then
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	when 40 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 38 then
		begin

    $stderr.puts 'add_string'
    string = @buffers.delete(:string)
    item = list_item(string, complete: string.complete)
    @buffers[:list] <<= item
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'add_ident'
    ident = @buffers.delete(:ident)
    item = list_item(ident, complete: ident.complete)
    @buffers[:list] <<= item
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts "yield_list"
    yield @buffers[:list]
  		end
	when 56 then
		begin

    $stderr.puts 'list_finish'
    @list_closed = true
  		end
		begin

    $stderr.puts "list_end"
    $stderr.puts "incomplete: " + @incomplete.inspect.to_s
    $stderr.puts "buffers: " + @buffers.inspect.to_s
    arg = @incomplete.delete(:list_arg)
    $stderr.puts "'#{arg}'"
    if @incomplete.key?(:string)
      # strings need to be closed; so set complete false
      ast_node = string(utf8_string(arg), complete: false)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    elsif @incomplete.key?(:ident)
      # identifiers need not be closed; so set complete true
      ast_node = identifier(utf8_string(arg), complete: true)
      # the list item is complete if its child is complete
      item = list_item(ast_node, complete: ast_node.complete)
      @buffers[:list] <<= item
    end

    $stderr.puts 'closed? ' + @list_closed.to_s
    @buffers[:list].complete = @list_closed
  		end
		begin

    $stderr.puts 'handle eof - what is incomplete?'
    $stderr.puts @incomplete.inspect
  		end
		begin

    $stderr.puts 'set_value_end'
    $stderr.puts @buffers.inspect
    if @buffers.key?(:ident)
      @have_value = true
      ident = @buffers.delete(:ident)
      @buffers[:set_value] = ident
    elsif @buffers.key?(:list)
      $stderr.puts "I got a list!"
      @have_value = true
      list = @buffers.delete(:list)
      @buffers[:set_value] = list
    elsif @buffers.key?(:string)
      @have_value = true
      string = @buffers.delete(:string)
      @buffers[:set_value] = string
    end
  		end
		begin

    #$stderr.puts 'eof_set'
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::BELScript::SetDocument.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
