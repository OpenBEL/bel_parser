#include "gen/if2.h"
::_repeat_root_item start::RootItemList() { static int a[] = {1, 0, 0}; return ::_repeat_root_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def root_item::rl_def() { static int a[] = {1, 0, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def root_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def root_item::token_def() { static int a[] = {1, 2, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def root_item::ic_def() { static int a[] = {1, 3, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def root_item::ignore_def() { static int a[] = {1, 4, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def root_item::cfl_def() { static int a[] = {1, 5, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def root_item::region_def() { static int a[] = {1, 6, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def root_item::struct_def() { static int a[] = {1, 7, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::namespace_def root_item::namespace_def() { static int a[] = {1, 8, 0}; return ::namespace_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def root_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def root_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def root_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::statement root_item::statement() { static int a[] = {1, 12, 0}; return ::statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::global_def root_item::global_def() { static int a[] = {1, 13, 0}; return ::global_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::export_def root_item::export_def() { static int a[] = {1, 14, 0}; return ::export_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def root_item::pre_eof_def() { static int a[] = {1, 15, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def root_item::precedence_def() { static int a[] = {1, 16, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def root_item::alias_def() { static int a[] = {1, 17, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::include root_item::include() { static int a[] = {1, 18, 0}; return ::include( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reduction_def root_item::reduction_def() { static int a[] = {1, 19, 0}; return ::reduction_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::INCLUDE include::INCLUDE() { static int a[] = {1, 0, 0}; return ::INCLUDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ include::SQ() { static int a[] = {1, 0, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data include::SqConsDataList() { static int a[] = {1, 0, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term include::sq_lit_term() { static int a[] = {1, 0, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_type precedence_def::pred_type() { static int a[] = {1, 0, 0}; return ::pred_type( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token_list precedence_def::pred_token_list() { static int a[] = {1, 0, 1}; return ::pred_token_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEFT pred_type::LEFT() { static int a[] = {1, 0, 0}; return ::LEFT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RIGHT pred_type::RIGHT() { static int a[] = {1, 1, 0}; return ::RIGHT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NONASSOC pred_type::NONASSOC() { static int a[] = {1, 2, 0}; return ::NONASSOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token_list pred_token_list::_pred_token_list() { static int a[] = {1, 0, 0}; return ::pred_token_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA pred_token_list::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token pred_token_list::pred_token() { static int a[] = {2, 0, 2, 1, 0}; return ::pred_token( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual pred_token::region_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id pred_token::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit pred_token::backtick_lit() { static int a[] = {1, 1, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PREEOF pre_eof_def::PREEOF() { static int a[] = {1, 0, 0}; return ::PREEOF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN pre_eof_def::COPEN() { static int a[] = {1, 0, 1}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list pre_eof_def::lang_stmt_list() { static int a[] = {1, 0, 2}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE pre_eof_def::CCLOSE() { static int a[] = {1, 0, 3}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ALIAS alias_def::ALIAS() { static int a[] = {1, 0, 0}; return ::ALIAS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id alias_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref alias_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_var_def struct_item::struct_var_def() { static int a[] = {1, 0, 0}; return ::struct_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def struct_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def struct_item::rl_def() { static int a[] = {1, 2, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def struct_item::token_def() { static int a[] = {1, 3, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def struct_item::ic_def() { static int a[] = {1, 4, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def struct_item::ignore_def() { static int a[] = {1, 5, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def struct_item::cfl_def() { static int a[] = {1, 6, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def struct_item::region_def() { static int a[] = {1, 7, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def struct_item::struct_def() { static int a[] = {1, 8, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def struct_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def struct_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def struct_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::export_def struct_item::export_def() { static int a[] = {1, 12, 0}; return ::export_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def struct_item::pre_eof_def() { static int a[] = {1, 13, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def struct_item::precedence_def() { static int a[] = {1, 14, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def struct_item::alias_def() { static int a[] = {1, 15, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EXPORT export_def::EXPORT() { static int a[] = {1, 0, 0}; return ::EXPORT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def export_def::var_def() { static int a[] = {1, 0, 1}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init export_def::opt_def_init() { static int a[] = {1, 0, 2}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GLOBAL global_def::GLOBAL() { static int a[] = {1, 0, 0}; return ::GLOBAL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def global_def::var_def() { static int a[] = {1, 0, 1}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init global_def::opt_def_init() { static int a[] = {1, 0, 2}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ITER iter_def::ITER() { static int a[] = {1, 0, 0}; return ::ITER( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id iter_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN iter_def::POPEN() { static int a[] = {1, 0, 2}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list iter_def::ParamVarDefList() { static int a[] = {1, 0, 3}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE iter_def::PCLOSE() { static int a[] = {1, 0, 4}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN iter_def::COPEN() { static int a[] = {1, 0, 5}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list iter_def::lang_stmt_list() { static int a[] = {1, 0, 6}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE iter_def::CCLOSE() { static int a[] = {1, 0, 7}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REF reference_type_ref::REF() { static int a[] = {1, 0, 0}; return ::REF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT reference_type_ref::LT() { static int a[] = {1, 0, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref reference_type_ref::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT reference_type_ref::GT() { static int a[] = {1, 0, 3}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def param_var_def_seq::param_var_def() { static int a[] = {2, 0, 0, 1, 0}; return ::param_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA param_var_def_seq::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_seq param_var_def_seq::_param_var_def_seq() { static int a[] = {1, 0, 2}; return ::param_var_def_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_seq param_var_def_list::param_var_def_seq() { static int a[] = {1, 0, 0}; return ::param_var_def_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id param_var_def::id() { static int a[] = {2, 0, 0, 1, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON param_var_def::COLON() { static int a[] = {2, 0, 1, 1, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref param_var_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reference_type_ref param_var_def::reference_type_ref() { static int a[] = {1, 1, 2}; return ::reference_type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EXPORT opt_export::EXPORT() { static int a[] = {1, 0, 0}; return ::EXPORT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_export function_def::opt_export() { static int a[] = {1, 0, 0}; return ::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref function_def::type_ref() { static int a[] = {1, 0, 1}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id function_def::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN function_def::POPEN() { static int a[] = {1, 0, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list function_def::ParamVarDefList() { static int a[] = {1, 0, 4}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE function_def::PCLOSE() { static int a[] = {1, 0, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN function_def::COPEN() { static int a[] = {1, 0, 6}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list function_def::lang_stmt_list() { static int a[] = {1, 0, 7}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE function_def::CCLOSE() { static int a[] = {1, 0, 8}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_export in_host_def::opt_export() { static int a[] = {1, 0, 0}; return ::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref in_host_def::type_ref() { static int a[] = {1, 0, 1}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id in_host_def::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN in_host_def::POPEN() { static int a[] = {1, 0, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list in_host_def::ParamVarDefList() { static int a[] = {1, 0, 4}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE in_host_def::PCLOSE() { static int a[] = {1, 0, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS in_host_def::EQUALS() { static int a[] = {1, 0, 6}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id in_host_def::HostFunc() { static int a[] = {1, 0, 7}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def struct_var_def::var_def() { static int a[] = {1, 0, 0}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STRUCT struct_key::STRUCT() { static int a[] = {1, 0, 0}; return ::STRUCT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONTEXT struct_key::CONTEXT() { static int a[] = {1, 1, 0}; return ::CONTEXT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_key struct_def::struct_key() { static int a[] = {1, 0, 0}; return ::struct_key( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id struct_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_struct_item struct_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_struct_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END struct_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LITERAL literal_def::LITERAL() { static int a[] = {1, 0, 0}; return ::LITERAL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_list literal_def::literal_list() { static int a[] = {1, 0, 1}; return ::literal_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_list literal_list::_literal_list() { static int a[] = {1, 0, 0}; return ::literal_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_item literal_list::literal_item() { static int a[] = {2, 0, 1, 1, 0}; return ::literal_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_left literal_item::no_ignore_left() { static int a[] = {1, 0, 0}; return ::no_ignore_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit literal_item::backtick_lit() { static int a[] = {1, 0, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_right literal_item::no_ignore_right() { static int a[] = {1, 0, 2}; return ::no_ignore_right( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NI no_ignore_left::NI() { static int a[] = {1, 0, 0}; return ::NI( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS no_ignore_left::MINUS() { static int a[] = {1, 0, 1}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS no_ignore_right::MINUS() { static int a[] = {1, 0, 0}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NI no_ignore_right::NI() { static int a[] = {1, 0, 1}; return ::NI( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCTION reduction_def::REDUCTION() { static int a[] = {1, 0, 0}; return ::REDUCTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id reduction_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_reduction_item reduction_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_reduction_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END reduction_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref red_nonterm::type_ref() { static int a[] = {1, 0, 0}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN red_nonterm::RED_OPEN() { static int a[] = {1, 0, 1}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item red_nonterm::HostItems() { static int a[] = {1, 0, 2}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE red_nonterm::RED_CLOSE() { static int a[] = {1, 0, 3}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref red_action::type_ref() { static int a[] = {1, 0, 0}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON red_action::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id red_action::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN red_action::RED_OPEN() { static int a[] = {1, 0, 3}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item red_action::HostItems() { static int a[] = {1, 0, 4}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE red_action::RED_CLOSE() { static int a[] = {1, 0, 5}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_id host_item::red_id() { static int a[] = {1, 0, 0}; return ::red_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_lit host_item::red_lit() { static int a[] = {1, 1, 0}; return ::red_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_comment host_item::red_comment() { static int a[] = {1, 2, 0}; return ::red_comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_ws host_item::red_ws() { static int a[] = {1, 3, 0}; return ::red_ws( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_any host_item::red_any() { static int a[] = {1, 4, 0}; return ::red_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_LHS host_item::RED_LHS() { static int a[] = {1, 5, 0}; return ::RED_LHS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_REF host_item::RED_RHS_REF() { static int a[] = {1, 6, 0}; return ::RED_RHS_REF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_LOC host_item::RED_RHS_LOC() { static int a[] = {1, 7, 0}; return ::RED_RHS_LOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_NREF host_item::RED_RHS_NREF() { static int a[] = {1, 8, 0}; return ::RED_RHS_NREF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_NLOC host_item::RED_RHS_NLOC() { static int a[] = {1, 9, 0}; return ::RED_RHS_NLOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN host_item::RED_OPEN() { static int a[] = {1, 10, 0}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item host_item::HostItems() { static int a[] = {1, 10, 1}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE host_item::RED_CLOSE() { static int a[] = {1, 10, 2}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_nonterm reduction_item::red_nonterm() { static int a[] = {1, 0, 0}; return ::red_nonterm( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_action reduction_item::red_action() { static int a[] = {1, 1, 0}; return ::red_action( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NAMESPACE namespace_def::NAMESPACE() { static int a[] = {1, 0, 0}; return ::NAMESPACE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id namespace_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_namespace_item namespace_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_namespace_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END namespace_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def namespace_item::rl_def() { static int a[] = {1, 0, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def namespace_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def namespace_item::token_def() { static int a[] = {1, 2, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def namespace_item::ic_def() { static int a[] = {1, 3, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def namespace_item::ignore_def() { static int a[] = {1, 4, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def namespace_item::cfl_def() { static int a[] = {1, 5, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def namespace_item::region_def() { static int a[] = {1, 6, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def namespace_item::struct_def() { static int a[] = {1, 7, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::namespace_def namespace_item::namespace_def() { static int a[] = {1, 8, 0}; return ::namespace_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def namespace_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def namespace_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def namespace_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def namespace_item::pre_eof_def() { static int a[] = {1, 12, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def namespace_item::precedence_def() { static int a[] = {1, 13, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def namespace_item::alias_def() { static int a[] = {1, 14, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::include namespace_item::include() { static int a[] = {1, 15, 0}; return ::include( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::global_def namespace_item::global_def() { static int a[] = {1, 16, 0}; return ::global_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCEFIRST opt_reduce_first::REDUCEFIRST() { static int a[] = {1, 0, 0}; return ::REDUCEFIRST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DEF cfl_def::DEF() { static int a[] = {1, 0, 0}; return ::DEF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id cfl_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_var_def cfl_def::VarDefList() { static int a[] = {1, 0, 2}; return ::_repeat_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_reduce_first cfl_def::opt_reduce_first() { static int a[] = {1, 0, 3}; return ::opt_reduce_first( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_list cfl_def::prod_list() { static int a[] = {1, 0, 4}; return ::prod_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX region_def::LEX() { static int a[] = {1, 0, 0}; return ::LEX( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_root_item region_def::RootItemList() { static int a[] = {1, 0, 1}; return ::_repeat_root_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END region_def::END() { static int a[] = {1, 0, 2}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RL rl_def::RL() { static int a[] = {1, 0, 0}; return ::RL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id rl_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH rl_def::LEX_FSLASH() { static int a[] = {2, 0, 2, 0, 4}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr rl_def::lex_expr() { static int a[] = {1, 0, 3}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr opt_lex_expr::lex_expr() { static int a[] = {1, 0, 0}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TOKEN token_def::TOKEN() { static int a[] = {1, 0, 0}; return ::TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id token_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_var_def token_def::VarDefList() { static int a[] = {1, 0, 2}; return ::_repeat_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_left token_def::no_ignore_left() { static int a[] = {1, 0, 3}; return ::no_ignore_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH token_def::LEX_FSLASH() { static int a[] = {2, 0, 4, 0, 6}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_expr token_def::opt_lex_expr() { static int a[] = {1, 0, 5}; return ::opt_lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_right token_def::no_ignore_right() { static int a[] = {1, 0, 7}; return ::no_ignore_right( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_translate token_def::opt_translate() { static int a[] = {1, 0, 8}; return ::opt_translate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TOKEN ic_def::TOKEN() { static int a[] = {1, 0, 0}; return ::TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id ic_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS ic_def::MINUS() { static int a[] = {1, 0, 2}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN opt_translate::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list opt_translate::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE opt_translate::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id opt_id::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IGNORE ignore_def::IGNORE() { static int a[] = {1, 0, 0}; return ::IGNORE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_id ignore_def::opt_id() { static int a[] = {1, 0, 1}; return ::opt_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH ignore_def::LEX_FSLASH() { static int a[] = {2, 0, 2, 0, 4}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_expr ignore_def::opt_lex_expr() { static int a[] = {1, 0, 3}; return ::opt_lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_prod_el_name prod_el::opt_prod_el_name() { static int a[] = {2, 0, 0, 1, 0}; return ::opt_prod_el_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual prod_el::region_qual() { static int a[] = {2, 0, 1, 1, 1}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id prod_el::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat prod_el::opt_repeat() { static int a[] = {2, 0, 3, 1, 3}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit prod_el::backtick_lit() { static int a[] = {1, 1, 2}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id opt_prod_el_name::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON opt_prod_el_name::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el_list prod_el_list::_prod_el_list() { static int a[] = {1, 0, 0}; return ::prod_el_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el prod_el_list::prod_el() { static int a[] = {1, 0, 1}; return ::prod_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMIT opt_commit::COMMIT() { static int a[] = {1, 0, 0}; return ::COMMIT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON opt_prod_name::COLON() { static int a[] = {1, 0, 0}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id opt_prod_name::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN prod::SQOPEN() { static int a[] = {1, 0, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el_list prod::prod_el_list() { static int a[] = {1, 0, 1}; return ::prod_el_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE prod::SQCLOSE() { static int a[] = {1, 0, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_prod_name prod::opt_prod_name() { static int a[] = {1, 0, 3}; return ::opt_prod_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_commit prod::opt_commit() { static int a[] = {1, 0, 4}; return ::opt_commit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_reduce prod::opt_reduce() { static int a[] = {1, 0, 5}; return ::opt_reduce( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN opt_reduce::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list opt_reduce::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE opt_reduce::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_list prod_list::_prod_list() { static int a[] = {1, 0, 0}; return ::prod_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BAR prod_list::BAR() { static int a[] = {1, 0, 1}; return ::BAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod prod_list::prod() { static int a[] = {2, 0, 2, 1, 0}; return ::prod( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CASE case_clause::CASE() { static int a[] = {1, 0, 0}; return ::CASE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern case_clause::pattern() { static int a[] = {1, 0, 1}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single case_clause::block_or_single() { static int a[] = {1, 0, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DEFAULT default_clause::DEFAULT() { static int a[] = {1, 0, 0}; return ::DEFAULT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single default_clause::block_or_single() { static int a[] = {1, 0, 1}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause case_clause_list::case_clause() { static int a[] = {2, 0, 0, 1, 0}; return ::case_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause_list case_clause_list::_case_clause_list() { static int a[] = {1, 0, 1}; return ::case_clause_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::default_clause case_clause_list::default_clause() { static int a[] = {1, 2, 0}; return ::default_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::print_stmt statement::print_stmt() { static int a[] = {1, 0, 0}; return ::print_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::expr_stmt statement::expr_stmt() { static int a[] = {1, 1, 0}; return ::expr_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def statement::var_def() { static int a[] = {1, 2, 0}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init statement::opt_def_init() { static int a[] = {1, 2, 1}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FOR statement::FOR() { static int a[] = {1, 3, 0}; return ::FOR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id statement::id() { static int a[] = {1, 3, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON statement::COLON() { static int a[] = {1, 3, 2}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref statement::type_ref() { static int a[] = {1, 3, 3}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IN statement::IN() { static int a[] = {1, 3, 4}; return ::IN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_call statement::iter_call() { static int a[] = {1, 3, 5}; return ::iter_call( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single statement::block_or_single() { static int a[] = {3, 3, 6, 4, 2, 7, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IF statement::IF() { static int a[] = {1, 4, 0}; return ::IF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr statement::code_expr() { static int a[] = {4, 4, 1, 7, 1, 8, 2, 10, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_list statement::elsif_list() { static int a[] = {1, 4, 3}; return ::elsif_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SWITCH statement::SWITCH() { static int a[] = {2, 5, 0, 6, 0}; return ::SWITCH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref statement::var_ref() { static int a[] = {4, 5, 1, 6, 1, 8, 0, 9, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause_list statement::case_clause_list() { static int a[] = {2, 5, 2, 6, 3}; return ::case_clause_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN statement::COPEN() { static int a[] = {1, 6, 2}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE statement::CCLOSE() { static int a[] = {1, 6, 4}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::WHILE statement::WHILE() { static int a[] = {1, 7, 0}; return ::WHILE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS statement::EQUALS() { static int a[] = {1, 8, 1}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::YIELD statement::YIELD() { static int a[] = {1, 9, 0}; return ::YIELD( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RETURN statement::RETURN() { static int a[] = {1, 10, 0}; return ::RETURN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BREAK statement::BREAK() { static int a[] = {1, 11, 0}; return ::BREAK( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REJECT statement::REJECT() { static int a[] = {1, 12, 0}; return ::REJECT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_clause elsif_list::elsif_clause() { static int a[] = {1, 0, 0}; return ::elsif_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_list elsif_list::_elsif_list() { static int a[] = {1, 0, 1}; return ::elsif_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::optional_else elsif_list::optional_else() { static int a[] = {1, 1, 0}; return ::optional_else( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ELSIF elsif_clause::ELSIF() { static int a[] = {1, 0, 0}; return ::ELSIF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr elsif_clause::code_expr() { static int a[] = {1, 0, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single elsif_clause::block_or_single() { static int a[] = {1, 0, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ELSE optional_else::ELSE() { static int a[] = {1, 0, 0}; return ::ELSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single optional_else::block_or_single() { static int a[] = {1, 0, 1}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr call_arg_seq::code_expr() { static int a[] = {2, 0, 0, 1, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA call_arg_seq::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_seq call_arg_seq::_call_arg_seq() { static int a[] = {1, 0, 2}; return ::call_arg_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_seq call_arg_list::call_arg_seq() { static int a[] = {1, 0, 0}; return ::call_arg_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 iter_call::E1() { static int a[] = {1, 0, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref iter_call::var_ref() { static int a[] = {1, 0, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN iter_call::POPEN() { static int a[] = {1, 0, 2}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list iter_call::call_arg_list() { static int a[] = {1, 0, 3}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE iter_call::PCLOSE() { static int a[] = {1, 0, 4}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 iter_call::E2() { static int a[] = {1, 1, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id iter_call::id() { static int a[] = {1, 1, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E3 iter_call::E3() { static int a[] = {1, 2, 0}; return ::E3( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr iter_call::code_expr() { static int a[] = {1, 2, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN block_or_single::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list block_or_single::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE block_or_single::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::statement block_or_single::statement() { static int a[] = {1, 1, 0}; return ::statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REQUIRE require_pattern::REQUIRE() { static int a[] = {1, 0, 0}; return ::REQUIRE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref require_pattern::var_ref() { static int a[] = {1, 0, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern require_pattern::pattern() { static int a[] = {1, 0, 2}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::require_pattern opt_require_stmt::require_pattern() { static int a[] = {1, 0, 0}; return ::require_pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list opt_require_stmt::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_statement lang_stmt_list::StmtList() { static int a[] = {1, 0, 0}; return ::_repeat_statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_require_stmt lang_stmt_list::opt_require_stmt() { static int a[] = {1, 0, 1}; return ::opt_require_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS opt_def_init::EQUALS() { static int a[] = {1, 0, 0}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr opt_def_init::code_expr() { static int a[] = {1, 0, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id var_def::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON var_def::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref var_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT print_stmt::PRINT() { static int a[] = {2, 0, 0, 4, 0}; return ::PRINT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN print_stmt::POPEN() { static int a[] = {4, 0, 1, 1, 1, 2, 1, 3, 1}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list print_stmt::call_arg_list() { static int a[] = {4, 0, 2, 1, 2, 2, 2, 3, 2}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE print_stmt::PCLOSE() { static int a[] = {4, 0, 3, 1, 3, 2, 3, 3, 3}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINTS print_stmt::PRINTS() { static int a[] = {1, 1, 0}; return ::PRINTS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT_XML print_stmt::PRINT_XML() { static int a[] = {1, 2, 0}; return ::PRINT_XML( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT_XML_AC print_stmt::PRINT_XML_AC() { static int a[] = {1, 3, 0}; return ::PRINT_XML_AC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accumulate print_stmt::accumulate() { static int a[] = {1, 4, 1}; return ::accumulate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr expr_stmt::code_expr() { static int a[] = {1, 0, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr code_expr::_code_expr() { static int a[] = {2, 0, 0, 1, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::AMPAMP code_expr::AMPAMP() { static int a[] = {1, 0, 1}; return ::AMPAMP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_relational code_expr::code_relational() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_relational( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BARBAR code_expr::BARBAR() { static int a[] = {1, 1, 1}; return ::BARBAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_relational code_relational::_code_relational() { static int a[] = {6, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0}; return ::code_relational( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQEQ code_relational::EQEQ() { static int a[] = {1, 0, 1}; return ::EQEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_additive code_relational::code_additive() { static int a[] = {7, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 0}; return ::code_additive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NEQ code_relational::NEQ() { static int a[] = {1, 1, 1}; return ::NEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT code_relational::LT() { static int a[] = {1, 2, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT code_relational::GT() { static int a[] = {1, 3, 1}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LTEQ code_relational::LTEQ() { static int a[] = {1, 4, 1}; return ::LTEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GTEQ code_relational::GTEQ() { static int a[] = {1, 5, 1}; return ::GTEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_additive code_additive::_code_additive() { static int a[] = {2, 0, 0, 1, 0}; return ::code_additive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PLUS code_additive::PLUS() { static int a[] = {1, 0, 1}; return ::PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_multiplicitive code_additive::code_multiplicitive() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_multiplicitive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS code_additive::MINUS() { static int a[] = {1, 1, 1}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_multiplicitive code_multiplicitive::_code_multiplicitive() { static int a[] = {2, 0, 0, 1, 0}; return ::code_multiplicitive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STAR code_multiplicitive::STAR() { static int a[] = {1, 0, 1}; return ::STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_unary code_multiplicitive::code_unary() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_unary( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FSLASH code_multiplicitive::FSLASH() { static int a[] = {1, 1, 1}; return ::FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BANG code_unary::BANG() { static int a[] = {1, 0, 0}; return ::BANG( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_factor code_unary::code_factor() { static int a[] = {6, 0, 1, 1, 1, 2, 2, 3, 1, 4, 1, 5, 0}; return ::code_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOLLAR code_unary::DOLLAR() { static int a[] = {3, 1, 0, 2, 0, 2, 1}; return ::DOLLAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CARET code_unary::CARET() { static int a[] = {1, 3, 0}; return ::CARET( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PERCENT code_unary::PERCENT() { static int a[] = {1, 4, 0}; return ::PERCENT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOT opt_eos::DOT() { static int a[] = {1, 0, 0}; return ::DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EOS opt_eos::EOS() { static int a[] = {1, 1, 0}; return ::EOS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::number code_factor::number() { static int a[] = {1, 0, 0}; return ::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref code_factor::var_ref() { static int a[] = {6, 1, 0, 2, 0, 7, 1, 8, 1, 14, 1, 16, 2}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN code_factor::POPEN() { static int a[] = {5, 1, 1, 6, 0, 17, 1, 18, 1, 20, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list code_factor::call_arg_list() { static int a[] = {3, 1, 2, 17, 2, 18, 2}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE code_factor::PCLOSE() { static int a[] = {5, 1, 3, 6, 2, 17, 3, 18, 3, 20, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NIL code_factor::NIL() { static int a[] = {1, 3, 0}; return ::NIL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TRUE code_factor::TRUE() { static int a[] = {1, 4, 0}; return ::TRUE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FALSE code_factor::FALSE() { static int a[] = {1, 5, 0}; return ::FALSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr code_factor::code_expr() { static int a[] = {1, 6, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SEND code_factor::SEND() { static int a[] = {1, 7, 0}; return ::SEND( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accumulate code_factor::accumulate() { static int a[] = {6, 7, 2, 8, 2, 9, 4, 10, 4, 11, 4, 12, 4}; return ::accumulate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_eos code_factor::opt_eos() { static int a[] = {2, 7, 3, 8, 3}; return ::opt_eos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SEND_TREE code_factor::SEND_TREE() { static int a[] = {1, 8, 0}; return ::SEND_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE code_factor::PARSE() { static int a[] = {1, 9, 0}; return ::PARSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_capture code_factor::opt_capture() { static int a[] = {5, 9, 1, 10, 1, 11, 1, 13, 1, 20, 1}; return ::opt_capture( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref code_factor::type_ref() { static int a[] = {9, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2, 16, 0, 19, 2, 20, 2, 21, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_field_init code_factor::opt_field_init() { static int a[] = {5, 9, 3, 10, 3, 11, 3, 12, 3, 13, 3}; return ::opt_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE_TREE code_factor::PARSE_TREE() { static int a[] = {1, 10, 0}; return ::PARSE_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE_STOP code_factor::PARSE_STOP() { static int a[] = {1, 11, 0}; return ::PARSE_STOP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCE code_factor::REDUCE() { static int a[] = {1, 12, 0}; return ::REDUCE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id code_factor::id() { static int a[] = {1, 12, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS code_factor::CONS() { static int a[] = {1, 13, 0}; return ::CONS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::constructor code_factor::constructor() { static int a[] = {1, 13, 4}; return ::constructor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MATCH code_factor::MATCH() { static int a[] = {1, 14, 0}; return ::MATCH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern code_factor::pattern() { static int a[] = {1, 14, 2}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string code_factor::string() { static int a[] = {1, 15, 0}; return ::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IN code_factor::IN() { static int a[] = {1, 16, 1}; return ::IN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAKE_TREE code_factor::MAKE_TREE() { static int a[] = {1, 17, 0}; return ::MAKE_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAKE_TOKEN code_factor::MAKE_TOKEN() { static int a[] = {1, 18, 0}; return ::MAKE_TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TYPEID code_factor::TYPEID() { static int a[] = {1, 19, 0}; return ::TYPEID( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT code_factor::LT() { static int a[] = {2, 19, 1, 21, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT code_factor::GT() { static int a[] = {2, 19, 3, 21, 3}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NEW code_factor::NEW() { static int a[] = {1, 20, 0}; return ::NEW( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_field_init code_factor::FieldInitList() { static int a[] = {1, 20, 4}; return ::_repeat_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CAST code_factor::CAST() { static int a[] = {1, 21, 0}; return ::CAST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_factor code_factor::_code_factor() { static int a[] = {1, 21, 4}; return ::code_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual type_ref::region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id type_ref::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat type_ref::opt_repeat() { static int a[] = {1, 0, 2}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::INT type_ref::INT() { static int a[] = {1, 1, 0}; return ::INT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BOOL type_ref::BOOL() { static int a[] = {1, 2, 0}; return ::BOOL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSER type_ref::PARSER() { static int a[] = {1, 3, 0}; return ::PARSER( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT type_ref::LT() { static int a[] = {5, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref type_ref::_type_ref() { static int a[] = {3, 3, 2, 4, 2, 6, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT type_ref::GT() { static int a[] = {5, 3, 3, 4, 3, 5, 5, 6, 3, 7, 5}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LIST type_ref::LIST() { static int a[] = {1, 4, 0}; return ::LIST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAP type_ref::MAP() { static int a[] = {1, 5, 0}; return ::MAP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref type_ref::KeyType() { static int a[] = {2, 5, 2, 7, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA type_ref::COMMA() { static int a[] = {2, 5, 3, 7, 3}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref type_ref::ValType() { static int a[] = {2, 5, 4, 7, 4}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LIST_EL type_ref::LIST_EL() { static int a[] = {1, 6, 0}; return ::LIST_EL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAP_EL type_ref::MAP_EL() { static int a[] = {1, 7, 0}; return ::MAP_EL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual region_qual::_region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id region_qual::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOUBLE_COLON region_qual::DOUBLE_COLON() { static int a[] = {1, 0, 2}; return ::DOUBLE_COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STAR opt_repeat::STAR() { static int a[] = {1, 0, 0}; return ::STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PLUS opt_repeat::PLUS() { static int a[] = {1, 1, 0}; return ::PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::QUESTION opt_repeat::QUESTION() { static int a[] = {1, 2, 0}; return ::QUESTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id opt_capture::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON opt_capture::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN opt_field_init::POPEN() { static int a[] = {1, 0, 0}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_field_init opt_field_init::FieldInitList() { static int a[] = {1, 0, 1}; return ::_repeat_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE opt_field_init::PCLOSE() { static int a[] = {1, 0, 2}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr field_init::code_expr() { static int a[] = {1, 0, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id opt_label::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON opt_label::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_DQ dq_lit_term::CONS_DQ() { static int a[] = {1, 0, 0}; return ::CONS_DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_DQ_NL dq_lit_term::CONS_DQ_NL() { static int a[] = {1, 1, 0}; return ::CONS_DQ_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQ sq_lit_term::CONS_SQ() { static int a[] = {1, 0, 0}; return ::CONS_SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQ_NL sq_lit_term::CONS_SQ_NL() { static int a[] = {1, 1, 0}; return ::CONS_SQ_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::tilde_data opt_tilde_data::tilde_data() { static int a[] = {1, 0, 0}; return ::tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual pattern_el_lel::region_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id pattern_el_lel::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat pattern_el_lel::opt_repeat() { static int a[] = {2, 0, 2, 1, 2}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit pattern_el_lel::backtick_lit() { static int a[] = {1, 1, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_label pattern_el::opt_label() { static int a[] = {1, 0, 0}; return ::opt_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_el_lel pattern_el::pattern_el_lel() { static int a[] = {1, 0, 1}; return ::pattern_el_lel( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ pattern_el::DQ() { static int a[] = {1, 1, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_litpat_el pattern_el::LitpatElList() { static int a[] = {1, 1, 1}; return ::_repeat_litpat_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term pattern_el::dq_lit_term() { static int a[] = {1, 1, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ pattern_el::SQ() { static int a[] = {1, 2, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data pattern_el::SqConsDataList() { static int a[] = {1, 2, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term pattern_el::sq_lit_term() { static int a[] = {1, 2, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE pattern_el::TILDE() { static int a[] = {1, 3, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data pattern_el::opt_tilde_data() { static int a[] = {1, 3, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL pattern_el::TILDE_NL() { static int a[] = {1, 3, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data litpat_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN litpat_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_pattern_el litpat_el::PatternElList() { static int a[] = {1, 1, 1}; return ::_repeat_pattern_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE litpat_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ pattern_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_litpat_el pattern_top_el::LitpatElList() { static int a[] = {1, 0, 1}; return ::_repeat_litpat_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term pattern_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ pattern_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data pattern_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term pattern_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE pattern_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data pattern_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL pattern_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN pattern_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_pattern_el pattern_top_el::PatternElList() { static int a[] = {1, 3, 1}; return ::_repeat_pattern_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE pattern_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_list pattern_list::_pattern_list() { static int a[] = {1, 0, 0}; return ::pattern_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_top_el pattern_list::pattern_top_el() { static int a[] = {2, 0, 1, 1, 0}; return ::pattern_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_list pattern::pattern_list() { static int a[] = {1, 0, 0}; return ::pattern_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 cons_el::E1() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual cons_el::region_qual() { static int a[] = {1, 0, 1}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit cons_el::backtick_lit() { static int a[] = {1, 0, 2}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ cons_el::DQ() { static int a[] = {1, 1, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_cons_el cons_el::LitConsElList() { static int a[] = {1, 1, 2}; return ::_repeat_lit_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term cons_el::dq_lit_term() { static int a[] = {1, 1, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ cons_el::SQ() { static int a[] = {1, 2, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data cons_el::SqConsDataList() { static int a[] = {1, 2, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term cons_el::sq_lit_term() { static int a[] = {1, 2, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE cons_el::TILDE() { static int a[] = {1, 3, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data cons_el::opt_tilde_data() { static int a[] = {1, 3, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL cons_el::TILDE_NL() { static int a[] = {1, 3, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 cons_el::E2() { static int a[] = {1, 4, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr cons_el::code_expr() { static int a[] = {1, 4, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data lit_cons_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN lit_cons_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_cons_el lit_cons_el::ConsElList() { static int a[] = {1, 1, 1}; return ::_repeat_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE lit_cons_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ cons_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_cons_el cons_top_el::LitConsElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term cons_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ cons_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data cons_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term cons_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE cons_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data cons_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL cons_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN cons_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_cons_el cons_top_el::ConsElList() { static int a[] = {1, 3, 1}; return ::_repeat_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE cons_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_top_el cons_list::cons_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::cons_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_list cons_list::_cons_list() { static int a[] = {1, 0, 1}; return ::cons_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_list constructor::cons_list() { static int a[] = {1, 0, 0}; return ::cons_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 accum_el::E1() { static int a[] = {3, 0, 0, 1, 0, 2, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ accum_el::DQ() { static int a[] = {1, 0, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_accum_el accum_el::LitAccumElList() { static int a[] = {1, 0, 2}; return ::_repeat_lit_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term accum_el::dq_lit_term() { static int a[] = {1, 0, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ accum_el::SQ() { static int a[] = {1, 1, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data accum_el::SqConsDataList() { static int a[] = {1, 1, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term accum_el::sq_lit_term() { static int a[] = {1, 1, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE accum_el::TILDE() { static int a[] = {1, 2, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data accum_el::opt_tilde_data() { static int a[] = {1, 2, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL accum_el::TILDE_NL() { static int a[] = {1, 2, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 accum_el::E2() { static int a[] = {1, 3, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr accum_el::code_expr() { static int a[] = {1, 3, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data lit_accum_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN lit_accum_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_accum_el lit_accum_el::AccumElList() { static int a[] = {1, 1, 1}; return ::_repeat_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE lit_accum_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ accum_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_accum_el accum_top_el::LitAccumElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term accum_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ accum_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data accum_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term accum_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE accum_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data accum_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL accum_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN accum_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_accum_el accum_top_el::AccumElList() { static int a[] = {1, 3, 1}; return ::_repeat_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE accum_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_top_el accum_list::accum_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::accum_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_list accum_list::_accum_list() { static int a[] = {1, 0, 1}; return ::accum_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_list accumulate::accum_list() { static int a[] = {1, 0, 0}; return ::accum_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 string_el::E1() { static int a[] = {3, 0, 0, 1, 0, 2, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ string_el::DQ() { static int a[] = {1, 0, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_string_el string_el::LitStringElList() { static int a[] = {1, 0, 2}; return ::_repeat_lit_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term string_el::dq_lit_term() { static int a[] = {1, 0, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ string_el::SQ() { static int a[] = {1, 1, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data string_el::SqConsDataList() { static int a[] = {1, 1, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term string_el::sq_lit_term() { static int a[] = {1, 1, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE string_el::TILDE() { static int a[] = {1, 2, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data string_el::opt_tilde_data() { static int a[] = {1, 2, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL string_el::TILDE_NL() { static int a[] = {1, 2, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 string_el::E2() { static int a[] = {1, 3, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr string_el::code_expr() { static int a[] = {1, 3, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data lit_string_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN lit_string_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_string_el lit_string_el::StringElList() { static int a[] = {1, 1, 1}; return ::_repeat_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE lit_string_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ string_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_string_el string_top_el::LitStringElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term string_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ string_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data string_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term string_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE string_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data string_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL string_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN string_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_string_el string_top_el::StringElList() { static int a[] = {1, 3, 1}; return ::_repeat_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE string_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_top_el string_list::string_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::string_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_list string_list::_string_list() { static int a[] = {1, 0, 1}; return ::string_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_list string::string_list() { static int a[] = {1, 0, 0}; return ::string_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual var_ref::region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::qual var_ref::qual() { static int a[] = {1, 0, 1}; return ::qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id var_ref::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::qual qual::_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id qual::id() { static int a[] = {2, 0, 1, 1, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOT qual::DOT() { static int a[] = {1, 0, 2}; return ::DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ARROW qual::ARROW() { static int a[] = {1, 1, 2}; return ::ARROW( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr lex_expr::_lex_expr() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_BAR lex_expr::LEX_BAR() { static int a[] = {1, 0, 1}; return ::LEX_BAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_term lex_expr::lex_term() { static int a[] = {5, 0, 2, 1, 2, 2, 2, 3, 2, 4, 0}; return ::lex_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_AMP lex_expr::LEX_AMP() { static int a[] = {1, 1, 1}; return ::LEX_AMP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DASH lex_expr::LEX_DASH() { static int a[] = {1, 2, 1}; return ::LEX_DASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DASHDASH lex_expr::LEX_DASHDASH() { static int a[] = {1, 3, 1}; return ::LEX_DASHDASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DOT opt_lex_dot::LEX_DOT() { static int a[] = {1, 0, 0}; return ::LEX_DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_term lex_term::_lex_term() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::lex_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_dot lex_term::opt_lex_dot() { static int a[] = {1, 0, 1}; return ::opt_lex_dot( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_rep lex_term::lex_factor_rep() { static int a[] = {5, 0, 2, 1, 2, 2, 2, 3, 2, 4, 0}; return ::lex_factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_COLON_GT lex_term::LEX_COLON_GT() { static int a[] = {1, 1, 1}; return ::LEX_COLON_GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_COLON_GTGT lex_term::LEX_COLON_GTGT() { static int a[] = {1, 2, 1}; return ::LEX_COLON_GTGT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_LT_COLON lex_term::LEX_LT_COLON() { static int a[] = {1, 3, 1}; return ::LEX_LT_COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_rep lex_factor_rep::_lex_factor_rep() { static int a[] = {8, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0}; return ::lex_factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_STAR lex_factor_rep::LEX_STAR() { static int a[] = {1, 0, 1}; return ::LEX_STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_STARSTAR lex_factor_rep::LEX_STARSTAR() { static int a[] = {1, 1, 1}; return ::LEX_STARSTAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_PLUS lex_factor_rep::LEX_PLUS() { static int a[] = {1, 2, 1}; return ::LEX_PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_QUESTION lex_factor_rep::LEX_QUESTION() { static int a[] = {1, 3, 1}; return ::LEX_QUESTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN lex_factor_rep::COPEN() { static int a[] = {4, 4, 1, 5, 1, 6, 1, 7, 1}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint lex_factor_rep::lex_uint() { static int a[] = {3, 4, 2, 5, 3, 6, 2}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE lex_factor_rep::CCLOSE() { static int a[] = {4, 4, 3, 5, 4, 6, 4, 7, 5}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA lex_factor_rep::COMMA() { static int a[] = {3, 5, 2, 6, 3, 7, 3}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint lex_factor_rep::Low() { static int a[] = {1, 7, 2}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint lex_factor_rep::High() { static int a[] = {1, 7, 4}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_neg lex_factor_rep::lex_factor_neg() { static int a[] = {1, 8, 0}; return ::lex_factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_CARET lex_factor_neg::LEX_CARET() { static int a[] = {1, 0, 0}; return ::LEX_CARET( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_neg lex_factor_neg::_lex_factor_neg() { static int a[] = {1, 0, 1}; return ::lex_factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor lex_factor_neg::lex_factor() { static int a[] = {1, 1, 0}; return ::lex_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_lit lex_range_lit::lex_lit() { static int a[] = {1, 0, 0}; return ::lex_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_num lex_range_lit::lex_num() { static int a[] = {1, 1, 0}; return ::lex_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint lex_num::lex_uint() { static int a[] = {1, 0, 0}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_hex lex_num::lex_hex() { static int a[] = {1, 1, 0}; return ::lex_hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_lit lex_factor::lex_lit() { static int a[] = {1, 0, 0}; return ::lex_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_id lex_factor::lex_id() { static int a[] = {1, 1, 0}; return ::lex_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint lex_factor::lex_uint() { static int a[] = {1, 2, 0}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_hex lex_factor::lex_hex() { static int a[] = {1, 3, 0}; return ::lex_hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_range_lit lex_factor::Low() { static int a[] = {1, 4, 0}; return ::lex_range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DOTDOT lex_factor::LEX_DOTDOT() { static int a[] = {1, 4, 1}; return ::LEX_DOTDOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_range_lit lex_factor::High() { static int a[] = {1, 4, 2}; return ::lex_range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_SQOPEN_POS lex_factor::LEX_SQOPEN_POS() { static int a[] = {1, 5, 0}; return ::LEX_SQOPEN_POS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_data lex_factor::reg_or_data() { static int a[] = {2, 5, 1, 6, 1}; return ::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_SQCLOSE lex_factor::RE_SQCLOSE() { static int a[] = {2, 5, 2, 6, 2}; return ::RE_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_SQOPEN_NEG lex_factor::LEX_SQOPEN_NEG() { static int a[] = {1, 6, 0}; return ::LEX_SQOPEN_NEG( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_POPEN lex_factor::LEX_POPEN() { static int a[] = {1, 7, 0}; return ::LEX_POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr lex_factor::lex_expr() { static int a[] = {1, 7, 1}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_PCLOSE lex_factor::LEX_PCLOSE() { static int a[] = {1, 7, 2}; return ::LEX_PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_data reg_or_data::_reg_or_data() { static int a[] = {1, 0, 0}; return ::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_char reg_or_data::reg_or_char() { static int a[] = {1, 0, 1}; return ::reg_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR reg_or_char::RE_CHAR() { static int a[] = {1, 0, 0}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR reg_or_char::Low() { static int a[] = {1, 1, 0}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_DASH reg_or_char::RE_DASH() { static int a[] = {1, 1, 1}; return ::RE_DASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR reg_or_char::High() { static int a[] = {1, 1, 2}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_root_item _repeat_root_item:: next() { return ::_repeat_root_item( __prg, colm_get_repeat_next( __tree ) ); }
::root_item _repeat_root_item:: value() { return ::root_item( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_sq_cons_data _repeat_sq_cons_data:: next() { return ::_repeat_sq_cons_data( __prg, colm_get_repeat_next( __tree ) ); }
::sq_cons_data _repeat_sq_cons_data:: value() { return ::sq_cons_data( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_struct_item _repeat_struct_item:: next() { return ::_repeat_struct_item( __prg, colm_get_repeat_next( __tree ) ); }
::struct_item _repeat_struct_item:: value() { return ::struct_item( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_reduction_item _repeat_reduction_item:: next() { return ::_repeat_reduction_item( __prg, colm_get_repeat_next( __tree ) ); }
::reduction_item _repeat_reduction_item:: value() { return ::reduction_item( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_host_item _repeat_host_item:: next() { return ::_repeat_host_item( __prg, colm_get_repeat_next( __tree ) ); }
::host_item _repeat_host_item:: value() { return ::host_item( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_namespace_item _repeat_namespace_item:: next() { return ::_repeat_namespace_item( __prg, colm_get_repeat_next( __tree ) ); }
::namespace_item _repeat_namespace_item:: value() { return ::namespace_item( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_var_def _repeat_var_def:: next() { return ::_repeat_var_def( __prg, colm_get_repeat_next( __tree ) ); }
::var_def _repeat_var_def:: value() { return ::var_def( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_statement _repeat_statement:: next() { return ::_repeat_statement( __prg, colm_get_repeat_next( __tree ) ); }
::statement _repeat_statement:: value() { return ::statement( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_field_init _repeat_field_init:: next() { return ::_repeat_field_init( __prg, colm_get_repeat_next( __tree ) ); }
::field_init _repeat_field_init:: value() { return ::field_init( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_litpat_el _repeat_litpat_el:: next() { return ::_repeat_litpat_el( __prg, colm_get_repeat_next( __tree ) ); }
::litpat_el _repeat_litpat_el:: value() { return ::litpat_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_pattern_el _repeat_pattern_el:: next() { return ::_repeat_pattern_el( __prg, colm_get_repeat_next( __tree ) ); }
::pattern_el _repeat_pattern_el:: value() { return ::pattern_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_lit_cons_el _repeat_lit_cons_el:: next() { return ::_repeat_lit_cons_el( __prg, colm_get_repeat_next( __tree ) ); }
::lit_cons_el _repeat_lit_cons_el:: value() { return ::lit_cons_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_cons_el _repeat_cons_el:: next() { return ::_repeat_cons_el( __prg, colm_get_repeat_next( __tree ) ); }
::cons_el _repeat_cons_el:: value() { return ::cons_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_lit_accum_el _repeat_lit_accum_el:: next() { return ::_repeat_lit_accum_el( __prg, colm_get_repeat_next( __tree ) ); }
::lit_accum_el _repeat_lit_accum_el:: value() { return ::lit_accum_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_accum_el _repeat_accum_el:: next() { return ::_repeat_accum_el( __prg, colm_get_repeat_next( __tree ) ); }
::accum_el _repeat_accum_el:: value() { return ::accum_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_lit_string_el _repeat_lit_string_el:: next() { return ::_repeat_lit_string_el( __prg, colm_get_repeat_next( __tree ) ); }
::lit_string_el _repeat_lit_string_el:: value() { return ::lit_string_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_string_el _repeat_string_el:: next() { return ::_repeat_string_el( __prg, colm_get_repeat_next( __tree ) ); }
::string_el _repeat_string_el:: value() { return ::string_el( __prg, colm_get_repeat_val( __tree ) ); }
::_repeat_root_item _T_start::RootItemList() { static int a[] = {1, 0, 0}; return ::_repeat_root_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def _T_root_item::rl_def() { static int a[] = {1, 0, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def _T_root_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def _T_root_item::token_def() { static int a[] = {1, 2, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def _T_root_item::ic_def() { static int a[] = {1, 3, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def _T_root_item::ignore_def() { static int a[] = {1, 4, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def _T_root_item::cfl_def() { static int a[] = {1, 5, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def _T_root_item::region_def() { static int a[] = {1, 6, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def _T_root_item::struct_def() { static int a[] = {1, 7, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::namespace_def _T_root_item::namespace_def() { static int a[] = {1, 8, 0}; return ::namespace_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def _T_root_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def _T_root_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def _T_root_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::statement _T_root_item::statement() { static int a[] = {1, 12, 0}; return ::statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::global_def _T_root_item::global_def() { static int a[] = {1, 13, 0}; return ::global_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::export_def _T_root_item::export_def() { static int a[] = {1, 14, 0}; return ::export_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def _T_root_item::pre_eof_def() { static int a[] = {1, 15, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def _T_root_item::precedence_def() { static int a[] = {1, 16, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def _T_root_item::alias_def() { static int a[] = {1, 17, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::include _T_root_item::include() { static int a[] = {1, 18, 0}; return ::include( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reduction_def _T_root_item::reduction_def() { static int a[] = {1, 19, 0}; return ::reduction_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::INCLUDE _T_include::INCLUDE() { static int a[] = {1, 0, 0}; return ::INCLUDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_include::SQ() { static int a[] = {1, 0, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_include::SqConsDataList() { static int a[] = {1, 0, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_include::sq_lit_term() { static int a[] = {1, 0, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_type _T_precedence_def::pred_type() { static int a[] = {1, 0, 0}; return ::pred_type( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token_list _T_precedence_def::pred_token_list() { static int a[] = {1, 0, 1}; return ::pred_token_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEFT _T_pred_type::LEFT() { static int a[] = {1, 0, 0}; return ::LEFT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RIGHT _T_pred_type::RIGHT() { static int a[] = {1, 1, 0}; return ::RIGHT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NONASSOC _T_pred_type::NONASSOC() { static int a[] = {1, 2, 0}; return ::NONASSOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token_list _T_pred_token_list::_pred_token_list() { static int a[] = {1, 0, 0}; return ::pred_token_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA _T_pred_token_list::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pred_token _T_pred_token_list::pred_token() { static int a[] = {2, 0, 2, 1, 0}; return ::pred_token( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_pred_token::region_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_pred_token::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit _T_pred_token::backtick_lit() { static int a[] = {1, 1, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PREEOF _T_pre_eof_def::PREEOF() { static int a[] = {1, 0, 0}; return ::PREEOF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_pre_eof_def::COPEN() { static int a[] = {1, 0, 1}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_pre_eof_def::lang_stmt_list() { static int a[] = {1, 0, 2}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_pre_eof_def::CCLOSE() { static int a[] = {1, 0, 3}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ALIAS _T_alias_def::ALIAS() { static int a[] = {1, 0, 0}; return ::ALIAS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_alias_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_alias_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_var_def _T_struct_item::struct_var_def() { static int a[] = {1, 0, 0}; return ::struct_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def _T_struct_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def _T_struct_item::rl_def() { static int a[] = {1, 2, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def _T_struct_item::token_def() { static int a[] = {1, 3, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def _T_struct_item::ic_def() { static int a[] = {1, 4, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def _T_struct_item::ignore_def() { static int a[] = {1, 5, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def _T_struct_item::cfl_def() { static int a[] = {1, 6, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def _T_struct_item::region_def() { static int a[] = {1, 7, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def _T_struct_item::struct_def() { static int a[] = {1, 8, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def _T_struct_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def _T_struct_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def _T_struct_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::export_def _T_struct_item::export_def() { static int a[] = {1, 12, 0}; return ::export_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def _T_struct_item::pre_eof_def() { static int a[] = {1, 13, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def _T_struct_item::precedence_def() { static int a[] = {1, 14, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def _T_struct_item::alias_def() { static int a[] = {1, 15, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EXPORT _T_export_def::EXPORT() { static int a[] = {1, 0, 0}; return ::EXPORT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def _T_export_def::var_def() { static int a[] = {1, 0, 1}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init _T_export_def::opt_def_init() { static int a[] = {1, 0, 2}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GLOBAL _T_global_def::GLOBAL() { static int a[] = {1, 0, 0}; return ::GLOBAL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def _T_global_def::var_def() { static int a[] = {1, 0, 1}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init _T_global_def::opt_def_init() { static int a[] = {1, 0, 2}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ITER _T_iter_def::ITER() { static int a[] = {1, 0, 0}; return ::ITER( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_iter_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_iter_def::POPEN() { static int a[] = {1, 0, 2}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list _T_iter_def::ParamVarDefList() { static int a[] = {1, 0, 3}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_iter_def::PCLOSE() { static int a[] = {1, 0, 4}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_iter_def::COPEN() { static int a[] = {1, 0, 5}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_iter_def::lang_stmt_list() { static int a[] = {1, 0, 6}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_iter_def::CCLOSE() { static int a[] = {1, 0, 7}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REF _T_reference_type_ref::REF() { static int a[] = {1, 0, 0}; return ::REF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT _T_reference_type_ref::LT() { static int a[] = {1, 0, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_reference_type_ref::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT _T_reference_type_ref::GT() { static int a[] = {1, 0, 3}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def _T_param_var_def_seq::param_var_def() { static int a[] = {2, 0, 0, 1, 0}; return ::param_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA _T_param_var_def_seq::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_seq _T_param_var_def_seq::_param_var_def_seq() { static int a[] = {1, 0, 2}; return ::param_var_def_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_seq _T_param_var_def_list::param_var_def_seq() { static int a[] = {1, 0, 0}; return ::param_var_def_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_param_var_def::id() { static int a[] = {2, 0, 0, 1, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_param_var_def::COLON() { static int a[] = {2, 0, 1, 1, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_param_var_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reference_type_ref _T_param_var_def::reference_type_ref() { static int a[] = {1, 1, 2}; return ::reference_type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EXPORT _T_opt_export::EXPORT() { static int a[] = {1, 0, 0}; return ::EXPORT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_export _T_function_def::opt_export() { static int a[] = {1, 0, 0}; return ::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_function_def::type_ref() { static int a[] = {1, 0, 1}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_function_def::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_function_def::POPEN() { static int a[] = {1, 0, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list _T_function_def::ParamVarDefList() { static int a[] = {1, 0, 4}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_function_def::PCLOSE() { static int a[] = {1, 0, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_function_def::COPEN() { static int a[] = {1, 0, 6}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_function_def::lang_stmt_list() { static int a[] = {1, 0, 7}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_function_def::CCLOSE() { static int a[] = {1, 0, 8}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_export _T_in_host_def::opt_export() { static int a[] = {1, 0, 0}; return ::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_in_host_def::type_ref() { static int a[] = {1, 0, 1}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_in_host_def::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_in_host_def::POPEN() { static int a[] = {1, 0, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::param_var_def_list _T_in_host_def::ParamVarDefList() { static int a[] = {1, 0, 4}; return ::param_var_def_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_in_host_def::PCLOSE() { static int a[] = {1, 0, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS _T_in_host_def::EQUALS() { static int a[] = {1, 0, 6}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_in_host_def::HostFunc() { static int a[] = {1, 0, 7}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def _T_struct_var_def::var_def() { static int a[] = {1, 0, 0}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STRUCT _T_struct_key::STRUCT() { static int a[] = {1, 0, 0}; return ::STRUCT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONTEXT _T_struct_key::CONTEXT() { static int a[] = {1, 1, 0}; return ::CONTEXT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_key _T_struct_def::struct_key() { static int a[] = {1, 0, 0}; return ::struct_key( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_struct_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_struct_item _T_struct_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_struct_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END _T_struct_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LITERAL _T_literal_def::LITERAL() { static int a[] = {1, 0, 0}; return ::LITERAL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_list _T_literal_def::literal_list() { static int a[] = {1, 0, 1}; return ::literal_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_list _T_literal_list::_literal_list() { static int a[] = {1, 0, 0}; return ::literal_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_item _T_literal_list::literal_item() { static int a[] = {2, 0, 1, 1, 0}; return ::literal_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_left _T_literal_item::no_ignore_left() { static int a[] = {1, 0, 0}; return ::no_ignore_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit _T_literal_item::backtick_lit() { static int a[] = {1, 0, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_right _T_literal_item::no_ignore_right() { static int a[] = {1, 0, 2}; return ::no_ignore_right( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NI _T_no_ignore_left::NI() { static int a[] = {1, 0, 0}; return ::NI( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS _T_no_ignore_left::MINUS() { static int a[] = {1, 0, 1}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS _T_no_ignore_right::MINUS() { static int a[] = {1, 0, 0}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NI _T_no_ignore_right::NI() { static int a[] = {1, 0, 1}; return ::NI( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCTION _T_reduction_def::REDUCTION() { static int a[] = {1, 0, 0}; return ::REDUCTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_reduction_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_reduction_item _T_reduction_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_reduction_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END _T_reduction_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_red_nonterm::type_ref() { static int a[] = {1, 0, 0}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN _T_red_nonterm::RED_OPEN() { static int a[] = {1, 0, 1}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item _T_red_nonterm::HostItems() { static int a[] = {1, 0, 2}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE _T_red_nonterm::RED_CLOSE() { static int a[] = {1, 0, 3}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_red_action::type_ref() { static int a[] = {1, 0, 0}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_red_action::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_red_action::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN _T_red_action::RED_OPEN() { static int a[] = {1, 0, 3}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item _T_red_action::HostItems() { static int a[] = {1, 0, 4}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE _T_red_action::RED_CLOSE() { static int a[] = {1, 0, 5}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_id _T_host_item::red_id() { static int a[] = {1, 0, 0}; return ::red_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_lit _T_host_item::red_lit() { static int a[] = {1, 1, 0}; return ::red_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_comment _T_host_item::red_comment() { static int a[] = {1, 2, 0}; return ::red_comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_ws _T_host_item::red_ws() { static int a[] = {1, 3, 0}; return ::red_ws( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_any _T_host_item::red_any() { static int a[] = {1, 4, 0}; return ::red_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_LHS _T_host_item::RED_LHS() { static int a[] = {1, 5, 0}; return ::RED_LHS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_REF _T_host_item::RED_RHS_REF() { static int a[] = {1, 6, 0}; return ::RED_RHS_REF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_LOC _T_host_item::RED_RHS_LOC() { static int a[] = {1, 7, 0}; return ::RED_RHS_LOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_NREF _T_host_item::RED_RHS_NREF() { static int a[] = {1, 8, 0}; return ::RED_RHS_NREF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_RHS_NLOC _T_host_item::RED_RHS_NLOC() { static int a[] = {1, 9, 0}; return ::RED_RHS_NLOC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_OPEN _T_host_item::RED_OPEN() { static int a[] = {1, 10, 0}; return ::RED_OPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_host_item _T_host_item::HostItems() { static int a[] = {1, 10, 1}; return ::_repeat_host_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RED_CLOSE _T_host_item::RED_CLOSE() { static int a[] = {1, 10, 2}; return ::RED_CLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_nonterm _T_reduction_item::red_nonterm() { static int a[] = {1, 0, 0}; return ::red_nonterm( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::red_action _T_reduction_item::red_action() { static int a[] = {1, 1, 0}; return ::red_action( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NAMESPACE _T_namespace_def::NAMESPACE() { static int a[] = {1, 0, 0}; return ::NAMESPACE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_namespace_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_namespace_item _T_namespace_def::ItemList() { static int a[] = {1, 0, 2}; return ::_repeat_namespace_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END _T_namespace_def::END() { static int a[] = {1, 0, 3}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::rl_def _T_namespace_item::rl_def() { static int a[] = {1, 0, 0}; return ::rl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::literal_def _T_namespace_item::literal_def() { static int a[] = {1, 1, 0}; return ::literal_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::token_def _T_namespace_item::token_def() { static int a[] = {1, 2, 0}; return ::token_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ic_def _T_namespace_item::ic_def() { static int a[] = {1, 3, 0}; return ::ic_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ignore_def _T_namespace_item::ignore_def() { static int a[] = {1, 4, 0}; return ::ignore_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cfl_def _T_namespace_item::cfl_def() { static int a[] = {1, 5, 0}; return ::cfl_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_def _T_namespace_item::region_def() { static int a[] = {1, 6, 0}; return ::region_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::struct_def _T_namespace_item::struct_def() { static int a[] = {1, 7, 0}; return ::struct_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::namespace_def _T_namespace_item::namespace_def() { static int a[] = {1, 8, 0}; return ::namespace_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::function_def _T_namespace_item::function_def() { static int a[] = {1, 9, 0}; return ::function_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::in_host_def _T_namespace_item::in_host_def() { static int a[] = {1, 10, 0}; return ::in_host_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_def _T_namespace_item::iter_def() { static int a[] = {1, 11, 0}; return ::iter_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pre_eof_def _T_namespace_item::pre_eof_def() { static int a[] = {1, 12, 0}; return ::pre_eof_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::precedence_def _T_namespace_item::precedence_def() { static int a[] = {1, 13, 0}; return ::precedence_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::alias_def _T_namespace_item::alias_def() { static int a[] = {1, 14, 0}; return ::alias_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::include _T_namespace_item::include() { static int a[] = {1, 15, 0}; return ::include( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::global_def _T_namespace_item::global_def() { static int a[] = {1, 16, 0}; return ::global_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCEFIRST _T_opt_reduce_first::REDUCEFIRST() { static int a[] = {1, 0, 0}; return ::REDUCEFIRST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DEF _T_cfl_def::DEF() { static int a[] = {1, 0, 0}; return ::DEF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_cfl_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_var_def _T_cfl_def::VarDefList() { static int a[] = {1, 0, 2}; return ::_repeat_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_reduce_first _T_cfl_def::opt_reduce_first() { static int a[] = {1, 0, 3}; return ::opt_reduce_first( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_list _T_cfl_def::prod_list() { static int a[] = {1, 0, 4}; return ::prod_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX _T_region_def::LEX() { static int a[] = {1, 0, 0}; return ::LEX( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_root_item _T_region_def::RootItemList() { static int a[] = {1, 0, 1}; return ::_repeat_root_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::END _T_region_def::END() { static int a[] = {1, 0, 2}; return ::END( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RL _T_rl_def::RL() { static int a[] = {1, 0, 0}; return ::RL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_rl_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH _T_rl_def::LEX_FSLASH() { static int a[] = {2, 0, 2, 0, 4}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr _T_rl_def::lex_expr() { static int a[] = {1, 0, 3}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr _T_opt_lex_expr::lex_expr() { static int a[] = {1, 0, 0}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TOKEN _T_token_def::TOKEN() { static int a[] = {1, 0, 0}; return ::TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_token_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_var_def _T_token_def::VarDefList() { static int a[] = {1, 0, 2}; return ::_repeat_var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_left _T_token_def::no_ignore_left() { static int a[] = {1, 0, 3}; return ::no_ignore_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH _T_token_def::LEX_FSLASH() { static int a[] = {2, 0, 4, 0, 6}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_expr _T_token_def::opt_lex_expr() { static int a[] = {1, 0, 5}; return ::opt_lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::no_ignore_right _T_token_def::no_ignore_right() { static int a[] = {1, 0, 7}; return ::no_ignore_right( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_translate _T_token_def::opt_translate() { static int a[] = {1, 0, 8}; return ::opt_translate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TOKEN _T_ic_def::TOKEN() { static int a[] = {1, 0, 0}; return ::TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_ic_def::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS _T_ic_def::MINUS() { static int a[] = {1, 0, 2}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_opt_translate::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_opt_translate::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_opt_translate::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_opt_id::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IGNORE _T_ignore_def::IGNORE() { static int a[] = {1, 0, 0}; return ::IGNORE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_id _T_ignore_def::opt_id() { static int a[] = {1, 0, 1}; return ::opt_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_FSLASH _T_ignore_def::LEX_FSLASH() { static int a[] = {2, 0, 2, 0, 4}; return ::LEX_FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_expr _T_ignore_def::opt_lex_expr() { static int a[] = {1, 0, 3}; return ::opt_lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_prod_el_name _T_prod_el::opt_prod_el_name() { static int a[] = {2, 0, 0, 1, 0}; return ::opt_prod_el_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_prod_el::region_qual() { static int a[] = {2, 0, 1, 1, 1}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_prod_el::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat _T_prod_el::opt_repeat() { static int a[] = {2, 0, 3, 1, 3}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit _T_prod_el::backtick_lit() { static int a[] = {1, 1, 2}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_opt_prod_el_name::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_opt_prod_el_name::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el_list _T_prod_el_list::_prod_el_list() { static int a[] = {1, 0, 0}; return ::prod_el_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el _T_prod_el_list::prod_el() { static int a[] = {1, 0, 1}; return ::prod_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMIT _T_opt_commit::COMMIT() { static int a[] = {1, 0, 0}; return ::COMMIT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_opt_prod_name::COLON() { static int a[] = {1, 0, 0}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_opt_prod_name::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN _T_prod::SQOPEN() { static int a[] = {1, 0, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_el_list _T_prod::prod_el_list() { static int a[] = {1, 0, 1}; return ::prod_el_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE _T_prod::SQCLOSE() { static int a[] = {1, 0, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_prod_name _T_prod::opt_prod_name() { static int a[] = {1, 0, 3}; return ::opt_prod_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_commit _T_prod::opt_commit() { static int a[] = {1, 0, 4}; return ::opt_commit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_reduce _T_prod::opt_reduce() { static int a[] = {1, 0, 5}; return ::opt_reduce( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_opt_reduce::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_opt_reduce::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_opt_reduce::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod_list _T_prod_list::_prod_list() { static int a[] = {1, 0, 0}; return ::prod_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BAR _T_prod_list::BAR() { static int a[] = {1, 0, 1}; return ::BAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::prod _T_prod_list::prod() { static int a[] = {2, 0, 2, 1, 0}; return ::prod( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CASE _T_case_clause::CASE() { static int a[] = {1, 0, 0}; return ::CASE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern _T_case_clause::pattern() { static int a[] = {1, 0, 1}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single _T_case_clause::block_or_single() { static int a[] = {1, 0, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DEFAULT _T_default_clause::DEFAULT() { static int a[] = {1, 0, 0}; return ::DEFAULT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single _T_default_clause::block_or_single() { static int a[] = {1, 0, 1}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause _T_case_clause_list::case_clause() { static int a[] = {2, 0, 0, 1, 0}; return ::case_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause_list _T_case_clause_list::_case_clause_list() { static int a[] = {1, 0, 1}; return ::case_clause_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::default_clause _T_case_clause_list::default_clause() { static int a[] = {1, 2, 0}; return ::default_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::print_stmt _T_statement::print_stmt() { static int a[] = {1, 0, 0}; return ::print_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::expr_stmt _T_statement::expr_stmt() { static int a[] = {1, 1, 0}; return ::expr_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_def _T_statement::var_def() { static int a[] = {1, 2, 0}; return ::var_def( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_def_init _T_statement::opt_def_init() { static int a[] = {1, 2, 1}; return ::opt_def_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FOR _T_statement::FOR() { static int a[] = {1, 3, 0}; return ::FOR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_statement::id() { static int a[] = {1, 3, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_statement::COLON() { static int a[] = {1, 3, 2}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_statement::type_ref() { static int a[] = {1, 3, 3}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IN _T_statement::IN() { static int a[] = {1, 3, 4}; return ::IN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::iter_call _T_statement::iter_call() { static int a[] = {1, 3, 5}; return ::iter_call( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single _T_statement::block_or_single() { static int a[] = {3, 3, 6, 4, 2, 7, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IF _T_statement::IF() { static int a[] = {1, 4, 0}; return ::IF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_statement::code_expr() { static int a[] = {4, 4, 1, 7, 1, 8, 2, 10, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_list _T_statement::elsif_list() { static int a[] = {1, 4, 3}; return ::elsif_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SWITCH _T_statement::SWITCH() { static int a[] = {2, 5, 0, 6, 0}; return ::SWITCH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref _T_statement::var_ref() { static int a[] = {4, 5, 1, 6, 1, 8, 0, 9, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::case_clause_list _T_statement::case_clause_list() { static int a[] = {2, 5, 2, 6, 3}; return ::case_clause_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_statement::COPEN() { static int a[] = {1, 6, 2}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_statement::CCLOSE() { static int a[] = {1, 6, 4}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::WHILE _T_statement::WHILE() { static int a[] = {1, 7, 0}; return ::WHILE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS _T_statement::EQUALS() { static int a[] = {1, 8, 1}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::YIELD _T_statement::YIELD() { static int a[] = {1, 9, 0}; return ::YIELD( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RETURN _T_statement::RETURN() { static int a[] = {1, 10, 0}; return ::RETURN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BREAK _T_statement::BREAK() { static int a[] = {1, 11, 0}; return ::BREAK( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REJECT _T_statement::REJECT() { static int a[] = {1, 12, 0}; return ::REJECT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_clause _T_elsif_list::elsif_clause() { static int a[] = {1, 0, 0}; return ::elsif_clause( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::elsif_list _T_elsif_list::_elsif_list() { static int a[] = {1, 0, 1}; return ::elsif_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::optional_else _T_elsif_list::optional_else() { static int a[] = {1, 1, 0}; return ::optional_else( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ELSIF _T_elsif_clause::ELSIF() { static int a[] = {1, 0, 0}; return ::ELSIF( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_elsif_clause::code_expr() { static int a[] = {1, 0, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single _T_elsif_clause::block_or_single() { static int a[] = {1, 0, 2}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ELSE _T_optional_else::ELSE() { static int a[] = {1, 0, 0}; return ::ELSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::block_or_single _T_optional_else::block_or_single() { static int a[] = {1, 0, 1}; return ::block_or_single( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_call_arg_seq::code_expr() { static int a[] = {2, 0, 0, 1, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA _T_call_arg_seq::COMMA() { static int a[] = {1, 0, 1}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_seq _T_call_arg_seq::_call_arg_seq() { static int a[] = {1, 0, 2}; return ::call_arg_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_seq _T_call_arg_list::call_arg_seq() { static int a[] = {1, 0, 0}; return ::call_arg_seq( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 _T_iter_call::E1() { static int a[] = {1, 0, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref _T_iter_call::var_ref() { static int a[] = {1, 0, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_iter_call::POPEN() { static int a[] = {1, 0, 2}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list _T_iter_call::call_arg_list() { static int a[] = {1, 0, 3}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_iter_call::PCLOSE() { static int a[] = {1, 0, 4}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 _T_iter_call::E2() { static int a[] = {1, 1, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_iter_call::id() { static int a[] = {1, 1, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E3 _T_iter_call::E3() { static int a[] = {1, 2, 0}; return ::E3( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_iter_call::code_expr() { static int a[] = {1, 2, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_block_or_single::COPEN() { static int a[] = {1, 0, 0}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_block_or_single::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_block_or_single::CCLOSE() { static int a[] = {1, 0, 2}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::statement _T_block_or_single::statement() { static int a[] = {1, 1, 0}; return ::statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REQUIRE _T_require_pattern::REQUIRE() { static int a[] = {1, 0, 0}; return ::REQUIRE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref _T_require_pattern::var_ref() { static int a[] = {1, 0, 1}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern _T_require_pattern::pattern() { static int a[] = {1, 0, 2}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::require_pattern _T_opt_require_stmt::require_pattern() { static int a[] = {1, 0, 0}; return ::require_pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lang_stmt_list _T_opt_require_stmt::lang_stmt_list() { static int a[] = {1, 0, 1}; return ::lang_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_statement _T_lang_stmt_list::StmtList() { static int a[] = {1, 0, 0}; return ::_repeat_statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_require_stmt _T_lang_stmt_list::opt_require_stmt() { static int a[] = {1, 0, 1}; return ::opt_require_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQUALS _T_opt_def_init::EQUALS() { static int a[] = {1, 0, 0}; return ::EQUALS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_opt_def_init::code_expr() { static int a[] = {1, 0, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_var_def::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_var_def::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_var_def::type_ref() { static int a[] = {1, 0, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT _T_print_stmt::PRINT() { static int a[] = {2, 0, 0, 4, 0}; return ::PRINT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_print_stmt::POPEN() { static int a[] = {4, 0, 1, 1, 1, 2, 1, 3, 1}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list _T_print_stmt::call_arg_list() { static int a[] = {4, 0, 2, 1, 2, 2, 2, 3, 2}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_print_stmt::PCLOSE() { static int a[] = {4, 0, 3, 1, 3, 2, 3, 3, 3}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINTS _T_print_stmt::PRINTS() { static int a[] = {1, 1, 0}; return ::PRINTS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT_XML _T_print_stmt::PRINT_XML() { static int a[] = {1, 2, 0}; return ::PRINT_XML( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PRINT_XML_AC _T_print_stmt::PRINT_XML_AC() { static int a[] = {1, 3, 0}; return ::PRINT_XML_AC( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accumulate _T_print_stmt::accumulate() { static int a[] = {1, 4, 1}; return ::accumulate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_expr_stmt::code_expr() { static int a[] = {1, 0, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_code_expr::_code_expr() { static int a[] = {2, 0, 0, 1, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::AMPAMP _T_code_expr::AMPAMP() { static int a[] = {1, 0, 1}; return ::AMPAMP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_relational _T_code_expr::code_relational() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_relational( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BARBAR _T_code_expr::BARBAR() { static int a[] = {1, 1, 1}; return ::BARBAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_relational _T_code_relational::_code_relational() { static int a[] = {6, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0}; return ::code_relational( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EQEQ _T_code_relational::EQEQ() { static int a[] = {1, 0, 1}; return ::EQEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_additive _T_code_relational::code_additive() { static int a[] = {7, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 0}; return ::code_additive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NEQ _T_code_relational::NEQ() { static int a[] = {1, 1, 1}; return ::NEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT _T_code_relational::LT() { static int a[] = {1, 2, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT _T_code_relational::GT() { static int a[] = {1, 3, 1}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LTEQ _T_code_relational::LTEQ() { static int a[] = {1, 4, 1}; return ::LTEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GTEQ _T_code_relational::GTEQ() { static int a[] = {1, 5, 1}; return ::GTEQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_additive _T_code_additive::_code_additive() { static int a[] = {2, 0, 0, 1, 0}; return ::code_additive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PLUS _T_code_additive::PLUS() { static int a[] = {1, 0, 1}; return ::PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_multiplicitive _T_code_additive::code_multiplicitive() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_multiplicitive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MINUS _T_code_additive::MINUS() { static int a[] = {1, 1, 1}; return ::MINUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_multiplicitive _T_code_multiplicitive::_code_multiplicitive() { static int a[] = {2, 0, 0, 1, 0}; return ::code_multiplicitive( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STAR _T_code_multiplicitive::STAR() { static int a[] = {1, 0, 1}; return ::STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_unary _T_code_multiplicitive::code_unary() { static int a[] = {3, 0, 2, 1, 2, 2, 0}; return ::code_unary( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FSLASH _T_code_multiplicitive::FSLASH() { static int a[] = {1, 1, 1}; return ::FSLASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BANG _T_code_unary::BANG() { static int a[] = {1, 0, 0}; return ::BANG( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_factor _T_code_unary::code_factor() { static int a[] = {6, 0, 1, 1, 1, 2, 2, 3, 1, 4, 1, 5, 0}; return ::code_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOLLAR _T_code_unary::DOLLAR() { static int a[] = {3, 1, 0, 2, 0, 2, 1}; return ::DOLLAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CARET _T_code_unary::CARET() { static int a[] = {1, 3, 0}; return ::CARET( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PERCENT _T_code_unary::PERCENT() { static int a[] = {1, 4, 0}; return ::PERCENT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOT _T_opt_eos::DOT() { static int a[] = {1, 0, 0}; return ::DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::EOS _T_opt_eos::EOS() { static int a[] = {1, 1, 0}; return ::EOS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::number _T_code_factor::number() { static int a[] = {1, 0, 0}; return ::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::var_ref _T_code_factor::var_ref() { static int a[] = {6, 1, 0, 2, 0, 7, 1, 8, 1, 14, 1, 16, 2}; return ::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_code_factor::POPEN() { static int a[] = {5, 1, 1, 6, 0, 17, 1, 18, 1, 20, 3}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::call_arg_list _T_code_factor::call_arg_list() { static int a[] = {3, 1, 2, 17, 2, 18, 2}; return ::call_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_code_factor::PCLOSE() { static int a[] = {5, 1, 3, 6, 2, 17, 3, 18, 3, 20, 5}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NIL _T_code_factor::NIL() { static int a[] = {1, 3, 0}; return ::NIL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TRUE _T_code_factor::TRUE() { static int a[] = {1, 4, 0}; return ::TRUE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::FALSE _T_code_factor::FALSE() { static int a[] = {1, 5, 0}; return ::FALSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_code_factor::code_expr() { static int a[] = {1, 6, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SEND _T_code_factor::SEND() { static int a[] = {1, 7, 0}; return ::SEND( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accumulate _T_code_factor::accumulate() { static int a[] = {6, 7, 2, 8, 2, 9, 4, 10, 4, 11, 4, 12, 4}; return ::accumulate( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_eos _T_code_factor::opt_eos() { static int a[] = {2, 7, 3, 8, 3}; return ::opt_eos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SEND_TREE _T_code_factor::SEND_TREE() { static int a[] = {1, 8, 0}; return ::SEND_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE _T_code_factor::PARSE() { static int a[] = {1, 9, 0}; return ::PARSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_capture _T_code_factor::opt_capture() { static int a[] = {5, 9, 1, 10, 1, 11, 1, 13, 1, 20, 1}; return ::opt_capture( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_code_factor::type_ref() { static int a[] = {9, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2, 16, 0, 19, 2, 20, 2, 21, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_field_init _T_code_factor::opt_field_init() { static int a[] = {5, 9, 3, 10, 3, 11, 3, 12, 3, 13, 3}; return ::opt_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE_TREE _T_code_factor::PARSE_TREE() { static int a[] = {1, 10, 0}; return ::PARSE_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSE_STOP _T_code_factor::PARSE_STOP() { static int a[] = {1, 11, 0}; return ::PARSE_STOP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::REDUCE _T_code_factor::REDUCE() { static int a[] = {1, 12, 0}; return ::REDUCE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_code_factor::id() { static int a[] = {1, 12, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS _T_code_factor::CONS() { static int a[] = {1, 13, 0}; return ::CONS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::constructor _T_code_factor::constructor() { static int a[] = {1, 13, 4}; return ::constructor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MATCH _T_code_factor::MATCH() { static int a[] = {1, 14, 0}; return ::MATCH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern _T_code_factor::pattern() { static int a[] = {1, 14, 2}; return ::pattern( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string _T_code_factor::string() { static int a[] = {1, 15, 0}; return ::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::IN _T_code_factor::IN() { static int a[] = {1, 16, 1}; return ::IN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAKE_TREE _T_code_factor::MAKE_TREE() { static int a[] = {1, 17, 0}; return ::MAKE_TREE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAKE_TOKEN _T_code_factor::MAKE_TOKEN() { static int a[] = {1, 18, 0}; return ::MAKE_TOKEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TYPEID _T_code_factor::TYPEID() { static int a[] = {1, 19, 0}; return ::TYPEID( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT _T_code_factor::LT() { static int a[] = {2, 19, 1, 21, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT _T_code_factor::GT() { static int a[] = {2, 19, 3, 21, 3}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::NEW _T_code_factor::NEW() { static int a[] = {1, 20, 0}; return ::NEW( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_field_init _T_code_factor::FieldInitList() { static int a[] = {1, 20, 4}; return ::_repeat_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CAST _T_code_factor::CAST() { static int a[] = {1, 21, 0}; return ::CAST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_factor _T_code_factor::_code_factor() { static int a[] = {1, 21, 4}; return ::code_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_type_ref::region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_type_ref::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat _T_type_ref::opt_repeat() { static int a[] = {1, 0, 2}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::INT _T_type_ref::INT() { static int a[] = {1, 1, 0}; return ::INT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::BOOL _T_type_ref::BOOL() { static int a[] = {1, 2, 0}; return ::BOOL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PARSER _T_type_ref::PARSER() { static int a[] = {1, 3, 0}; return ::PARSER( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LT _T_type_ref::LT() { static int a[] = {5, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1}; return ::LT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_type_ref::_type_ref() { static int a[] = {3, 3, 2, 4, 2, 6, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::GT _T_type_ref::GT() { static int a[] = {5, 3, 3, 4, 3, 5, 5, 6, 3, 7, 5}; return ::GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LIST _T_type_ref::LIST() { static int a[] = {1, 4, 0}; return ::LIST( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAP _T_type_ref::MAP() { static int a[] = {1, 5, 0}; return ::MAP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_type_ref::KeyType() { static int a[] = {2, 5, 2, 7, 2}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA _T_type_ref::COMMA() { static int a[] = {2, 5, 3, 7, 3}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::type_ref _T_type_ref::ValType() { static int a[] = {2, 5, 4, 7, 4}; return ::type_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LIST_EL _T_type_ref::LIST_EL() { static int a[] = {1, 6, 0}; return ::LIST_EL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::MAP_EL _T_type_ref::MAP_EL() { static int a[] = {1, 7, 0}; return ::MAP_EL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_region_qual::_region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_region_qual::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOUBLE_COLON _T_region_qual::DOUBLE_COLON() { static int a[] = {1, 0, 2}; return ::DOUBLE_COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::STAR _T_opt_repeat::STAR() { static int a[] = {1, 0, 0}; return ::STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PLUS _T_opt_repeat::PLUS() { static int a[] = {1, 1, 0}; return ::PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::QUESTION _T_opt_repeat::QUESTION() { static int a[] = {1, 2, 0}; return ::QUESTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_opt_capture::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_opt_capture::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::POPEN _T_opt_field_init::POPEN() { static int a[] = {1, 0, 0}; return ::POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_field_init _T_opt_field_init::FieldInitList() { static int a[] = {1, 0, 1}; return ::_repeat_field_init( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::PCLOSE _T_opt_field_init::PCLOSE() { static int a[] = {1, 0, 2}; return ::PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_field_init::code_expr() { static int a[] = {1, 0, 0}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_opt_label::id() { static int a[] = {1, 0, 0}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COLON _T_opt_label::COLON() { static int a[] = {1, 0, 1}; return ::COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_DQ _T_dq_lit_term::CONS_DQ() { static int a[] = {1, 0, 0}; return ::CONS_DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_DQ_NL _T_dq_lit_term::CONS_DQ_NL() { static int a[] = {1, 1, 0}; return ::CONS_DQ_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQ _T_sq_lit_term::CONS_SQ() { static int a[] = {1, 0, 0}; return ::CONS_SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQ_NL _T_sq_lit_term::CONS_SQ_NL() { static int a[] = {1, 1, 0}; return ::CONS_SQ_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::tilde_data _T_opt_tilde_data::tilde_data() { static int a[] = {1, 0, 0}; return ::tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_pattern_el_lel::region_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_pattern_el_lel::id() { static int a[] = {1, 0, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_repeat _T_pattern_el_lel::opt_repeat() { static int a[] = {2, 0, 2, 1, 2}; return ::opt_repeat( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit _T_pattern_el_lel::backtick_lit() { static int a[] = {1, 1, 1}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_label _T_pattern_el::opt_label() { static int a[] = {1, 0, 0}; return ::opt_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_el_lel _T_pattern_el::pattern_el_lel() { static int a[] = {1, 0, 1}; return ::pattern_el_lel( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_pattern_el::DQ() { static int a[] = {1, 1, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_litpat_el _T_pattern_el::LitpatElList() { static int a[] = {1, 1, 1}; return ::_repeat_litpat_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_pattern_el::dq_lit_term() { static int a[] = {1, 1, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_pattern_el::SQ() { static int a[] = {1, 2, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_pattern_el::SqConsDataList() { static int a[] = {1, 2, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_pattern_el::sq_lit_term() { static int a[] = {1, 2, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_pattern_el::TILDE() { static int a[] = {1, 3, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_pattern_el::opt_tilde_data() { static int a[] = {1, 3, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_pattern_el::TILDE_NL() { static int a[] = {1, 3, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data _T_litpat_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN _T_litpat_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_pattern_el _T_litpat_el::PatternElList() { static int a[] = {1, 1, 1}; return ::_repeat_pattern_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE _T_litpat_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_pattern_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_litpat_el _T_pattern_top_el::LitpatElList() { static int a[] = {1, 0, 1}; return ::_repeat_litpat_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_pattern_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_pattern_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_pattern_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_pattern_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_pattern_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_pattern_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_pattern_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN _T_pattern_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_pattern_el _T_pattern_top_el::PatternElList() { static int a[] = {1, 3, 1}; return ::_repeat_pattern_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE _T_pattern_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_list _T_pattern_list::_pattern_list() { static int a[] = {1, 0, 0}; return ::pattern_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_top_el _T_pattern_list::pattern_top_el() { static int a[] = {2, 0, 1, 1, 0}; return ::pattern_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::pattern_list _T_pattern::pattern_list() { static int a[] = {1, 0, 0}; return ::pattern_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 _T_cons_el::E1() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_cons_el::region_qual() { static int a[] = {1, 0, 1}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::backtick_lit _T_cons_el::backtick_lit() { static int a[] = {1, 0, 2}; return ::backtick_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_cons_el::DQ() { static int a[] = {1, 1, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_cons_el _T_cons_el::LitConsElList() { static int a[] = {1, 1, 2}; return ::_repeat_lit_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_cons_el::dq_lit_term() { static int a[] = {1, 1, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_cons_el::SQ() { static int a[] = {1, 2, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_cons_el::SqConsDataList() { static int a[] = {1, 2, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_cons_el::sq_lit_term() { static int a[] = {1, 2, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_cons_el::TILDE() { static int a[] = {1, 3, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_cons_el::opt_tilde_data() { static int a[] = {1, 3, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_cons_el::TILDE_NL() { static int a[] = {1, 3, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 _T_cons_el::E2() { static int a[] = {1, 4, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_cons_el::code_expr() { static int a[] = {1, 4, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data _T_lit_cons_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN _T_lit_cons_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_cons_el _T_lit_cons_el::ConsElList() { static int a[] = {1, 1, 1}; return ::_repeat_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE _T_lit_cons_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_cons_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_cons_el _T_cons_top_el::LitConsElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_cons_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_cons_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_cons_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_cons_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_cons_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_cons_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_cons_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN _T_cons_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_cons_el _T_cons_top_el::ConsElList() { static int a[] = {1, 3, 1}; return ::_repeat_cons_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE _T_cons_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_top_el _T_cons_list::cons_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::cons_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_list _T_cons_list::_cons_list() { static int a[] = {1, 0, 1}; return ::cons_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::cons_list _T_constructor::cons_list() { static int a[] = {1, 0, 0}; return ::cons_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 _T_accum_el::E1() { static int a[] = {3, 0, 0, 1, 0, 2, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_accum_el::DQ() { static int a[] = {1, 0, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_accum_el _T_accum_el::LitAccumElList() { static int a[] = {1, 0, 2}; return ::_repeat_lit_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_accum_el::dq_lit_term() { static int a[] = {1, 0, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_accum_el::SQ() { static int a[] = {1, 1, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_accum_el::SqConsDataList() { static int a[] = {1, 1, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_accum_el::sq_lit_term() { static int a[] = {1, 1, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_accum_el::TILDE() { static int a[] = {1, 2, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_accum_el::opt_tilde_data() { static int a[] = {1, 2, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_accum_el::TILDE_NL() { static int a[] = {1, 2, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 _T_accum_el::E2() { static int a[] = {1, 3, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_accum_el::code_expr() { static int a[] = {1, 3, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data _T_lit_accum_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN _T_lit_accum_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_accum_el _T_lit_accum_el::AccumElList() { static int a[] = {1, 1, 1}; return ::_repeat_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE _T_lit_accum_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_accum_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_accum_el _T_accum_top_el::LitAccumElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_accum_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_accum_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_accum_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_accum_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_accum_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_accum_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_accum_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN _T_accum_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_accum_el _T_accum_top_el::AccumElList() { static int a[] = {1, 3, 1}; return ::_repeat_accum_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE _T_accum_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_top_el _T_accum_list::accum_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::accum_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_list _T_accum_list::_accum_list() { static int a[] = {1, 0, 1}; return ::accum_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::accum_list _T_accumulate::accum_list() { static int a[] = {1, 0, 0}; return ::accum_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E1 _T_string_el::E1() { static int a[] = {3, 0, 0, 1, 0, 2, 0}; return ::E1( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_string_el::DQ() { static int a[] = {1, 0, 1}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_string_el _T_string_el::LitStringElList() { static int a[] = {1, 0, 2}; return ::_repeat_lit_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_string_el::dq_lit_term() { static int a[] = {1, 0, 3}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_string_el::SQ() { static int a[] = {1, 1, 1}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_string_el::SqConsDataList() { static int a[] = {1, 1, 2}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_string_el::sq_lit_term() { static int a[] = {1, 1, 3}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_string_el::TILDE() { static int a[] = {1, 2, 1}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_string_el::opt_tilde_data() { static int a[] = {1, 2, 2}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_string_el::TILDE_NL() { static int a[] = {1, 2, 3}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::E2 _T_string_el::E2() { static int a[] = {1, 3, 0}; return ::E2( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::code_expr _T_string_el::code_expr() { static int a[] = {1, 3, 1}; return ::code_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_cons_data _T_lit_string_el::dq_cons_data() { static int a[] = {1, 0, 0}; return ::dq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQOPEN _T_lit_string_el::CONS_SQOPEN() { static int a[] = {1, 1, 0}; return ::CONS_SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_string_el _T_lit_string_el::StringElList() { static int a[] = {1, 1, 1}; return ::_repeat_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CONS_SQCLOSE _T_lit_string_el::CONS_SQCLOSE() { static int a[] = {1, 1, 2}; return ::CONS_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DQ _T_string_top_el::DQ() { static int a[] = {1, 0, 0}; return ::DQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_lit_string_el _T_string_top_el::LitStringElList() { static int a[] = {1, 0, 1}; return ::_repeat_lit_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::dq_lit_term _T_string_top_el::dq_lit_term() { static int a[] = {1, 0, 2}; return ::dq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQ _T_string_top_el::SQ() { static int a[] = {1, 1, 0}; return ::SQ( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_sq_cons_data _T_string_top_el::SqConsDataList() { static int a[] = {1, 1, 1}; return ::_repeat_sq_cons_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::sq_lit_term _T_string_top_el::sq_lit_term() { static int a[] = {1, 1, 2}; return ::sq_lit_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE _T_string_top_el::TILDE() { static int a[] = {1, 2, 0}; return ::TILDE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_tilde_data _T_string_top_el::opt_tilde_data() { static int a[] = {1, 2, 1}; return ::opt_tilde_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::TILDE_NL _T_string_top_el::TILDE_NL() { static int a[] = {1, 2, 2}; return ::TILDE_NL( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQOPEN _T_string_top_el::SQOPEN() { static int a[] = {1, 3, 0}; return ::SQOPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::_repeat_string_el _T_string_top_el::StringElList() { static int a[] = {1, 3, 1}; return ::_repeat_string_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::SQCLOSE _T_string_top_el::SQCLOSE() { static int a[] = {1, 3, 2}; return ::SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_top_el _T_string_list::string_top_el() { static int a[] = {2, 0, 0, 1, 0}; return ::string_top_el( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_list _T_string_list::_string_list() { static int a[] = {1, 0, 1}; return ::string_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::string_list _T_string::string_list() { static int a[] = {1, 0, 0}; return ::string_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::region_qual _T_var_ref::region_qual() { static int a[] = {1, 0, 0}; return ::region_qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::qual _T_var_ref::qual() { static int a[] = {1, 0, 1}; return ::qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_var_ref::id() { static int a[] = {1, 0, 2}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::qual _T_qual::_qual() { static int a[] = {2, 0, 0, 1, 0}; return ::qual( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::id _T_qual::id() { static int a[] = {2, 0, 1, 1, 1}; return ::id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::DOT _T_qual::DOT() { static int a[] = {1, 0, 2}; return ::DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ARROW _T_qual::ARROW() { static int a[] = {1, 1, 2}; return ::ARROW( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr _T_lex_expr::_lex_expr() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_BAR _T_lex_expr::LEX_BAR() { static int a[] = {1, 0, 1}; return ::LEX_BAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_term _T_lex_expr::lex_term() { static int a[] = {5, 0, 2, 1, 2, 2, 2, 3, 2, 4, 0}; return ::lex_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_AMP _T_lex_expr::LEX_AMP() { static int a[] = {1, 1, 1}; return ::LEX_AMP( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DASH _T_lex_expr::LEX_DASH() { static int a[] = {1, 2, 1}; return ::LEX_DASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DASHDASH _T_lex_expr::LEX_DASHDASH() { static int a[] = {1, 3, 1}; return ::LEX_DASHDASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DOT _T_opt_lex_dot::LEX_DOT() { static int a[] = {1, 0, 0}; return ::LEX_DOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_term _T_lex_term::_lex_term() { static int a[] = {4, 0, 0, 1, 0, 2, 0, 3, 0}; return ::lex_term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::opt_lex_dot _T_lex_term::opt_lex_dot() { static int a[] = {1, 0, 1}; return ::opt_lex_dot( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_rep _T_lex_term::lex_factor_rep() { static int a[] = {5, 0, 2, 1, 2, 2, 2, 3, 2, 4, 0}; return ::lex_factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_COLON_GT _T_lex_term::LEX_COLON_GT() { static int a[] = {1, 1, 1}; return ::LEX_COLON_GT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_COLON_GTGT _T_lex_term::LEX_COLON_GTGT() { static int a[] = {1, 2, 1}; return ::LEX_COLON_GTGT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_LT_COLON _T_lex_term::LEX_LT_COLON() { static int a[] = {1, 3, 1}; return ::LEX_LT_COLON( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_rep _T_lex_factor_rep::_lex_factor_rep() { static int a[] = {8, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0}; return ::lex_factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_STAR _T_lex_factor_rep::LEX_STAR() { static int a[] = {1, 0, 1}; return ::LEX_STAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_STARSTAR _T_lex_factor_rep::LEX_STARSTAR() { static int a[] = {1, 1, 1}; return ::LEX_STARSTAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_PLUS _T_lex_factor_rep::LEX_PLUS() { static int a[] = {1, 2, 1}; return ::LEX_PLUS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_QUESTION _T_lex_factor_rep::LEX_QUESTION() { static int a[] = {1, 3, 1}; return ::LEX_QUESTION( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COPEN _T_lex_factor_rep::COPEN() { static int a[] = {4, 4, 1, 5, 1, 6, 1, 7, 1}; return ::COPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint _T_lex_factor_rep::lex_uint() { static int a[] = {3, 4, 2, 5, 3, 6, 2}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::CCLOSE _T_lex_factor_rep::CCLOSE() { static int a[] = {4, 4, 3, 5, 4, 6, 4, 7, 5}; return ::CCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::COMMA _T_lex_factor_rep::COMMA() { static int a[] = {3, 5, 2, 6, 3, 7, 3}; return ::COMMA( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint _T_lex_factor_rep::Low() { static int a[] = {1, 7, 2}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint _T_lex_factor_rep::High() { static int a[] = {1, 7, 4}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_neg _T_lex_factor_rep::lex_factor_neg() { static int a[] = {1, 8, 0}; return ::lex_factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_CARET _T_lex_factor_neg::LEX_CARET() { static int a[] = {1, 0, 0}; return ::LEX_CARET( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor_neg _T_lex_factor_neg::_lex_factor_neg() { static int a[] = {1, 0, 1}; return ::lex_factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_factor _T_lex_factor_neg::lex_factor() { static int a[] = {1, 1, 0}; return ::lex_factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_lit _T_lex_range_lit::lex_lit() { static int a[] = {1, 0, 0}; return ::lex_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_num _T_lex_range_lit::lex_num() { static int a[] = {1, 1, 0}; return ::lex_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint _T_lex_num::lex_uint() { static int a[] = {1, 0, 0}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_hex _T_lex_num::lex_hex() { static int a[] = {1, 1, 0}; return ::lex_hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_lit _T_lex_factor::lex_lit() { static int a[] = {1, 0, 0}; return ::lex_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_id _T_lex_factor::lex_id() { static int a[] = {1, 1, 0}; return ::lex_id( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_uint _T_lex_factor::lex_uint() { static int a[] = {1, 2, 0}; return ::lex_uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_hex _T_lex_factor::lex_hex() { static int a[] = {1, 3, 0}; return ::lex_hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_range_lit _T_lex_factor::Low() { static int a[] = {1, 4, 0}; return ::lex_range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_DOTDOT _T_lex_factor::LEX_DOTDOT() { static int a[] = {1, 4, 1}; return ::LEX_DOTDOT( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_range_lit _T_lex_factor::High() { static int a[] = {1, 4, 2}; return ::lex_range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_SQOPEN_POS _T_lex_factor::LEX_SQOPEN_POS() { static int a[] = {1, 5, 0}; return ::LEX_SQOPEN_POS( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_data _T_lex_factor::reg_or_data() { static int a[] = {2, 5, 1, 6, 1}; return ::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_SQCLOSE _T_lex_factor::RE_SQCLOSE() { static int a[] = {2, 5, 2, 6, 2}; return ::RE_SQCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_SQOPEN_NEG _T_lex_factor::LEX_SQOPEN_NEG() { static int a[] = {1, 6, 0}; return ::LEX_SQOPEN_NEG( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_POPEN _T_lex_factor::LEX_POPEN() { static int a[] = {1, 7, 0}; return ::LEX_POPEN( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::lex_expr _T_lex_factor::lex_expr() { static int a[] = {1, 7, 1}; return ::lex_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::LEX_PCLOSE _T_lex_factor::LEX_PCLOSE() { static int a[] = {1, 7, 2}; return ::LEX_PCLOSE( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_data _T_reg_or_data::_reg_or_data() { static int a[] = {1, 0, 0}; return ::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::reg_or_char _T_reg_or_data::reg_or_char() { static int a[] = {1, 0, 1}; return ::reg_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR _T_reg_or_char::RE_CHAR() { static int a[] = {1, 0, 0}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR _T_reg_or_char::Low() { static int a[] = {1, 1, 0}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_DASH _T_reg_or_char::RE_DASH() { static int a[] = {1, 1, 1}; return ::RE_DASH( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::RE_CHAR _T_reg_or_char::High() { static int a[] = {1, 1, 2}; return ::RE_CHAR( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }

::start ColmTree( colm_program *prg )
{ return ::start( prg, colm_get_global( prg, 0) ); }
::str ColmError( colm_program *prg )
{ return ::str( prg, colm_get_global( prg, 1) ); }

